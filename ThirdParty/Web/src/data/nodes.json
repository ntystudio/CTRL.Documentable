{
	"nodes": [
		{
			"className": "UDynamicInputTriggerHold",
			"classHierarchy": [
				"UObject",
				"UInputTrigger",
				"UInputTriggerTimedBase"
			],
			"path": "Classes/Default/UDynamicInputTriggerHold",
			"properties": [
				{
					"name": "bIsOneShot",
					"type": "bool",
					"flags": [
						"Category = Trigger Settings",
						"Comment = // Should this trigger fire only once, or fire every frame once the hold time threshold is met?\n",
						"ModuleRelativePath = InputTriggerDynamicHold.h",
						"ToolTip = Should this trigger fire only once, or fire every frame once the hold time threshold is met?",
						"Public",
						"BlueprintVisible",
						"Edit",
						"Config",
						"Config"
					],
					"description": "Should this trigger fire only once, or fire every frame once the hold time threshold is met?"
				}
			],
			"functions": []
		},
		{
			"className": "UGameplayTagsObject",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase"
			],
			"path": "Classes/Default/UGameplayTagsObject",
			"properties": [
				{
					"name": "GameplayTagsAggregate",
					"type": "FGameplayTagsAggregate",
					"flags": [
						"Category = GameplayTagsObject",
						"ModuleRelativePath = GameplayTags/GameplayTagContainerComponent.h",
						"ShowOnlyInnerProperties",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "GameplayTagsDebugOptions",
					"type": "FGameplayTagInterfaceDebugOptions",
					"flags": [
						"Category = GameplayTagsObject",
						"ModuleRelativePath = GameplayTags/GameplayTagContainerComponent.h",
						"ShowOnlyInnerProperties",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "GameplayTagsViewModel",
					"type": "TObjectPtr<UGameplayTagsViewModel>",
					"flags": [
						"Category = GameplayTagsObject",
						"ModuleRelativePath = GameplayTags/GameplayTagContainerComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "UEffect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject"
			],
			"path": "Classes/Default/UEffect",
			"properties": [
				{
					"name": "OnActivatedDelegate_K2",
					"type": "FOnActivated_K2",
					"flags": [
						"DisplayName = OnActivated",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "bIsWarmingUp",
					"type": "bool",
					"flags": [
						"Category = Effect",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "OnWarmupElapsedDelegate_K2",
					"type": "FOnWarmupElapsed_K2",
					"flags": [
						"DisplayName = OnWarmupElapsed",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "bUseWarmup",
					"type": "bool",
					"flags": [
						"Category = Effect|Lifecycle|Warmup",
						"Comment = // If enabled, do signalling/prep actions on start, then trigger hard actions on warmup complete.\n",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"ToolTip = If enabled, do signalling/prep actions on start, then trigger hard actions on warmup complete.",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": "If enabled, do signalling/prep actions on start, then trigger hard actions on warmup complete."
				},
				{
					"name": "bWarmupUsesTimer",
					"type": "bool",
					"flags": [
						"Category = Effect|Lifecycle|Warmup",
						"Comment = // if unchecked, the ability requires an explicit call to OnWarmupElapsed\n",
						"EditCondition = bUseWarmup",
						"ExposeOnSpawn = true",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"ToolTip = if unchecked, the ability requires an explicit call to OnWarmupElapsed",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": "if unchecked, the ability requires an explicit call to OnWarmupElapsed"
				},
				{
					"name": "WarmupTime",
					"type": "float",
					"flags": [
						"Category = Effect|Lifecycle|Warmup",
						"ClampMin = 0",
						"Comment = // If zero will trigger OnWarmupElapsed on next tick\n",
						"Delta = 0.100000",
						"EditCondition = bUseWarmup && bWarmupUsesTimer && RunType != EEffectRunType::Instant",
						"ExposeOnSpawn = true",
						"ForceUnits = s",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"ToolTip = If zero will trigger OnWarmupElapsed on next tick",
						"UIMax = 10",
						"UIMin = 0",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": "If zero will trigger OnWarmupElapsed on next tick"
				},
				{
					"name": "bUseCooldown",
					"type": "bool",
					"flags": [
						"Category = Effect|Lifecycle|Cooldown",
						"Comment = // amount of time to wait before allowing the effect to start again after stopping/starting\n",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"ToolTip = amount of time to wait before allowing the effect to start again after stopping/starting",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "amount of time to wait before allowing the effect to start again after stopping/starting"
				},
				{
					"name": "CooldownTime",
					"type": "float",
					"flags": [
						"Category = Effect|Lifecycle|Cooldown",
						"ClampMin = 0.000000",
						"Delta = 0.100000",
						"EditCondition = bUseCooldown",
						"ForceUnits = Seconds",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"UIMax = 30",
						"UIMin = 0.000000",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "CooldownAfter",
					"type": "ECooldownAfter",
					"flags": [
						"Category = Effect|Lifecycle|Cooldown",
						"EditCondition = bUseCooldown",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bIsCoolingDown",
					"type": "bool",
					"flags": [
						"Category = Effect",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "bPreviousCanStart",
					"type": "bool",
					"flags": [
						"Category = Effect",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "PreEffectUpdate",
					"type": "FOnUpdate",
					"flags": [
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "bUseMaxUpdatesPerFrame",
					"type": "bool",
					"flags": [
						"Category = Effect|Update",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "MaxUpdatesPerFrame",
					"type": "int32",
					"flags": [
						"Category = Effect|Update",
						"ClampMax = 100",
						"ClampMin = 1",
						"EditCondition = bUseMaxUpdatesPerFrame",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"UIMax = 100",
						"UIMin = 1",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bUseMaxStateChangesPerFrame",
					"type": "bool",
					"flags": [
						"Category = Effect|Update",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "MaxStateChangesPerFrame",
					"type": "int32",
					"flags": [
						"Category = Effect|Update",
						"ClampMax = 100",
						"ClampMin = 1",
						"EditCondition = bUseMaxStateChangesPerFrame",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"UIMax = 100",
						"UIMin = 1",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bIsExplicitlyStopped",
					"type": "bool",
					"flags": [
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Protected"
					],
					"description": ""
				},
				{
					"name": "bDidTryStart",
					"type": "bool",
					"flags": [
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Protected"
					],
					"description": ""
				},
				{
					"name": "AdditionalStartRequirements",
					"type": "FGameplayTagContainer",
					"flags": [
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "IsEnabled",
					"type": "bool",
					"flags": [
						"BlueprintSetter = SetIsEnabled",
						"Category = Effect",
						"Comment = // Determines if the effect is enabled. Set to false to prevent the effect from starting.\n// After initialization:\n// - Setting to false will stop the effect if it is currently running\n// - Setting to true will attempt to start the effect\n",
						"DisplayName = 💡 Enabled",
						"DisplayPriority = 0",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"ToolTip = Determines if the effect is enabled. Set to false to prevent the effect from starting.\nAfter initialization:\n- Setting to false will stop the effect if it is currently running\n- Setting to true will attempt to start the effect",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Determines if the effect is enabled. Set to false to prevent the effect from starting.\nAfter initialization:\n- Setting to false will stop the effect if it is currently running\n- Setting to true will attempt to start the effect"
				},
				{
					"name": "IsStarted",
					"type": "bool",
					"flags": [
						"Category = Effect",
						"Comment = // Determines if the effect is running.\n",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"ToolTip = Determines if the effect is running.",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": "Determines if the effect is running."
				},
				{
					"name": "bCallStopIfNotStartedAtBeginPlay",
					"type": "bool",
					"flags": [
						"Category = Effect|Lifecycle",
						"Comment = // Run the effect's Stop method if it is not running at BeginPlay.\n// This helps ensure side effects of initial state match those of the effect's current state.\n",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"ToolTip = Run the effect's Stop method if it is not running at BeginPlay.\nThis helps ensure side effects of initial state match those of the effect's current state.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Run the effect's Stop method if it is not running at BeginPlay.\nThis helps ensure side effects of initial state match those of the effect's current state."
				},
				{
					"name": "OnCanStartChangedDelegate_K2",
					"type": "FOnCanStartChanged_K2",
					"flags": [
						"DisplayName = OnCanStartChanged",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "Instigator",
					"type": "TObjectPtr<APawn>",
					"flags": [
						"Category = Effect",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bUseActivationsLimit",
					"type": "bool",
					"flags": [
						"Category = Effect",
						"Comment = // Whether to use a maximum trigger count.\n",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"ToolTip = Whether to use a maximum trigger count.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Whether to use a maximum trigger count."
				},
				{
					"name": "ActivationsLimit",
					"type": "int32",
					"flags": [
						"Category = Effect",
						"Comment = // The maximum number of times the interaction can be triggered.\n",
						"EditCondition = bUseActivationsLimit",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"ToolTip = The maximum number of times the interaction can be triggered.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "The maximum number of times the interaction can be triggered."
				},
				{
					"name": "ActivationsCount",
					"type": "int32",
					"flags": [
						"Category = Effect",
						"Comment = // The number of times the effect has been triggered.\n",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"ToolTip = The number of times the effect has been triggered.",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": "The number of times the effect has been triggered."
				},
				{
					"name": "bDebugEnabledEffect",
					"type": "bool",
					"flags": [
						"Category = Effect",
						"Comment = // toggle debug output for this effect\n",
						"DisplayName = 🆘 Debug",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"ToolTip = toggle debug output for this effect",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "toggle debug output for this effect"
				},
				{
					"name": "bUseTagOperations",
					"type": "bool",
					"flags": [
						"Category = Effect",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "TagOperations",
					"type": "TArray",
					"flags": [
						"Category = Effect",
						"DisplayName = 🏷️ Tag Operations",
						"EditCondition = bUseTagOperations",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "RunType",
					"type": "EEffectRunType",
					"flags": [
						"Category = Effect|Lifecycle",
						"Comment = // -----------------------------------------------------\n// Properties\n// -----------------------------------------------------\n",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"ToolTip = Properties",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": "Properties"
				},
				{
					"name": "Duration",
					"type": "float",
					"flags": [
						"Category = Effect|Lifecycle",
						"ClampMin = 0.000000",
						"Comment = // For RunType Duration, the Effect will Stop after this duration\n",
						"Delta = 0.100000",
						"EditCondition = RunType == EEffectRunType::Duration",
						"ForceUnits = Seconds",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"ToolTip = For RunType Duration, the Effect will Stop after this duration",
						"UIMax = 30",
						"UIMin = 0.000000",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "For RunType Duration, the Effect will Stop after this duration"
				},
				{
					"name": "bRequiresExplicitStart",
					"type": "bool",
					"flags": [
						"Category = Effect|Lifecycle",
						"Comment = // if true, the effect will only start when explicitly triggered by calling Start\n",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"ToolTip = if true, the effect will only start when explicitly triggered by calling Start",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": "if true, the effect will only start when explicitly triggered by calling Start"
				},
				{
					"name": "bIsExplicitlyStarted",
					"type": "bool",
					"flags": [
						"Category = Effect",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "bUseStartRequirements",
					"type": "bool",
					"flags": [
						"Category = Effect|Conditions",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "StartRequirements",
					"type": "FGameplayTagRequirements",
					"flags": [
						"Category = Effect|Conditions",
						"DisplayName = 🎯 Start Requirements",
						"EditCondition = bUseStartRequirements",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bStopIfCanStartFails",
					"type": "bool",
					"flags": [
						"Category = Effect|Conditions",
						"Comment = // If true, the effect will stop if CanStart fails\n// If false, relies on explicit TryStop or continue running requirements\n",
						"EditCondition = RunType != EEffectRunType::Instant",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"ToolTip = If true, the effect will stop if CanStart fails\nIf false, relies on explicit TryStop or continue running requirements",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "If true, the effect will stop if CanStart fails\nIf false, relies on explicit TryStop or continue running requirements"
				},
				{
					"name": "bUseContinueRunningRequirements",
					"type": "bool",
					"flags": [
						"Category = Effect|Conditions",
						"EditCondition = RunType != EEffectRunType::Instant",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ContinueRunningRequirements",
					"type": "FGameplayTagRequirements",
					"flags": [
						"Category = Effect|Conditions",
						"Comment = // Conditions for continued running after starting\n// Only relevant if RunType is Continuous or Duration\n",
						"DisplayName = 🎯 Continue Requirements",
						"EditCondition = bUseContinueRunningRequirements",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"ToolTip = Conditions for continued running after starting\nOnly relevant if RunType is Continuous or Duration",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Conditions for continued running after starting\nOnly relevant if RunType is Continuous or Duration"
				},
				{
					"name": "OnEffectChangedDynamicDelegate",
					"type": "FOnEffectChangedDynamicDelegate",
					"flags": [
						"DisplayName = OnEffectChanged",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnEffectStartedChangedDynamicDelegate",
					"type": "FOnEffectChangedDynamicDelegate",
					"flags": [
						"DisplayName = OnEffectStartedChanged",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnEffectStartedDynamicDelegate",
					"type": "FOnEffectChangedDynamicDelegate",
					"flags": [
						"DisplayName = OnEffectStarted",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnEffectStoppedDynamicDelegate",
					"type": "FOnEffectChangedDynamicDelegate",
					"flags": [
						"DisplayName = OnEffectStopped",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "StartTime",
					"type": "double",
					"flags": [
						"Category = Effect",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "EndTime",
					"type": "double",
					"flags": [
						"Category = Effect",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "OnCooldownElapsedDelegate_K2",
					"type": "FOnCooldownElapsed_K2",
					"flags": [
						"DisplayName = OnCooldownElapsed",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"Protected",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "Parent",
					"type": "TWeakObjectPtr<UObject>",
					"flags": [
						"Comment = // Parent holding the effect, usually just Outer.\n",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"ToolTip = Parent holding the effect, usually just Outer.",
						"Protected"
					],
					"description": "Parent holding the effect, usually just Outer."
				},
				{
					"name": "Title",
					"type": "FText",
					"flags": [
						"Category = Effect",
						"Comment = // for debugging & editor display\n",
						"EditCondition = false",
						"EditConditionHides",
						"ModuleRelativePath = Interaction/Effects/Effect.h",
						"ToolTip = for debugging & editor display",
						"Protected",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": "for debugging & editor display"
				}
			],
			"functions": [
				{
					"name": "Activate",
					"description": "Start activating the effect.\nIf the effect is already running, this will do nothing.\nEffects that require explicit start will be started.\nEffects that do not require explicit start will TryStart (basically Update())",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "ApplyTagOperations",
					"description": "Apply Tag Operations",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "BeginActivation",
					"description": "Begin Activation",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "BeginActivationPeriodic",
					"description": "Begin Activation Periodic",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "BeginPlay",
					"description": "Begin Play",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "CanActivate",
					"description": "Can Activate",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "CanStart",
					"description": "Implement this method to determine if the effect can start",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "CooldownElapsed",
					"description": "Cooldown Elapsed",
					"flags": [
						"Native",
						"Event",
						"Protected",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "Deactivate",
					"description": "Deactivate",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "Deinit",
					"description": "Deinit",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "EffectDurationElapsed",
					"description": "Effect Duration Elapsed",
					"flags": [
						"Final",
						"Native",
						"Protected"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "GetCooldownTimeRemaining",
					"description": "Get Cooldown Time Remaining",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "float",
					"parameters": []
				},
				{
					"name": "GetInstigator",
					"description": "Get Instigator",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "const APawn*&",
					"parameters": []
				},
				{
					"name": "GetOwnerActor",
					"description": "Get Owner Actor",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "AActor*",
					"parameters": []
				},
				{
					"name": "GetWarmupTimeRemaining",
					"description": "Get Warmup Time Remaining",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "float",
					"parameters": []
				},
				{
					"name": "HasBegunPlay",
					"description": "Has Begun Play",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "HasCooldown",
					"description": "Has Cooldown",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "HasWarmup",
					"description": "Has Warmup",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "Init",
					"description": "Initialize the effect from the given parent, or deinit if parent is invalid.\nMay be called multiple times.",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InParent",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "IsCoolingDown",
					"description": "Is Cooling Down",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsWarmingUp",
					"description": "Is Warming Up",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsWarmUpEnabled",
					"description": "Is Warm Up Enabled",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "OnActivated",
					"description": "On Activated",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnActivated_K2__DelegateSignature",
					"description": "On Activated K2  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnCanStartChanged",
					"description": "On Can Start Changed",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnCanStartChanged_K2__DelegateSignature",
					"description": "On Can Start Changed K2  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bCanStart",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnCooldownElapsed_K2__DelegateSignature",
					"description": "On Cooldown Elapsed K2  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnEffectChangedDynamicDelegate__DelegateSignature",
					"description": "On Effect Changed Dynamic Delegate  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Effect",
							"type": "UEffect*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnQueuedStart",
					"description": "On Queued Start",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnQueuedStop",
					"description": "On Queued Stop",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnStart",
					"description": "Override to add custom logic when the effect starts.",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnStop",
					"description": "Override to add custom logic when the effect stops",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnUpdate__DelegateSignature",
					"description": "On Update  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnWarmupElapsed",
					"description": "On Warmup Elapsed",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnWarmupElapsed_K2__DelegateSignature",
					"description": "On Warmup Elapsed K2  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnWarmupStart",
					"description": "On Warmup Start",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "QueueStart",
					"description": "Queue Start",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Delay",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "QueueStop",
					"description": "Queue Stop",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Delay",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "QueueUpdate",
					"description": "Queue Update",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"Const"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "SetAdditionalStartRequirements",
					"description": "Set Additional Start Requirements",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InTagRequirements",
							"type": "const FGameplayTagContainer&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "SetIsEnabled",
					"description": "Enable or disable the effect\nTriggers an update which will start or stop the effect as appropriate",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewValue",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetIsStarted",
					"description": "set Effect to be started/running, if not already\nfires OnStart, OnStop events/delegates as appropriate",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bInIsStarted",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "ShouldBeRunning",
					"description": "Checks if the effect should currently be running or not",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "ShouldContinueRunning",
					"description": "Implement this method to determine if the effect should continue running after starting\nOnly relevant if RunType is Continuous or Duration",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "Start",
					"description": "try start explicitly, rather than relying on implicit start from Update.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "Stop",
					"description": "Stop the effect by disabling it.\nIf enabled & running, will trigger an update which will stop the effect.",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "TryBeginPlay",
					"description": "if called after the game",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "TryStart",
					"description": "Try to start the effect by enabling it.\nIf already enabled, noop.",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "Update",
					"description": "Tries to run the effect if ShouldStart returns true.",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Event Update",
					"fullTitle": "Event Update",
					"description": "Add Event",
					"imgPath": "../img/nd_img_Update.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Update",
					"fullTitle": "Update",
					"description": "",
					"imgPath": "../img/nd_img_Update.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Event Try Start",
					"fullTitle": "Event Try Start",
					"description": "Add Event",
					"imgPath": "../img/nd_img_TryStart.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Try Start",
					"fullTitle": "Try Start",
					"description": "",
					"imgPath": "../img/nd_img_TryStart.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Event Try Begin Play",
					"fullTitle": "Event Try Begin Play",
					"description": "Add Event",
					"imgPath": "../img/nd_img_TryBeginPlay.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Try Begin Play",
					"fullTitle": "Try Begin Play",
					"description": "",
					"imgPath": "../img/nd_img_TryBeginPlay.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Event Stop",
					"fullTitle": "Event Stop",
					"description": "Add Event",
					"imgPath": "../img/nd_img_Stop.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Stop",
					"fullTitle": "Stop",
					"description": "",
					"imgPath": "../img/nd_img_Stop.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Start",
					"fullTitle": "Start",
					"description": "",
					"imgPath": "../img/nd_img_Start.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Should be Running",
					"fullTitle": "Should be Running",
					"description": "",
					"imgPath": "../img/nd_img_ShouldBeRunning.png",
					"inputs": [
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Checks if the effect should currently be running or not"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Set Is Started",
					"fullTitle": "Set Is Started",
					"description": "",
					"imgPath": "../img/nd_img_SetIsStarted.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Is Started",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Set Is Enabled",
					"fullTitle": "Set Is Enabled",
					"description": "",
					"imgPath": "../img/nd_img_SetIsEnabled.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Set Additional Start Requirements",
					"fullTitle": "Set Additional Start Requirements",
					"description": "",
					"imgPath": "../img/nd_img_SetAdditionalStartRequirements.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Tag Requirements",
							"type": "Gameplay Tag Container Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Queue Update",
					"fullTitle": "Queue Update",
					"description": "",
					"imgPath": "../img/nd_img_QueueUpdate.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Event Queue Stop",
					"fullTitle": "Event Queue Stop",
					"description": "Add Event",
					"imgPath": "../img/nd_img_QueueStop.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Delay",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Event Queue Start",
					"fullTitle": "Event Queue Start",
					"description": "Add Event",
					"imgPath": "../img/nd_img_QueueStart.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Delay",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Queue Start",
					"fullTitle": "Queue Start",
					"description": "",
					"imgPath": "../img/nd_img_QueueStart.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Delay",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Event On Warmup Start",
					"fullTitle": "Event On Warmup Start",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnWarmupStart.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "On Warmup Start",
					"fullTitle": "On Warmup Start",
					"description": "",
					"imgPath": "../img/nd_img_OnWarmupStart.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Event On Warmup Elapsed",
					"fullTitle": "Event On Warmup Elapsed",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnWarmupElapsed.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "On Warmup Elapsed",
					"fullTitle": "On Warmup Elapsed",
					"description": "",
					"imgPath": "../img/nd_img_OnWarmupElapsed.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Event On Stop",
					"fullTitle": "Event On Stop",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnStop.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Event On Start",
					"fullTitle": "Event On Start",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnStart.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Event On Queued Stop",
					"fullTitle": "Event On Queued Stop",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnQueuedStop.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "On Queued Stop",
					"fullTitle": "On Queued Stop",
					"description": "",
					"imgPath": "../img/nd_img_OnQueuedStop.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Event On Queued Start",
					"fullTitle": "Event On Queued Start",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnQueuedStart.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "On Queued Start",
					"fullTitle": "On Queued Start",
					"description": "",
					"imgPath": "../img/nd_img_OnQueuedStart.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Event On Can Start Changed",
					"fullTitle": "Event On Can Start Changed",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnCanStartChanged.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Event On Activated",
					"fullTitle": "Event On Activated",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnActivated.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "On Activated",
					"fullTitle": "On Activated",
					"description": "",
					"imgPath": "../img/nd_img_OnActivated.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Is Warm Up Enabled",
					"fullTitle": "Is Warm Up Enabled",
					"description": "",
					"imgPath": "../img/nd_img_IsWarmUpEnabled.png",
					"inputs": [
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Warm Up Enabled"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Is Warming Up",
					"fullTitle": "Is Warming Up",
					"description": "",
					"imgPath": "../img/nd_img_IsWarmingUp.png",
					"inputs": [
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Warming Up"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Is Cooling Down",
					"fullTitle": "Is Cooling Down",
					"description": "",
					"imgPath": "../img/nd_img_IsCoolingDown.png",
					"inputs": [
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Cooling Down"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Event Init",
					"fullTitle": "Event Init",
					"description": "Add Event",
					"imgPath": "../img/nd_img_Init.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "In Parent",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Init",
					"fullTitle": "Init",
					"description": "",
					"imgPath": "../img/nd_img_Init.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Parent",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Has Warmup",
					"fullTitle": "Has Warmup",
					"description": "",
					"imgPath": "../img/nd_img_HasWarmup.png",
					"inputs": [
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Has Warmup"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Has Cooldown",
					"fullTitle": "Has Cooldown",
					"description": "",
					"imgPath": "../img/nd_img_HasCooldown.png",
					"inputs": [
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Has Cooldown"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Has Begun Play",
					"fullTitle": "Has Begun Play",
					"description": "",
					"imgPath": "../img/nd_img_HasBegunPlay.png",
					"inputs": [
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Has Begun Play"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Get Warmup Time Remaining",
					"fullTitle": "Get Warmup Time Remaining",
					"description": "",
					"imgPath": "../img/nd_img_GetWarmupTimeRemaining.png",
					"inputs": [
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Warmup Time Remaining"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "GetOwner",
					"fullTitle": "GetOwner",
					"description": "",
					"imgPath": "../img/nd_img_GetOwnerActor.png",
					"inputs": [
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Actor Object Reference",
							"description": "Get Owner Actor"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Get Instigator",
					"fullTitle": "Get Instigator",
					"description": "",
					"imgPath": "../img/nd_img_GetInstigator.png",
					"inputs": [
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Pawn Object Reference",
							"description": "Get Instigator"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Get Cooldown Time Remaining",
					"fullTitle": "Get Cooldown Time Remaining",
					"description": "",
					"imgPath": "../img/nd_img_GetCooldownTimeRemaining.png",
					"inputs": [
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Cooldown Time Remaining"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Event Deinit",
					"fullTitle": "Event Deinit",
					"description": "Add Event",
					"imgPath": "../img/nd_img_Deinit.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Deinit",
					"fullTitle": "Deinit",
					"description": "",
					"imgPath": "../img/nd_img_Deinit.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Event Deactivate",
					"fullTitle": "Event Deactivate",
					"description": "Add Event",
					"imgPath": "../img/nd_img_Deactivate.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Deactivate",
					"fullTitle": "Deactivate",
					"description": "",
					"imgPath": "../img/nd_img_Deactivate.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Event Cooldown Elapsed",
					"fullTitle": "Event Cooldown Elapsed",
					"description": "Add Event",
					"imgPath": "../img/nd_img_CooldownElapsed.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Can Start",
					"fullTitle": "Can Start",
					"description": "",
					"imgPath": "../img/nd_img_CanStart.png",
					"inputs": [
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Implement this method to determine if the effect can start"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Can Activate",
					"fullTitle": "Can Activate",
					"description": "",
					"imgPath": "../img/nd_img_CanActivate.png",
					"inputs": [
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Can Activate"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Event Begin Play",
					"fullTitle": "Event Begin Play",
					"description": "Add Event",
					"imgPath": "../img/nd_img_BeginPlay.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Event Begin Activation Periodic",
					"fullTitle": "Event Begin Activation Periodic",
					"description": "Add Event",
					"imgPath": "../img/nd_img_BeginActivationPeriodic.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Begin Activation Periodic",
					"fullTitle": "Begin Activation Periodic",
					"description": "",
					"imgPath": "../img/nd_img_BeginActivationPeriodic.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Event Begin Activation",
					"fullTitle": "Event Begin Activation",
					"description": "Add Event",
					"imgPath": "../img/nd_img_BeginActivation.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Begin Activation",
					"fullTitle": "Begin Activation",
					"description": "",
					"imgPath": "../img/nd_img_BeginActivation.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Apply Tag Operations",
					"fullTitle": "Apply Tag Operations",
					"description": "",
					"imgPath": "../img/nd_img_ApplyTagOperations.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffect",
					"className": "🧩 Effect",
					"shortTitle": "Activate",
					"fullTitle": "Activate",
					"description": "",
					"imgPath": "../img/nd_img_Activate.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Start activating the effect.\nIf the effect is already running, this will do nothing.\nEffects that require explicit start will be started.\nEffects that do not require explicit start will TryStart (basically Update())"
						}
					]
				}
			]
		},
		{
			"className": "UActivateComponentEffect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect"
			],
			"path": "Classes/Default/UActivateComponentEffect",
			"properties": [
				{
					"name": "bUseComponentSelection",
					"type": "bool",
					"flags": [
						"Category = ActivateComponentEffect",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/Effects/ActivateComponentEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ComponentSelection",
					"type": "FComponentSelection",
					"flags": [
						"Category = ActivateComponentEffect",
						"EditCondition = bUseComponentSelection",
						"ModuleRelativePath = Interaction/Effects/ActivateComponentEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "TargetComponent",
					"type": "TWeakObjectPtr<UActorComponent>",
					"flags": [
						"ModuleRelativePath = Interaction/Effects/ActivateComponentEffect.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "ActivatedComponent",
					"type": "TWeakObjectPtr<UActorComponent>",
					"flags": [
						"ModuleRelativePath = Interaction/Effects/ActivateComponentEffect.h",
						"Public"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "FindTargetComponent",
					"description": "Find Target Component",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UActorComponent*",
					"parameters": []
				},
				{
					"name": "GetComponentNames",
					"description": "UFUNCTION(BlueprintCallable, BlueprintPure)\nTArray<UActorComponent*> GetComponents() const;",
					"flags": [
						"Final",
						"Native",
						"Public",
						"Const"
					],
					"returnType": "TArray",
					"parameters": []
				},
				{
					"name": "SetTargetComponent",
					"description": "Set Target Component",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Component",
							"type": "UActorComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UActivateComponentEffect",
					"className": "Activate Component Effect",
					"shortTitle": "Set Target Component",
					"fullTitle": "Set Target Component",
					"description": "",
					"imgPath": "../img/nd_img_SetTargetComponent.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Activate Component Effect Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Component",
							"type": "Actor Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UActivateComponentEffect",
					"className": "Activate Component Effect",
					"shortTitle": "Find Target Component",
					"fullTitle": "Find Target Component",
					"description": "",
					"imgPath": "../img/nd_img_FindTargetComponent.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Activate Component Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Actor Component Object Reference",
							"description": "Find Target Component"
						}
					]
				}
			]
		},
		{
			"className": "UActivityDesireComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UActivityDesireComponent",
			"properties": [
				{
					"name": "ActivitiesDesireMap",
					"type": "TMap",
					"flags": [
						"Category = ActivityDesireComponent",
						"ModuleRelativePath = Interaction/Effects/Activities/ActivityDesireComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "UActivityEffect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect"
			],
			"path": "Classes/Default/UActivityEffect",
			"properties": [
				{
					"name": "ActivityOwner",
					"type": "TWeakObjectPtr<AActor>",
					"flags": [
						"Category = ActivityEffect",
						"ModuleRelativePath = Interaction/Effects/Activities/ActivityEffect.h",
						"Public",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "Priority",
					"type": "int32",
					"flags": [
						"Category = Activity",
						"Comment = // predefined priority for activity\n",
						"ModuleRelativePath = Interaction/Effects/Activities/ActivityEffect.h",
						"ToolTip = predefined priority for activity",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "predefined priority for activity"
				},
				{
					"name": "ActivityTimeInHours",
					"type": "int32",
					"flags": [
						"Category = Activity",
						"Comment = // predefined priority for activity\n",
						"ModuleRelativePath = Interaction/Effects/Activities/ActivityEffect.h",
						"ToolTip = predefined priority for activity",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "predefined priority for activity"
				}
			],
			"functions": [
				{
					"name": "StopActivityEffect",
					"description": "Stop Activity Effect",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UActivityEffect",
					"className": "Activity Effect",
					"shortTitle": "Event Stop Activity Effect",
					"fullTitle": "Event Stop Activity Effect",
					"description": "Add Event",
					"imgPath": "../img/nd_img_StopActivityEffect.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UActivityEffect",
					"className": "Activity Effect",
					"shortTitle": "Stop Activity Effect",
					"fullTitle": "Stop Activity Effect",
					"description": "",
					"imgPath": "../img/nd_img_StopActivityEffect.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Activity Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UActivityManager",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UActivityManager",
			"properties": [
				{
					"name": "Activities",
					"type": "TArray",
					"flags": [
						"Category = ActivityManager",
						"Comment = // Set of activities that an actor can do \n",
						"EditInline = true",
						"ModuleRelativePath = Interaction/Effects/Activities/ActivityManagerComponent.h",
						"ToolTip = Set of activities that an actor can do",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Set of activities that an actor can do"
				},
				{
					"name": "CurrentlyRunningActivity",
					"type": "TObjectPtr<UActivityEffect>",
					"flags": [
						"Category = ActivityManager",
						"EditInline = true",
						"ModuleRelativePath = Interaction/Effects/Activities/ActivityManagerComponent.h",
						"Public",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "bDebugEnabled",
					"type": "bool",
					"flags": [
						"Category = ActivityManager",
						"ModuleRelativePath = Interaction/Effects/Activities/ActivityManagerComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "GetPrioritizedActivity",
					"description": "Gets the highest priority activity",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "UActivityEffect*",
					"parameters": []
				},
				{
					"name": "IsActivityRunning",
					"description": "Is Activity Running",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "StartActivity",
					"description": "Started Best Fit Activity Based on methods",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "StartActivityInSchedule",
					"description": "Started Best Fit Activity Based on methods",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "CurrentDayHour",
							"type": "const int32",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "StartActivityObject",
					"description": "Start Activity Object",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Activity",
							"type": "UActivityEffect*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "StartRandomActivity",
					"description": "Start Random Activity",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "StopRunningActivityEffect",
					"description": "Started Best Fit Activity Based on methods",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UActivityManager",
					"className": "Activity Manager",
					"shortTitle": "Stop Running Activity Effect",
					"fullTitle": "Stop Running Activity Effect",
					"description": "",
					"imgPath": "../img/nd_img_StopRunningActivityEffect.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Activity Manager Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UActivityManager",
					"className": "Activity Manager",
					"shortTitle": "Start Random Activity",
					"fullTitle": "Start Random Activity",
					"description": "",
					"imgPath": "../img/nd_img_StartRandomActivity.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Activity Manager Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UActivityManager",
					"className": "Activity Manager",
					"shortTitle": "Start Activity Object",
					"fullTitle": "Start Activity Object",
					"description": "",
					"imgPath": "../img/nd_img_StartActivityObject.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Activity Manager Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Activity",
							"type": "Activity Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UActivityManager",
					"className": "Activity Manager",
					"shortTitle": "Start Activity in Schedule",
					"fullTitle": "Start Activity in Schedule",
					"description": "",
					"imgPath": "../img/nd_img_StartActivityInSchedule.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Activity Manager Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Current Day Hour",
							"type": "Integer",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UActivityManager",
					"className": "Activity Manager",
					"shortTitle": "Start Activity",
					"fullTitle": "Start Activity",
					"description": "",
					"imgPath": "../img/nd_img_StartActivity.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Activity Manager Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UActivityManager",
					"className": "Activity Manager",
					"shortTitle": "Is Activity Running",
					"fullTitle": "Is Activity Running",
					"description": "",
					"imgPath": "../img/nd_img_IsActivityRunning.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Activity Manager Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Activity Running"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UActivityManager",
					"className": "Activity Manager",
					"shortTitle": "Get Prioritized Activity",
					"fullTitle": "Get Prioritized Activity",
					"description": "",
					"imgPath": "../img/nd_img_GetPrioritizedActivity.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Activity Manager Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Activity Effect Object Reference",
							"description": "Gets the highest priority activity"
						}
					]
				}
			]
		},
		{
			"className": "UWorldModeSubsystem",
			"classHierarchy": [
				"UObject",
				"USubsystem",
				"UWorldSubsystem",
				"UTickableWorldSubsystem"
			],
			"path": "Classes/Default/UWorldModeSubsystem",
			"properties": [
				{
					"name": "bUseStartRequirements",
					"type": "bool",
					"flags": [
						"Category = WorldModeSubsystem",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Utils/WorldModeSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "StartRequirements",
					"type": "FGameplayTagRequirements",
					"flags": [
						"Category = WorldModeSubsystem",
						"EditCondition = bUseStartRequirements",
						"ModuleRelativePath = Utils/WorldModeSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "GameplayTagsAggregate",
					"type": "FGameplayTagsAggregate",
					"flags": [
						"Category = WorldModeSubsystem",
						"ModuleRelativePath = Utils/WorldModeSubsystem.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "bIsStartedValue",
					"type": "bool",
					"flags": [
						"Category = WorldModeSubsystem",
						"ModuleRelativePath = Utils/WorldModeSubsystem.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "bDebugEnabled",
					"type": "bool",
					"flags": [
						"Category = WorldModeSubsystem",
						"ModuleRelativePath = Utils/WorldModeSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OnIsStartedChangedK2",
					"type": "FOnIsStartedChangedK2",
					"flags": [
						"DisplayName = OnIsStartedChanged",
						"ModuleRelativePath = Utils/WorldModeSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnStartedDelegate",
					"type": "FOnWorldModeSubsystemEventK2",
					"flags": [
						"DisplayName = OnStarted",
						"ModuleRelativePath = Utils/WorldModeSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnStoppedDelegate",
					"type": "FOnWorldModeSubsystemEventK2",
					"flags": [
						"DisplayName = OnStopped",
						"ModuleRelativePath = Utils/WorldModeSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "CanStart",
					"description": "Can Start",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsStarted",
					"description": "Is Started",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "OnIsStartedChangedK2__DelegateSignature",
					"description": "On Is Started Changed K2  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bNewIsStarted",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnWorldModeSubsystemEventK2__DelegateSignature",
					"description": "On World Mode Subsystem Event K2  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "SetStarted",
					"description": "Set Started",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bNewIsStarted",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "Start",
					"description": "Start",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "Stop",
					"description": "Stop",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldModeSubsystem",
					"className": "World Mode Subsystem",
					"shortTitle": "Event Stop",
					"fullTitle": "Event Stop",
					"description": "Add Event",
					"imgPath": "../img/nd_img_Stop.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldModeSubsystem",
					"className": "World Mode Subsystem",
					"shortTitle": "Stop",
					"fullTitle": "Stop",
					"description": "",
					"imgPath": "../img/nd_img_Stop.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "World Mode Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldModeSubsystem",
					"className": "World Mode Subsystem",
					"shortTitle": "Event Start",
					"fullTitle": "Event Start",
					"description": "Add Event",
					"imgPath": "../img/nd_img_Start.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldModeSubsystem",
					"className": "World Mode Subsystem",
					"shortTitle": "Start",
					"fullTitle": "Start",
					"description": "",
					"imgPath": "../img/nd_img_Start.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "World Mode Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldModeSubsystem",
					"className": "World Mode Subsystem",
					"shortTitle": "Set Started",
					"fullTitle": "Set Started",
					"description": "",
					"imgPath": "../img/nd_img_SetStarted.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "World Mode Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Is Started",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldModeSubsystem",
					"className": "World Mode Subsystem",
					"shortTitle": "Is Started",
					"fullTitle": "Is Started",
					"description": "",
					"imgPath": "../img/nd_img_IsStarted.png",
					"inputs": [
						{
							"name": "Target",
							"type": "World Mode Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Started"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldModeSubsystem",
					"className": "World Mode Subsystem",
					"shortTitle": "Can Start",
					"fullTitle": "Can Start",
					"description": "",
					"imgPath": "../img/nd_img_CanStart.png",
					"inputs": [
						{
							"name": "Target",
							"type": "World Mode Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Can Start"
						}
					]
				}
			]
		},
		{
			"className": "UActorSelectionSubsystemBase",
			"classHierarchy": [
				"UObject",
				"USubsystem",
				"UWorldSubsystem",
				"UTickableWorldSubsystem",
				"UWorldModeSubsystem"
			],
			"path": "Classes/Default/UActorSelectionSubsystemBase",
			"properties": [
				{
					"name": "MouseTraceDistance",
					"type": "float",
					"flags": [
						"Category = ActorSelectionSubsystemBase",
						"ModuleRelativePath = Interaction/ActorSelectionSubsystemBase.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "FocussedActor",
					"type": "TWeakObjectPtr<AActor>",
					"flags": [
						"Category = ActorSelectionSubsystemBase",
						"ModuleRelativePath = Interaction/ActorSelectionSubsystemBase.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "OnFocusChangedDelegate",
					"type": "FOnFocusChanged",
					"flags": [
						"DisplayName = OnFocusChanged",
						"ModuleRelativePath = Interaction/ActorSelectionSubsystemBase.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "TraceHitResult",
					"type": "FHitResult",
					"flags": [
						"Category = ActorSelectionSubsystemBase",
						"Comment = // Hit result of the last trace.\n",
						"ModuleRelativePath = Interaction/ActorSelectionSubsystemBase.h",
						"ToolTip = Hit result of the last trace.",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": "Hit result of the last trace."
				},
				{
					"name": "bDrawDebugTrace",
					"type": "bool",
					"flags": [
						"Category = ActorSelectionSubsystemBase",
						"ModuleRelativePath = Interaction/ActorSelectionSubsystemBase.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "IsComponentHit",
					"description": "Checks if the given component, or its PrimitiveComponent Parent, if any, is hit by the given hit result.",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "SourceComponent",
							"type": "UPrimitiveComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						},
						{
							"name": "HitResult",
							"type": "const FHitResult&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnFocusChanged",
					"description": "On Focus Changed",
					"flags": [
						"Native",
						"Event",
						"Protected",
						"HasOutParams",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewFocussedActor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "HitResult",
							"type": "const FHitResult&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UActorSelectionSubsystemBase",
					"className": "Actor Selection Subsystem Base",
					"shortTitle": "Event On Focus Changed",
					"fullTitle": "Event On Focus Changed",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnFocusChanged.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "New Focussed Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Hit Result",
							"type": "Hit Result Structure (by ref)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UActorSelectionSubsystemBase",
					"className": "Actor Selection Subsystem Base",
					"shortTitle": "Is Component Hit",
					"fullTitle": "Is Component Hit",
					"description": "",
					"imgPath": "../img/nd_img_IsComponentHit.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Source Component",
							"type": "Primitive Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Hit Result",
							"type": "Hit Result Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Checks if the given component, or its PrimitiveComponent Parent, if any, is hit by the given hit result."
						}
					]
				}
			]
		},
		{
			"className": "USpawnActorEffect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect"
			],
			"path": "Classes/Default/USpawnActorEffect",
			"properties": [
				{
					"name": "bUseOwnerForSpawnParameters",
					"type": "bool",
					"flags": [
						"Category = SpawnActorEffect",
						"ModuleRelativePath = Interaction/Effects/ActorSpawnEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ActorClass",
					"type": "TSubclassOf<AActor>",
					"flags": [
						"Category = SpawnActorEffect",
						"ModuleRelativePath = Interaction/Effects/ActorSpawnEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "SpawnedActors",
					"type": "TSet",
					"flags": [
						"ModuleRelativePath = Interaction/Effects/ActorSpawnEffect.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "MaxActiveActors",
					"type": "int32",
					"flags": [
						"Category = SpawnActorEffect",
						"ClampMax = 100",
						"ClampMin = 0",
						"ExposeOnSpawn",
						"ModuleRelativePath = Interaction/Effects/ActorSpawnEffect.h",
						"UIMax = 10",
						"UIMin = 0",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bUseOwnerTransform",
					"type": "bool",
					"flags": [
						"Category = SpawnActorEffect",
						"ExposeOnSpawn",
						"ModuleRelativePath = Interaction/Effects/ActorSpawnEffect.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "WorldSpawnTransform",
					"type": "FTransform",
					"flags": [
						"Category = SpawnActorEffect",
						"EditCondition = !bUseOwnerTransform",
						"ExposeOnSpawn",
						"ModuleRelativePath = Interaction/Effects/ActorSpawnEffect.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "RelativeSpawnTransform",
					"type": "FTransform",
					"flags": [
						"Category = SpawnActorEffect",
						"ExposeOnSpawn",
						"ModuleRelativePath = Interaction/Effects/ActorSpawnEffect.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "SpawnParameters",
					"type": "FActorSpawnParameters_K2",
					"flags": [
						"Category = SpawnActorEffect",
						"ExposeOnSpawn",
						"ModuleRelativePath = Interaction/Effects/ActorSpawnEffect.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bUseActiveActorTagRequirements",
					"type": "bool",
					"flags": [
						"Category = SpawnActorEffect",
						"ExposeOnSpawn",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/Effects/ActorSpawnEffect.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ActiveActorRequirements",
					"type": "FGameplayTagRequirements",
					"flags": [
						"Category = SpawnActorEffect",
						"EditCondition = bUseActiveActorTagRequirements",
						"ExposeOnSpawn",
						"ModuleRelativePath = Interaction/Effects/ActorSpawnEffect.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OnSpawnActor",
					"type": "FSpawnActorEffectDelegate",
					"flags": [
						"ModuleRelativePath = Interaction/Effects/ActorSpawnEffect.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "CountAsActiveActor",
					"description": "Count as Active Actor",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetActiveActorCount",
					"description": "Get Active Actor Count",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "int32",
					"parameters": []
				},
				{
					"name": "GetActiveActors",
					"description": "Get Active Actors",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "TArray",
					"parameters": []
				},
				{
					"name": "GetSpawnedActors",
					"description": "Get Spawned Actors",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "TArray",
					"parameters": []
				},
				{
					"name": "GetSpawnParameters",
					"description": "Get Spawn Parameters",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FActorSpawnParameters_K2",
					"parameters": []
				},
				{
					"name": "GetSpawnTransform",
					"description": "Get Spawn Transform",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FTransform",
					"parameters": []
				},
				{
					"name": "SpawnActor",
					"description": "Spawn Actor",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "AActor*",
					"parameters": []
				},
				{
					"name": "SpawnActorEffectDelegate__DelegateSignature",
					"description": "Spawn Actor Effect Delegate  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "USpawnActorEffect",
					"className": "Spawn Actor Effect",
					"shortTitle": "Spawn Actor",
					"fullTitle": "Spawn Actor",
					"description": "",
					"imgPath": "../img/nd_img_SpawnActor.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Spawn Actor Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Actor Object Reference",
							"description": "Spawn Actor"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "USpawnActorEffect",
					"className": "Spawn Actor Effect",
					"shortTitle": "Get Spawn Transform",
					"fullTitle": "Get Spawn Transform",
					"description": "",
					"imgPath": "../img/nd_img_GetSpawnTransform.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Spawn Actor Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Transform",
							"description": "Get Spawn Transform"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "USpawnActorEffect",
					"className": "Spawn Actor Effect",
					"shortTitle": "Get Spawn Parameters",
					"fullTitle": "Get Spawn Parameters",
					"description": "",
					"imgPath": "../img/nd_img_GetSpawnParameters.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Spawn Actor Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Actor Spawn Parameters Structure",
							"description": "Get Spawn Parameters"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "USpawnActorEffect",
					"className": "Spawn Actor Effect",
					"shortTitle": "Get Spawned Actors",
					"fullTitle": "Get Spawned Actors",
					"description": "",
					"imgPath": "../img/nd_img_GetSpawnedActors.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Spawn Actor Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Array of Actor Object References",
							"description": "Get Spawned Actors"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "USpawnActorEffect",
					"className": "Spawn Actor Effect",
					"shortTitle": "Get Active Actors",
					"fullTitle": "Get Active Actors",
					"description": "",
					"imgPath": "../img/nd_img_GetActiveActors.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Spawn Actor Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Array of Actor Object References",
							"description": "Get Active Actors"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "USpawnActorEffect",
					"className": "Spawn Actor Effect",
					"shortTitle": "Get Active Actor Count",
					"fullTitle": "Get Active Actor Count",
					"description": "",
					"imgPath": "../img/nd_img_GetActiveActorCount.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Spawn Actor Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Integer",
							"description": "Get Active Actor Count"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "USpawnActorEffect",
					"className": "Spawn Actor Effect",
					"shortTitle": "Count as Active Actor",
					"fullTitle": "Count as Active Actor",
					"description": "",
					"imgPath": "../img/nd_img_CountAsActiveActor.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Spawn Actor Effect Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Count as Active Actor"
						}
					]
				}
			]
		},
		{
			"className": "UEffectComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UEffectComponent",
			"properties": [
				{
					"name": "Effect",
					"type": "TObjectPtr<UEffect>",
					"flags": [
						"Category = EffectComponent",
						"EditInline = true",
						"ModuleRelativePath = Interaction/Effects/EffectComponent.h",
						"ShowOnlyInnerProperties",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				},
				{
					"name": "OnEffectStarted",
					"type": "FEffectComponentEvent",
					"flags": [
						"ModuleRelativePath = Interaction/Effects/EffectComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnEffectStopped",
					"type": "FEffectComponentEvent",
					"flags": [
						"ModuleRelativePath = Interaction/Effects/EffectComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "DeinitEffect",
					"description": "Deinit Effect",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "EffectComponentEvent__DelegateSignature",
					"description": "Effect Component Event  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "InitEffect",
					"description": "Init Effect",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "IsEffectValueOk",
					"description": "Check if the effect looks ok",
					"flags": [
						"Final",
						"Native",
						"Protected",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "OnEffectStartedChanged",
					"description": "On Effect Started Changed",
					"flags": [
						"Final",
						"Native",
						"Protected"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InEffect",
							"type": "UEffect*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnStart",
					"description": "On Start",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnStop",
					"description": "On Stop",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "PreUpdate",
					"description": "Called before Update() to allow for any pre-update processing",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "SetEffect",
					"description": "Set Effect",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InEffect",
							"type": "UEffect*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "Update",
					"description": "Update",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UEffectComponent",
					"className": "Effect Component",
					"shortTitle": "Update",
					"fullTitle": "Update",
					"description": "",
					"imgPath": "../img/nd_img_Update.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Effect Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffectComponent",
					"className": "Effect Component",
					"shortTitle": "Set Effect",
					"fullTitle": "Set Effect",
					"description": "",
					"imgPath": "../img/nd_img_SetEffect.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Effect Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Effect",
							"type": "🧩 Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffectComponent",
					"className": "Effect Component",
					"shortTitle": "Event Pre Update",
					"fullTitle": "Event Pre Update",
					"description": "Add Event",
					"imgPath": "../img/nd_img_PreUpdate.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffectComponent",
					"className": "Effect Component",
					"shortTitle": "Event On Stop",
					"fullTitle": "Event On Stop",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnStop.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffectComponent",
					"className": "Effect Component",
					"shortTitle": "Event On Start",
					"fullTitle": "Event On Start",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnStart.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffectComponent",
					"className": "Effect Component",
					"shortTitle": "Is Effect Value Ok",
					"fullTitle": "Is Effect Value Ok",
					"description": "",
					"imgPath": "../img/nd_img_IsEffectValueOk.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Effect Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Check if the effect looks ok"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffectComponent",
					"className": "Effect Component",
					"shortTitle": "Event Init Effect",
					"fullTitle": "Event Init Effect",
					"description": "Add Event",
					"imgPath": "../img/nd_img_InitEffect.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffectComponent",
					"className": "Effect Component",
					"shortTitle": "Init Effect",
					"fullTitle": "Init Effect",
					"description": "",
					"imgPath": "../img/nd_img_InitEffect.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Effect Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffectComponent",
					"className": "Effect Component",
					"shortTitle": "Event Deinit Effect",
					"fullTitle": "Event Deinit Effect",
					"description": "Add Event",
					"imgPath": "../img/nd_img_DeinitEffect.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffectComponent",
					"className": "Effect Component",
					"shortTitle": "Deinit Effect",
					"fullTitle": "Deinit Effect",
					"description": "",
					"imgPath": "../img/nd_img_DeinitEffect.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Effect Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UActorSpawnEffectComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent",
				"UEffectComponent"
			],
			"path": "Classes/Default/UActorSpawnEffectComponent",
			"properties": [],
			"functions": []
		},
		{
			"className": "UAC_Weather",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UAC_Weather",
			"properties": [],
			"functions": []
		},
		{
			"className": "UAnimalStatusEffectComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UAnimalStatusEffectComponent",
			"properties": [
				{
					"name": "DefaultStatusEffects",
					"type": "TSet",
					"flags": [
						"Category = StatusEffects",
						"Comment = ///**\n// * ------------------------------------------------------------- Properties\n// */\n",
						"ModuleRelativePath = StatusEffect/AnimalStatusEffectComponent.h",
						"ToolTip = ------------------------------------------------------------- Properties",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "------------------------------------------------------------- Properties"
				},
				{
					"name": "ActiveGameplayTags",
					"type": "FGameplayTagContainer",
					"flags": [
						"Category = Tags",
						"Comment = // This is the list of all active gameplay tags that are currently active on this component to centralize\n// where checks are made for gameplay tags, whether required or blocked\n",
						"ModuleRelativePath = StatusEffect/AnimalStatusEffectComponent.h",
						"ToolTip = This is the list of all active gameplay tags that are currently active on this component to centralize\nwhere checks are made for gameplay tags, whether required or blocked",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "This is the list of all active gameplay tags that are currently active on this component to centralize\nwhere checks are made for gameplay tags, whether required or blocked"
				},
				{
					"name": "OnTagsUpdated",
					"type": "FOnTagsUpdated",
					"flags": [
						"ModuleRelativePath = StatusEffect/AnimalStatusEffectComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "StatusEffects",
					"type": "TArray",
					"flags": [
						"Category = AnimalStatusEffectComponent",
						"ModuleRelativePath = StatusEffect/AnimalStatusEffectComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "AddGameplayTags",
					"description": "Add Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Tags",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "AddStatusEffect",
					"description": "Functions",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "StatusEffectClass",
							"type": "TSubclassOf<UStatusEffectObject>",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "AddStatusEffectObject",
					"description": "Add Status Effect Object",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "StatusEffectObject",
							"type": "UStatusEffectObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "Multicast_StartStatusEffect",
					"description": "Multicast Start Status Effect",
					"flags": [
						"NetReliable",
						"Native",
						"Event",
						"NetMulticast",
						"Public",
						"HasDefaults"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "StatusEffectName",
							"type": "const FGameplayTag",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "Multicast_StopStatusEffect",
					"description": "Multicast Stop Status Effect",
					"flags": [
						"NetReliable",
						"Native",
						"Event",
						"NetMulticast",
						"Public",
						"HasDefaults"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "StatusEffectName",
							"type": "const FGameplayTag",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "Multicast_UpdateStatusEffect",
					"description": "Multicast Update Status Effect",
					"flags": [
						"NetReliable",
						"Native",
						"Event",
						"NetMulticast",
						"Public",
						"HasDefaults"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "StatusEffectName",
							"type": "const FGameplayTag",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "RemoveGameplayTags",
					"description": "Remove Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Tags",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "RemoveStatusEffectByClass",
					"description": "Remove Status Effect by Class",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "StatusEffectClass",
							"type": "TSubclassOf<UStatusEffectObject>",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "bStopStatusEffect",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "RemoveStatusEffectByTagName",
					"description": "Remove Status Effect by Tag Name",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "StatusEffectTagName",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "bStopStatusEffect",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "Server_StartStatusEffect",
					"description": "Server Start Status Effect",
					"flags": [
						"NetReliable",
						"Native",
						"Event",
						"Public",
						"HasDefaults"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "StatusEffectName",
							"type": "const FGameplayTag",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "Server_StopStatusEffect",
					"description": "Server Stop Status Effect",
					"flags": [
						"NetReliable",
						"Native",
						"Event",
						"Public",
						"HasDefaults"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "StatusEffectName",
							"type": "const FGameplayTag",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "Server_UpdateStatusEffect",
					"description": "Server Update Status Effect",
					"flags": [
						"NetReliable",
						"Native",
						"Event",
						"Public",
						"HasDefaults"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "StatusEffectName",
							"type": "const FGameplayTag",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "SetActiveGameplayTags",
					"description": "Set Active Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Tags",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "StartStatusEffectByClass",
					"description": "Start Status Effect by Class",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "StatusEffectClass",
							"type": "TSubclassOf<UStatusEffectObject>",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "StartStatusEffectByTagName",
					"description": "Start Status Effect by Tag Name",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "StatusEffectName",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "StopStatusEffectByClass",
					"description": "Stop Status Effect by Class",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "StatusEffectClass",
							"type": "TSubclassOf<UStatusEffectObject>",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "StopStatusEffectByTagName",
					"description": "Stop Status Effect by Tag Name",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "StatusEffectName",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "UpdateStatusEffectByClass",
					"description": "Update Status Effect by Class",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "StatusEffectClass",
							"type": "TSubclassOf<UStatusEffectObject>",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "UpdateStatusEffectByTagName",
					"description": "Update Status Effect by Tag Name",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "StatusEffectName",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UAnimalStatusEffectComponent",
					"className": "Animal Status Effect Component",
					"shortTitle": "Update Status Effect by Tag Name",
					"fullTitle": "Update Status Effect by Tag Name",
					"description": "Status Effects",
					"imgPath": "../img/nd_img_UpdateStatusEffectByTagName.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Animal Status Effect Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Status Effect Name",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Update Status Effect by Tag Name"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UAnimalStatusEffectComponent",
					"className": "Animal Status Effect Component",
					"shortTitle": "Update Status Effect by Class",
					"fullTitle": "Update Status Effect by Class",
					"description": "Status Effects",
					"imgPath": "../img/nd_img_UpdateStatusEffectByClass.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Animal Status Effect Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Status Effect Class",
							"type": "Status Effect Object Class Reference",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Update Status Effect by Class"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UAnimalStatusEffectComponent",
					"className": "Animal Status Effect Component",
					"shortTitle": "Stop Status Effect by Tag Name",
					"fullTitle": "Stop Status Effect by Tag Name",
					"description": "Status Effects",
					"imgPath": "../img/nd_img_StopStatusEffectByTagName.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Animal Status Effect Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Status Effect Name",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Stop Status Effect by Tag Name"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UAnimalStatusEffectComponent",
					"className": "Animal Status Effect Component",
					"shortTitle": "Stop Status Effect by Class",
					"fullTitle": "Stop Status Effect by Class",
					"description": "Status Effects",
					"imgPath": "../img/nd_img_StopStatusEffectByClass.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Animal Status Effect Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Status Effect Class",
							"type": "Status Effect Object Class Reference",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Stop Status Effect by Class"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UAnimalStatusEffectComponent",
					"className": "Animal Status Effect Component",
					"shortTitle": "Start Status Effect by Tag Name",
					"fullTitle": "Start Status Effect by Tag Name",
					"description": "Status Effects",
					"imgPath": "../img/nd_img_StartStatusEffectByTagName.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Animal Status Effect Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Status Effect Name",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Start Status Effect by Tag Name"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UAnimalStatusEffectComponent",
					"className": "Animal Status Effect Component",
					"shortTitle": "Start Status Effect by Class",
					"fullTitle": "Start Status Effect by Class",
					"description": "Status Effects",
					"imgPath": "../img/nd_img_StartStatusEffectByClass.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Animal Status Effect Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Status Effect Class",
							"type": "Status Effect Object Class Reference",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Start Status Effect by Class"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UAnimalStatusEffectComponent",
					"className": "Animal Status Effect Component",
					"shortTitle": "Set Active Gameplay Tags",
					"fullTitle": "Set Active Gameplay Tags",
					"description": "Status Effects| Gameplay Tags",
					"imgPath": "../img/nd_img_SetActiveGameplayTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Animal Status Effect Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tags",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UAnimalStatusEffectComponent",
					"className": "Animal Status Effect Component",
					"shortTitle": "Remove Status Effect by Tag Name",
					"fullTitle": "Remove Status Effect by Tag Name",
					"description": "Status Effects",
					"imgPath": "../img/nd_img_RemoveStatusEffectByTagName.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Animal Status Effect Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Status Effect Tag Name",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						},
						{
							"name": "Stop Status Effect",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Remove Status Effect by Tag Name"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UAnimalStatusEffectComponent",
					"className": "Animal Status Effect Component",
					"shortTitle": "Remove Status Effect by Class",
					"fullTitle": "Remove Status Effect by Class",
					"description": "Status Effects",
					"imgPath": "../img/nd_img_RemoveStatusEffectByClass.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Animal Status Effect Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Status Effect Class",
							"type": "Status Effect Object Class Reference",
							"description": "$no_comments"
						},
						{
							"name": "Stop Status Effect",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Remove Status Effect by Class"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UAnimalStatusEffectComponent",
					"className": "Animal Status Effect Component",
					"shortTitle": "Remove Gameplay Tags",
					"fullTitle": "Remove Gameplay Tags",
					"description": "Status Effects| Gameplay Tags",
					"imgPath": "../img/nd_img_RemoveGameplayTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Animal Status Effect Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tags",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UAnimalStatusEffectComponent",
					"className": "Animal Status Effect Component",
					"shortTitle": "Add Status Effect Object",
					"fullTitle": "Add Status Effect Object",
					"description": "Status Effects",
					"imgPath": "../img/nd_img_AddStatusEffectObject.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Animal Status Effect Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Status Effect Object",
							"type": "Status Effect Object Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UAnimalStatusEffectComponent",
					"className": "Animal Status Effect Component",
					"shortTitle": "Add Status Effect",
					"fullTitle": "Add Status Effect",
					"description": "Status Effects",
					"imgPath": "../img/nd_img_AddStatusEffect.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Animal Status Effect Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Status Effect Class",
							"type": "Status Effect Object Class Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UAnimalStatusEffectComponent",
					"className": "Animal Status Effect Component",
					"shortTitle": "Add Gameplay Tags",
					"fullTitle": "Add Gameplay Tags",
					"description": "Status Effects| Gameplay Tags",
					"imgPath": "../img/nd_img_AddGameplayTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Animal Status Effect Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tags",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UArrangeActorsUtil",
			"classHierarchy": [
				"UObject",
				"UBlueprintFunctionLibrary"
			],
			"path": "Classes/Default/UArrangeActorsUtil",
			"properties": [],
			"functions": [
				{
					"name": "ArrangeInRowForActors",
					"description": "Arrange in Row for Actors",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Actors",
							"type": "TArray",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "RowCenter",
							"type": "const FTransform&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "ArrangeInRowForComponents",
					"description": "Arrange in Row for Components",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "SceneComponents",
							"type": "TArray",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						},
						{
							"name": "RowCenter",
							"type": "const FTransform&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "CanArrangeInRowForActors",
					"description": "Can Arrange in Row for Actors",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Actors",
							"type": "TArray",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "CanArrangeInRowForComponents",
					"description": "Can Arrange in Row for Components",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "SceneComponents",
							"type": "TArray",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetCellTransform",
					"description": "Get Cell Transform",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FTransform",
					"parameters": [
						{
							"name": "GridCenter",
							"type": "const FTransform&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "NumCells",
							"type": "const int32",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "CellSize",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "CellIndex",
							"type": "const int32",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetMaxXYBoundingRadiusForActors",
					"description": "Get Max XYBounding Radius for Actors",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "float",
					"parameters": [
						{
							"name": "Actors",
							"type": "const TArray",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetMaxXYBoundingRadiusForComponents",
					"description": "Get Max XYBounding Radius for Components",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "float",
					"parameters": [
						{
							"name": "SceneComponents",
							"type": "TArray",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetXYBoundingRadiusForActor",
					"description": "Get XYBounding Radius for Actor",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "float",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetXYBoundingRadiusForComponent",
					"description": "Get XYBounding Radius for Component",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "float",
					"parameters": [
						{
							"name": "Scene",
							"type": "USceneComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "IsDebugEnabled",
					"description": "Is Debug Enabled",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UArrangeActorsUtil",
					"className": "Arrange Actors Util",
					"shortTitle": "Is Debug Enabled",
					"fullTitle": "Is Debug Enabled",
					"description": "",
					"imgPath": "../img/nd_img_IsDebugEnabled.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Debug Enabled"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UArrangeActorsUtil",
					"className": "Arrange Actors Util",
					"shortTitle": "Get XYBounding Radius for Component",
					"fullTitle": "Get XYBounding Radius for Component",
					"description": "",
					"imgPath": "../img/nd_img_GetXYBoundingRadiusForComponent.png",
					"inputs": [
						{
							"name": "Scene",
							"type": "Scene Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get XYBounding Radius for Component"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UArrangeActorsUtil",
					"className": "Arrange Actors Util",
					"shortTitle": "Get XYBounding Radius for Actor",
					"fullTitle": "Get XYBounding Radius for Actor",
					"description": "",
					"imgPath": "../img/nd_img_GetXYBoundingRadiusForActor.png",
					"inputs": [
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get XYBounding Radius for Actor"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UArrangeActorsUtil",
					"className": "Arrange Actors Util",
					"shortTitle": "Get Max XYBounding Radius for Components",
					"fullTitle": "Get Max XYBounding Radius for Components",
					"description": "",
					"imgPath": "../img/nd_img_GetMaxXYBoundingRadiusForComponents.png",
					"inputs": [
						{
							"name": "Scene Components",
							"type": "Array of Scene Component Object References",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Max XYBounding Radius for Components"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UArrangeActorsUtil",
					"className": "Arrange Actors Util",
					"shortTitle": "Get Max XYBounding Radius for Actors",
					"fullTitle": "Get Max XYBounding Radius for Actors",
					"description": "",
					"imgPath": "../img/nd_img_GetMaxXYBoundingRadiusForActors.png",
					"inputs": [
						{
							"name": "Actors",
							"type": "Array of Actor Object References",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Max XYBounding Radius for Actors"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UArrangeActorsUtil",
					"className": "Arrange Actors Util",
					"shortTitle": "Get Cell Transform",
					"fullTitle": "Get Cell Transform",
					"description": "",
					"imgPath": "../img/nd_img_GetCellTransform.png",
					"inputs": [
						{
							"name": "Grid Center",
							"type": "Transform (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Num Cells",
							"type": "Integer",
							"description": "$no_comments"
						},
						{
							"name": "Cell Size",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Cell Index",
							"type": "Integer",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Transform",
							"description": "Get Cell Transform"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UArrangeActorsUtil",
					"className": "Arrange Actors Util",
					"shortTitle": "Can Arrange in Row for Components",
					"fullTitle": "Can Arrange in Row for Components",
					"description": "",
					"imgPath": "../img/nd_img_CanArrangeInRowForComponents.png",
					"inputs": [
						{
							"name": "Scene Components",
							"type": "Array of Scene Component Object References",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Can Arrange in Row for Components"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UArrangeActorsUtil",
					"className": "Arrange Actors Util",
					"shortTitle": "Can Arrange in Row for Actors",
					"fullTitle": "Can Arrange in Row for Actors",
					"description": "",
					"imgPath": "../img/nd_img_CanArrangeInRowForActors.png",
					"inputs": [
						{
							"name": "Actors",
							"type": "Array of Actor Object References",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Can Arrange in Row for Actors"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UArrangeActorsUtil",
					"className": "Arrange Actors Util",
					"shortTitle": "Arrange in Row for Components",
					"fullTitle": "Arrange in Row for Components",
					"description": "",
					"imgPath": "../img/nd_img_ArrangeInRowForComponents.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Scene Components",
							"type": "Array of Scene Component Object References",
							"description": "$no_comments"
						},
						{
							"name": "Row Center",
							"type": "Transform (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Arrange in Row for Components"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UArrangeActorsUtil",
					"className": "Arrange Actors Util",
					"shortTitle": "Arrange in Row for Actors",
					"fullTitle": "Arrange in Row for Actors",
					"description": "",
					"imgPath": "../img/nd_img_ArrangeInRowForActors.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Actors",
							"type": "Array of Actor Object References",
							"description": "$no_comments"
						},
						{
							"name": "Row Center",
							"type": "Transform (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Arrange in Row for Actors"
						}
					]
				}
			]
		},
		{
			"className": "UAskForActivityEffect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect",
				"UActivityEffect"
			],
			"path": "Classes/Default/UAskForActivityEffect",
			"properties": [
				{
					"name": "ActivityOwnerPawn",
					"type": "TObjectPtr<APawn>",
					"flags": [
						"Category = AskForActivityEffect",
						"ModuleRelativePath = Interaction/Effects/Activities/AskForActivityEffect.h",
						"Public",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "CompanionPawnToAsk",
					"type": "TObjectPtr<APawn>",
					"flags": [
						"Category = AskForActivityEffect",
						"ModuleRelativePath = Interaction/Effects/Activities/AskForActivityEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ActivitiesToDoTogether",
					"type": "TArray",
					"flags": [
						"Category = AskForActivityEffect",
						"EditInline = true",
						"ModuleRelativePath = Interaction/Effects/Activities/AskForActivityEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "UAudioInteractionComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UAudioInteractionComponent",
			"properties": [
				{
					"name": "AudioIsFinishedPlaying",
					"type": "bool",
					"flags": [
						"Category = AudioInteractionComponent",
						"Comment = /**\n\t * ------------------------------------------------------------- Properties\n\t */",
						"ModuleRelativePath = Components/AudioInteractionComponent.h",
						"ToolTip = ------------------------------------------------------------- Properties",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "------------------------------------------------------------- Properties"
				},
				{
					"name": "IsAudioSpatialized",
					"type": "bool",
					"flags": [
						"Category = AudioInteractionComponent",
						"ModuleRelativePath = Components/AudioInteractionComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "PickAudioRandomlyFromGroup",
					"type": "bool",
					"flags": [
						"Category = AudioInteractionComponent",
						"ModuleRelativePath = Components/AudioInteractionComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "PlayEachAudioBeforeChoosingRandomly",
					"type": "bool",
					"flags": [
						"Category = AudioInteractionComponent",
						"ModuleRelativePath = Components/AudioInteractionComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "AudioGroupFirstTime",
					"type": "TArray",
					"flags": [
						"Category = AudioInteractionComponent",
						"ModuleRelativePath = Components/AudioInteractionComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "GroupAudioToPlay",
					"type": "TArray",
					"flags": [
						"Category = AudioInteractionComponent",
						"ModuleRelativePath = Components/AudioInteractionComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "PlayAudioInteraction",
					"description": "------------------------------------------------------------- Functions",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "PlayLocalAudio",
					"description": "Play Local Audio",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "float",
					"parameters": []
				},
				{
					"name": "PlaySpatialAudio",
					"description": "Play Spatial Audio",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "float",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UAudioInteractionComponent",
					"className": "Audio Interaction Component",
					"shortTitle": "Play Spatial Audio",
					"fullTitle": "Play Spatial Audio",
					"description": "",
					"imgPath": "../img/nd_img_PlaySpatialAudio.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Audio Interaction Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Play Spatial Audio"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UAudioInteractionComponent",
					"className": "Audio Interaction Component",
					"shortTitle": "Play Local Audio",
					"fullTitle": "Play Local Audio",
					"description": "",
					"imgPath": "../img/nd_img_PlayLocalAudio.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Audio Interaction Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Play Local Audio"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UAudioInteractionComponent",
					"className": "Audio Interaction Component",
					"shortTitle": "Event Play Audio Interaction",
					"fullTitle": "Event Play Audio Interaction",
					"description": "Add Event",
					"imgPath": "../img/nd_img_PlayAudioInteraction.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UAudioInteractionComponent",
					"className": "Audio Interaction Component",
					"shortTitle": "Play Audio Interaction",
					"fullTitle": "Play Audio Interaction",
					"description": "",
					"imgPath": "../img/nd_img_PlayAudioInteraction.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Audio Interaction Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UAutoInspirationComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UAutoInspirationComponent",
			"properties": [
				{
					"name": "bAutoInspirationEnabled",
					"type": "bool",
					"flags": [
						"Category = AutoInspirationComponent",
						"Comment = // Enable/disable automatic inspiration\n",
						"DisplayName = Enabled",
						"ModuleRelativePath = Inspiration/AutoInspirationComponent.h",
						"ToolTip = Enable/disable automatic inspiration",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Enable/disable automatic inspiration"
				},
				{
					"name": "InspiredBy",
					"type": "TArray",
					"flags": [
						"Category = AutoInspirationComponent",
						"DisplayName = Inspired By Actors",
						"EditCondition = bAutoInspirationEnabled",
						"ModuleRelativePath = Inspiration/AutoInspirationComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "InspiredByCondition",
					"type": "EInspiredByCondition",
					"flags": [
						"Category = AutoInspirationComponent",
						"EditCondition = bAutoInspirationEnabled",
						"ModuleRelativePath = Inspiration/AutoInspirationComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bInspiredByOthers",
					"type": "bool",
					"flags": [
						"Category = AutoInspirationComponent",
						"Comment = // disable if you only want to be uninspired by the actors in InspiredBy\n",
						"EditCondition = bAutoInspirationEnabled",
						"ModuleRelativePath = Inspiration/AutoInspirationComponent.h",
						"ToolTip = disable if you only want to be uninspired by the actors in InspiredBy",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": "disable if you only want to be uninspired by the actors in InspiredBy"
				},
				{
					"name": "bUninspiredByOthers",
					"type": "bool",
					"flags": [
						"Category = AutoInspirationComponent",
						"Comment = // disable if you only want to be inspired by the actors in InspiredBy\n",
						"EditCondition = bAutoInspirationEnabled",
						"ModuleRelativePath = Inspiration/AutoInspirationComponent.h",
						"ToolTip = disable if you only want to be inspired by the actors in InspiredBy",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": "disable if you only want to be inspired by the actors in InspiredBy"
				},
				{
					"name": "ShouldBeInspiredQuery",
					"type": "FGameplayTagQuery",
					"flags": [
						"Category = AutoInspirationComponent",
						"Comment = /**\n\t * Set this to a non-empty query to require that the component have the specified tags to be inspired.\n\t * Gameplay tags will be ignored if this is empty.\n\t */",
						"DeprecatedProperty",
						"EditCondition = bAutoInspirationEnabled",
						"ModuleRelativePath = Inspiration/AutoInspirationComponent.h",
						"ToolTip = Set this to a non-empty query to require that the component have the specified tags to be inspired.\nGameplay tags will be ignored if this is empty.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Set this to a non-empty query to require that the component have the specified tags to be inspired.\nGameplay tags will be ignored if this is empty."
				},
				{
					"name": "GameplayTags",
					"type": "FGameplayTagContainer",
					"flags": [
						"Category = AutoInspirationComponent",
						"ModuleRelativePath = Inspiration/AutoInspirationComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "InspiredByRange",
					"type": "FInt32Range",
					"flags": [
						"Category = AutoInspirationComponent",
						"ClampMin = 0",
						"EditCondition = bAutoInspirationEnabled && InspiredByCondition == EInspiredByCondition::AtLeast",
						"EditConditionHides",
						"ModuleRelativePath = Inspiration/AutoInspirationComponent.h",
						"UIMin = 0",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bUseAutoInspirationRequirements",
					"type": "bool",
					"flags": [
						"Category = AutoInspirationComponent",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Inspiration/AutoInspirationComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "AutoInspirationRequirements",
					"type": "FGameplayTagRequirements",
					"flags": [
						"Category = AutoInspirationComponent",
						"EditCondition = bUseAutoInspirationRequirements",
						"ModuleRelativePath = Inspiration/AutoInspirationComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OnInspirationProgressChangedDelegate",
					"type": "FOnInspirationProgressChanged",
					"flags": [
						"DisplayName = OnInspirationProgressChanged",
						"ModuleRelativePath = Inspiration/AutoInspirationComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnIsInspiredChangedDelegate",
					"type": "FOnIsInspiredChanged",
					"flags": [
						"DisplayName = OnIsInspiredChanged",
						"ModuleRelativePath = Inspiration/AutoInspirationComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "bDebugEnabled",
					"type": "bool",
					"flags": [
						"Category = AutoInspirationComponent",
						"ModuleRelativePath = Inspiration/AutoInspirationComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ViewModel",
					"type": "TObjectPtr<UInspirationProgressViewModel>",
					"flags": [
						"Category = AutoInspirationComponent",
						"EditInline = true",
						"ModuleRelativePath = Inspiration/AutoInspirationComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "CleanInspiredBy",
					"description": "Clean Inspired By",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "GetCanBeAutomaticallyInspired",
					"description": "Get Can be Automatically Inspired",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "GetIsInspired",
					"description": "Get Is Inspired",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "GetProgress",
					"description": "Get Progress",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "float",
					"parameters": []
				},
				{
					"name": "HasInspireConditions",
					"description": "Has Inspire Conditions",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "OnInspirationProgressChanged__DelegateSignature",
					"description": "On Inspiration Progress Changed  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Progress",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnInspiredByOther",
					"description": "On Inspired by Other",
					"flags": [
						"Final",
						"Native",
						"Protected"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Other",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnIsInspiredChanged__DelegateSignature",
					"description": "On Is Inspired Changed  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bNewIsInspired",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnUninspiredByOther",
					"description": "On Uninspired by Other",
					"flags": [
						"Final",
						"Native",
						"Protected"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Other",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "ShouldInspire",
					"description": "Should Inspire",
					"flags": [
						"Final",
						"Native",
						"Protected",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "Update",
					"description": "Update",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UAutoInspirationComponent",
					"className": "Auto Inspiration Component",
					"shortTitle": "Update",
					"fullTitle": "Update",
					"description": "",
					"imgPath": "../img/nd_img_Update.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Auto Inspiration Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UAutoInspirationComponent",
					"className": "Auto Inspiration Component",
					"shortTitle": "Has Inspire Conditions",
					"fullTitle": "Has Inspire Conditions",
					"description": "",
					"imgPath": "../img/nd_img_HasInspireConditions.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Auto Inspiration Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Has Inspire Conditions"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UAutoInspirationComponent",
					"className": "Auto Inspiration Component",
					"shortTitle": "Get Progress",
					"fullTitle": "Get Progress",
					"description": "",
					"imgPath": "../img/nd_img_GetProgress.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Auto Inspiration Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Progress"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UAutoInspirationComponent",
					"className": "Auto Inspiration Component",
					"shortTitle": "Get Is Inspired",
					"fullTitle": "Get Is Inspired",
					"description": "",
					"imgPath": "../img/nd_img_GetIsInspired.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Auto Inspiration Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Get Is Inspired"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UAutoInspirationComponent",
					"className": "Auto Inspiration Component",
					"shortTitle": "Get Can be Automatically Inspired",
					"fullTitle": "Get Can be Automatically Inspired",
					"description": "",
					"imgPath": "../img/nd_img_GetCanBeAutomaticallyInspired.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Auto Inspiration Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Get Can be Automatically Inspired"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UAutoInspirationComponent",
					"className": "Auto Inspiration Component",
					"shortTitle": "Clean Inspired By",
					"fullTitle": "Clean Inspired By",
					"description": "",
					"imgPath": "../img/nd_img_CleanInspiredBy.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Auto Inspiration Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UInspirationProgressViewModel",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase"
			],
			"path": "Classes/Default/UInspirationProgressViewModel",
			"properties": [
				{
					"name": "bShouldBeVisible",
					"type": "bool",
					"flags": [
						"Category = InspirationProgressViewModel",
						"ModuleRelativePath = Inspiration/AutoInspirationComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "Progress",
					"type": "float",
					"flags": [
						"Category = InspirationProgressViewModel",
						"ModuleRelativePath = Inspiration/AutoInspirationComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "bIsInspired",
					"type": "bool",
					"flags": [
						"Category = InspirationProgressViewModel",
						"ModuleRelativePath = Inspiration/AutoInspirationComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "OnIsInspiredChangedDelegate",
					"type": "FOnIsInspiredChanged",
					"flags": [
						"DisplayName = OnIsInspiredChanged",
						"ModuleRelativePath = Inspiration/AutoInspirationComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "bDebugEnabled",
					"type": "bool",
					"flags": [
						"Category = InspirationProgressViewModel",
						"ModuleRelativePath = Inspiration/AutoInspirationComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "GetAutoInspirationComponent",
					"description": "Get Auto Inspiration Component",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UAutoInspirationComponent*",
					"parameters": []
				},
				{
					"name": "Init",
					"description": "Init",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InAutoInspirationComponent",
							"type": "UAutoInspirationComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnInspirationProgressChanged",
					"description": "On Inspiration Progress Changed",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InProgress",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnInspiredChanged",
					"description": "On Inspired Changed",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bNewIsInspired",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnIsInspiredChanged__DelegateSignature",
					"description": "On Is Inspired Changed  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bNewIsInspired",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationProgressViewModel",
					"className": "Inspiration Progress View Model",
					"shortTitle": "Init",
					"fullTitle": "Init",
					"description": "",
					"imgPath": "../img/nd_img_Init.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Inspiration Progress View Model Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Auto Inspiration Component",
							"type": "Auto Inspiration Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationProgressViewModel",
					"className": "Inspiration Progress View Model",
					"shortTitle": "Get Auto Inspiration Component",
					"fullTitle": "Get Auto Inspiration Component",
					"description": "",
					"imgPath": "../img/nd_img_GetAutoInspirationComponent.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Inspiration Progress View Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Auto Inspiration Component Object Reference",
							"description": "Get Auto Inspiration Component"
						}
					]
				}
			]
		},
		{
			"className": "UBiomeHabitatInfo",
			"classHierarchy": [
				"UObject",
				"UDataAsset"
			],
			"path": "Classes/Default/UBiomeHabitatInfo",
			"properties": [
				{
					"name": "BiomeEnvironmentType",
					"type": "EBiomeEnvironmentType",
					"flags": [
						"Category = BiomeHabitatInfo",
						"ModuleRelativePath = BiomeHabitatInfo.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "BiomeDayTemperature",
					"type": "float",
					"flags": [
						"Category = BiomeHabitatInfo",
						"ModuleRelativePath = BiomeHabitatInfo.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "BiomeNightTemperature",
					"type": "float",
					"flags": [
						"Category = BiomeHabitatInfo",
						"ModuleRelativePath = BiomeHabitatInfo.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "PossibleWeatherStates",
					"type": "TMap",
					"flags": [
						"Category = BiomeHabitatInfo",
						"ModuleRelativePath = BiomeHabitatInfo.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "ABoxBoundsActor",
			"classHierarchy": [
				"UObject",
				"AActor"
			],
			"path": "Classes/Default/ABoxBoundsActor",
			"properties": [
				{
					"name": "Box",
					"type": "FBox",
					"flags": [
						"Category = BoxBoundsActor",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/BoxBoundsActor.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bBoxIsRelative",
					"type": "bool",
					"flags": [
						"Category = BoxBoundsActor",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/BoxBoundsActor.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bBoxInheritsRotation",
					"type": "bool",
					"flags": [
						"Category = BoxBoundsActor",
						"EditCondition = bBoxIsRelative",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/BoxBoundsActor.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bBoxInheritsScale",
					"type": "bool",
					"flags": [
						"Category = BoxBoundsActor",
						"EditCondition = bBoxIsRelative",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/BoxBoundsActor.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "DefaultSceneRoot",
					"type": "TObjectPtr<USceneComponent>",
					"flags": [
						"Category = BoxBoundsActor",
						"EditInline = true",
						"ModuleRelativePath = Combat/BoxBoundsActor.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				},
				{
					"name": "ColliderWidth",
					"type": "float",
					"flags": [
						"Category = BoxBoundsActor",
						"ClampMin = 0",
						"Comment = // Width of the box collider walls\n",
						"Delta = 1",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/BoxBoundsActor.h",
						"ToolTip = Width of the box collider walls",
						"UIMax = 100",
						"UIMin = 0",
						"Units = cm",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": "Width of the box collider walls"
				},
				{
					"name": "ValidDirections",
					"type": "int32",
					"flags": [
						"Bitmask",
						"BitmaskEnum = /Script/LittleTrekker.EAxisDirection",
						"Category = BoxBoundsActor",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/BoxBoundsActor.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bIsEnabled",
					"type": "bool",
					"flags": [
						"Category = BoxBoundsActor",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/BoxBoundsActor.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ColliderTemplate",
					"type": "TObjectPtr<UBoxComponent>",
					"flags": [
						"Category = Collider Template",
						"EditInline = true",
						"ModuleRelativePath = Combat/BoxBoundsActor.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Colliders",
					"type": "TMap",
					"flags": [
						"Category = BoxBoundsActor",
						"EditInline = true",
						"ModuleRelativePath = Combat/BoxBoundsActor.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"SaveGame"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "DisableColliders",
					"description": "Disable Colliders",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "GetAbsoluteBox",
					"description": "Get Absolute Box",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FBox",
					"parameters": []
				},
				{
					"name": "GetCollider",
					"description": "Get Collider",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UBoxComponent*",
					"parameters": [
						{
							"name": "Direction",
							"type": "EAxisDirection",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetColliders",
					"description": "Get Colliders",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "TArray",
					"parameters": []
				},
				{
					"name": "Init",
					"description": "Init",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "ResetBox",
					"description": "clear box, disable and hide colliders",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "SetAbsoluteBox",
					"description": "Set Absolute Box",
					"flags": [
						"Native",
						"Event",
						"Public",
						"HasOutParams",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InBox",
							"type": "const FBox&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "bMoveActorToBoxCenter",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetIsEnabled",
					"description": "Set Is Enabled",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bInIsEnabled",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetRelativeBox",
					"description": "Set Relative Box",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InBox",
							"type": "const FBox&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "ShouldUseColliders",
					"description": "Should Use Colliders",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "UpdateColliders",
					"description": "Update Colliders",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "ABoxBoundsActor",
					"className": "Box Bounds Actor",
					"shortTitle": "Should Use Colliders",
					"fullTitle": "Should Use Colliders",
					"description": "",
					"imgPath": "../img/nd_img_ShouldUseColliders.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Box Bounds Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Should Use Colliders"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ABoxBoundsActor",
					"className": "Box Bounds Actor",
					"shortTitle": "Set Relative Box",
					"fullTitle": "Set Relative Box",
					"description": "",
					"imgPath": "../img/nd_img_SetRelativeBox.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Box Bounds Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Box",
							"type": "Box Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ABoxBoundsActor",
					"className": "Box Bounds Actor",
					"shortTitle": "Event Set Is Enabled",
					"fullTitle": "Event Set Is Enabled",
					"description": "Add Event",
					"imgPath": "../img/nd_img_SetIsEnabled.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "In Is Enabled",
							"type": "Boolean",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ABoxBoundsActor",
					"className": "Box Bounds Actor",
					"shortTitle": "Set Is Enabled",
					"fullTitle": "Set Is Enabled",
					"description": "",
					"imgPath": "../img/nd_img_SetIsEnabled.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Box Bounds Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Is Enabled",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ABoxBoundsActor",
					"className": "Box Bounds Actor",
					"shortTitle": "Event Set Absolute Box",
					"fullTitle": "Event Set Absolute Box",
					"description": "Add Event",
					"imgPath": "../img/nd_img_SetAbsoluteBox.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "In Box",
							"type": "Box Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Move Actor to Box Center",
							"type": "Boolean",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ABoxBoundsActor",
					"className": "Box Bounds Actor",
					"shortTitle": "Set Absolute Box",
					"fullTitle": "Set Absolute Box",
					"description": "",
					"imgPath": "../img/nd_img_SetAbsoluteBox.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Box Bounds Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Box",
							"type": "Box Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Move Actor to Box Center",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ABoxBoundsActor",
					"className": "Box Bounds Actor",
					"shortTitle": "Reset Box",
					"fullTitle": "Reset Box",
					"description": "",
					"imgPath": "../img/nd_img_ResetBox.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Box Bounds Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ABoxBoundsActor",
					"className": "Box Bounds Actor",
					"shortTitle": "Init",
					"fullTitle": "Init",
					"description": "",
					"imgPath": "../img/nd_img_Init.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Box Bounds Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ABoxBoundsActor",
					"className": "Box Bounds Actor",
					"shortTitle": "Get Colliders",
					"fullTitle": "Get Colliders",
					"description": "",
					"imgPath": "../img/nd_img_GetColliders.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Box Bounds Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Array of Box Collision Object References",
							"description": "Get Colliders"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ABoxBoundsActor",
					"className": "Box Bounds Actor",
					"shortTitle": "Get Collider",
					"fullTitle": "Get Collider",
					"description": "",
					"imgPath": "../img/nd_img_GetCollider.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Box Bounds Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Direction",
							"type": "unsupported_enum_type: enum size is larger than a byte",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Box Collision Object Reference",
							"description": "Get Collider"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ABoxBoundsActor",
					"className": "Box Bounds Actor",
					"shortTitle": "Get Absolute Box",
					"fullTitle": "Get Absolute Box",
					"description": "",
					"imgPath": "../img/nd_img_GetAbsoluteBox.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Box Bounds Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Box Structure",
							"description": "Get Absolute Box"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ABoxBoundsActor",
					"className": "Box Bounds Actor",
					"shortTitle": "Disable Colliders",
					"fullTitle": "Disable Colliders",
					"description": "",
					"imgPath": "../img/nd_img_DisableColliders.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Box Bounds Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UInteractionEffect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect"
			],
			"path": "Classes/Default/UInteractionEffect",
			"properties": [
				{
					"name": "bRequireInteractionStateChange",
					"type": "bool",
					"flags": [
						"Category = InteractionEffect",
						"ModuleRelativePath = Interaction/Effects/InteractionEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Model",
					"type": "TWeakObjectPtr<UInteractionModel>",
					"flags": [
						"Category = InteractionEffect",
						"Comment = // The state of the effect.\n",
						"ModuleRelativePath = Interaction/Effects/InteractionEffect.h",
						"ToolTip = The state of the effect.",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": "The state of the effect."
				},
				{
					"name": "bWaitForFirstStateChange",
					"type": "bool",
					"flags": [
						"Category = Effect|Advanced",
						"Comment = // if false the effect will start immediately if it ShouldBeRunning()\n// otherwise it will wait for the first state change before checking if it should start\n",
						"ModuleRelativePath = Interaction/Effects/InteractionEffect.h",
						"ToolTip = if false the effect will start immediately if it ShouldBeRunning()\notherwise it will wait for the first state change before checking if it should start",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "if false the effect will start immediately if it ShouldBeRunning()\notherwise it will wait for the first state change before checking if it should start"
				}
			],
			"functions": [
				{
					"name": "OnInteractionModelChanged",
					"description": "On Interaction Model Changed",
					"flags": [
						"Final",
						"Native",
						"Protected"
					],
					"returnType": "void",
					"parameters": []
				}
			]
		},
		{
			"className": "UBreakObjectInteractionEffect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect",
				"UInteractionEffect"
			],
			"path": "Classes/Default/UBreakObjectInteractionEffect",
			"properties": [
				{
					"name": "BreakableMesh",
					"type": "TObjectPtr<UGeometryCollection>",
					"flags": [
						"Category = BreakObjectInteractionEffect",
						"ModuleRelativePath = Interaction/Effects/BreakObjectInteractionEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "InitialForceOnBreak",
					"type": "FVector",
					"flags": [
						"Category = BreakObjectInteractionEffect",
						"ModuleRelativePath = Interaction/Effects/BreakObjectInteractionEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "GeometryCollectionComponent",
					"type": "TWeakObjectPtr<UGeometryCollectionComponent>",
					"flags": [
						"ModuleRelativePath = Interaction/Effects/BreakObjectInteractionEffect.h",
						"Public"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "UPlayerCameraFadeSubsystem",
			"classHierarchy": [
				"UObject",
				"USubsystem",
				"UWorldSubsystem",
				"UTickableWorldSubsystem",
				"UWorldModeSubsystem"
			],
			"path": "Classes/Default/UPlayerCameraFadeSubsystem",
			"properties": [
				{
					"name": "DefaultCameraFadeOptions",
					"type": "FCameraFadeOptions",
					"flags": [
						"Category = PlayerCameraFadeSubsystem",
						"ModuleRelativePath = Player/CameraFade.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "FadeState",
					"type": "EFadeState",
					"flags": [
						"Category = PlayerCameraFadeSubsystem",
						"ModuleRelativePath = Player/CameraFade.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OnFadeStateChangedDelegate_K2",
					"type": "FOnFadeStateChanged_K2",
					"flags": [
						"DisplayName = OnFadeStateChanged",
						"ModuleRelativePath = Player/CameraFade.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "Cancel",
					"description": "Cancel",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnFadeStateChanged",
					"description": "On Fade State Changed",
					"flags": [
						"Native",
						"Event",
						"Protected",
						"BlueprintEvent",
						"Const"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnFadeStateChanged_K2__DelegateSignature",
					"description": "On Fade State Changed K2  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "FadeState",
							"type": "EFadeState",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "RestoreFade",
					"description": "Starts a fade, but skips the fade-in and goes straight to fade-out.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "SetFadeState",
					"description": "Set Fade State",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InNewFadeState",
							"type": "const EFadeState",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "StartAsFadeOut",
					"description": "Start as Fade Out",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InCameraFadeOptions",
							"type": "const FCameraFadeOptions&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "StartWithOptions",
					"description": "Start with Options",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InCameraFadeOptions",
							"type": "const FCameraFadeOptions&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UPlayerCameraFadeSubsystem",
					"className": "Player Camera Fade Subsystem",
					"shortTitle": "Start with Options",
					"fullTitle": "Start with Options",
					"description": "",
					"imgPath": "../img/nd_img_StartWithOptions.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Player Camera Fade Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Camera Fade Options",
							"type": "Camera Fade Options Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UPlayerCameraFadeSubsystem",
					"className": "Player Camera Fade Subsystem",
					"shortTitle": "Start as Fade Out",
					"fullTitle": "Start as Fade Out",
					"description": "",
					"imgPath": "../img/nd_img_StartAsFadeOut.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Player Camera Fade Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Camera Fade Options",
							"type": "Camera Fade Options Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UPlayerCameraFadeSubsystem",
					"className": "Player Camera Fade Subsystem",
					"shortTitle": "Set Fade State",
					"fullTitle": "Set Fade State",
					"description": "",
					"imgPath": "../img/nd_img_SetFadeState.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Player Camera Fade Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In New Fade State",
							"type": "EFadeState Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UPlayerCameraFadeSubsystem",
					"className": "Player Camera Fade Subsystem",
					"shortTitle": "Restore Fade",
					"fullTitle": "Restore Fade",
					"description": "",
					"imgPath": "../img/nd_img_RestoreFade.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Player Camera Fade Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UPlayerCameraFadeSubsystem",
					"className": "Player Camera Fade Subsystem",
					"shortTitle": "Cancel",
					"fullTitle": "Cancel",
					"description": "",
					"imgPath": "../img/nd_img_Cancel.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Player Camera Fade Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UCleanable",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UCleanable",
			"properties": [
				{
					"name": "RequiredTagsToClean",
					"type": "FGameplayTagContainer",
					"flags": [
						"Category = Defaults",
						"Comment = /*\n\t * Tags required to clean this object.\n\t * We use \"RequiredTags\" instead of \"RequiredTools\" to denote items other than tools can be required to clean an object.\n\t * For example, a \"Broom\" and \"Soap\" could be used to clean a specific \"Door\".\n\t */",
						"ModuleRelativePath = Components/Cleanable.h",
						"ToolTip = * Tags required to clean this object.\n* We use \"RequiredTags\" instead of \"RequiredTools\" to denote items other than tools can be required to clean an object.\n* For example, a \"Broom\" and \"Soap\" could be used to clean a specific \"Door\".",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "* Tags required to clean this object.\n* We use \"RequiredTags\" instead of \"RequiredTools\" to denote items other than tools can be required to clean an object.\n* For example, a \"Broom\" and \"Soap\" could be used to clean a specific \"Door\"."
				},
				{
					"name": "NumOfInteractionsToClean",
					"type": "int32",
					"flags": [
						"Category = Defaults",
						"Comment = // How many interactions are required to clean the object.\n",
						"ModuleRelativePath = Components/Cleanable.h",
						"ToolTip = How many interactions are required to clean the object.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "How many interactions are required to clean the object."
				},
				{
					"name": "NumOfInteractionsRemaining",
					"type": "int32",
					"flags": [
						"Comment = // How many interactions are remaining to clean the object.\n",
						"ModuleRelativePath = Components/Cleanable.h",
						"ToolTip = How many interactions are remaining to clean the object.",
						"Public"
					],
					"description": "How many interactions are remaining to clean the object."
				},
				{
					"name": "bShouldInspireOnClean",
					"type": "bool",
					"flags": [
						"Category = Defaults",
						"Comment = // Whether the clean action should cause inspiration on the parent object.\n",
						"EditCondition = !bShouldInspireOnCleanComplete",
						"ModuleRelativePath = Components/Cleanable.h",
						"ToolTip = Whether the clean action should cause inspiration on the parent object.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Whether the clean action should cause inspiration on the parent object."
				},
				{
					"name": "bShouldInspireOnCleanComplete",
					"type": "bool",
					"flags": [
						"Category = Defaults",
						"Comment = // Whether the clean complete action should cause inspiration on the parent object.\n",
						"EditCondition = !bShouldInspireOnClean",
						"ModuleRelativePath = Components/Cleanable.h",
						"ToolTip = Whether the clean complete action should cause inspiration on the parent object.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Whether the clean complete action should cause inspiration on the parent object."
				},
				{
					"name": "bDestroyParentOnCleanComplete",
					"type": "bool",
					"flags": [
						"Category = Defaults",
						"Comment = // Whether the parent object should be destroyed after being cleaned.\n",
						"ModuleRelativePath = Components/Cleanable.h",
						"ToolTip = Whether the parent object should be destroyed after being cleaned.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Whether the parent object should be destroyed after being cleaned."
				},
				{
					"name": "bUseGrimeMaterial",
					"type": "bool",
					"flags": [
						"Category = Defaults",
						"Comment = /*\n\t * Grime is used to apply a layer of dirt to an object\n\t * This is useful for objects which should be dirty, but should not be destroyed after being cleaned (a pile of leaves vs. a window)\n\t */",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Components/Cleanable.h",
						"ToolTip = * Grime is used to apply a layer of dirt to an object\n* This is useful for objects which should be dirty, but should not be destroyed after being cleaned (a pile of leaves vs. a window)",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "* Grime is used to apply a layer of dirt to an object\n* This is useful for objects which should be dirty, but should not be destroyed after being cleaned (a pile of leaves vs. a window)"
				},
				{
					"name": "GrimeMaterial",
					"type": "TObjectPtr<UMaterialInstance>",
					"flags": [
						"Category = Defaults",
						"Comment = // The texture to use for the grime.\n",
						"EditCondition = bUseGrimeMaterial",
						"ModuleRelativePath = Components/Cleanable.h",
						"ToolTip = The texture to use for the grime.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "The texture to use for the grime."
				},
				{
					"name": "DynamicMaterial",
					"type": "TObjectPtr<UMaterialInstanceDynamic>",
					"flags": [
						"Comment = // A dynamic material instance variable used to apply the grime to the parent object.\n",
						"ModuleRelativePath = Components/Cleanable.h",
						"ToolTip = A dynamic material instance variable used to apply the grime to the parent object.",
						"Public"
					],
					"description": "A dynamic material instance variable used to apply the grime to the parent object."
				},
				{
					"name": "DirtinessParamName",
					"type": "FName",
					"flags": [
						"Category = Defaults",
						"EditCondition = bUseGrimeMaterial",
						"EditConditionHides",
						"GetOptions = GetMaterialParameterNames",
						"ModuleRelativePath = Components/Cleanable.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "GrimeAmount",
					"type": "float",
					"flags": [
						"Category = Defaults",
						"ClampMax = 1",
						"ClampMin = 0",
						"Comment = // The amount of grime to apply to the parent object.\n",
						"Delta = 0.010000",
						"EditCondition = bUseGrimeMaterial",
						"EditConditionHides",
						"ModuleRelativePath = Components/Cleanable.h",
						"ToolTip = The amount of grime to apply to the parent object.",
						"UIMax = 1",
						"UIMin = 0",
						"Units = Percent",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "The amount of grime to apply to the parent object."
				},
				{
					"name": "bUseDecay",
					"type": "bool",
					"flags": [
						"Category = Defaults",
						"Comment = // Whether the parent object should decay over time after being cleaned.\n",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Components/Cleanable.h",
						"ToolTip = Whether the parent object should decay over time after being cleaned.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Whether the parent object should decay over time after being cleaned."
				},
				{
					"name": "TimeDelayBeforeDecay",
					"type": "float",
					"flags": [
						"Category = Defaults",
						"Comment = // The amount of time in seconds to wait before the object begins to decay.\n",
						"Delta = 1.000000",
						"EditCondition = bUseDecay",
						"ModuleRelativePath = Components/Cleanable.h",
						"ToolTip = The amount of time in seconds to wait before the object begins to decay.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "The amount of time in seconds to wait before the object begins to decay."
				},
				{
					"name": "DecayPercentPerMinute",
					"type": "float",
					"flags": [
						"Category = Defaults",
						"ClampMax = 1",
						"ClampMin = 0",
						"Comment = // How fast the object should decay, as a percentage relative to the object's original GrimeAmount per minute.\n",
						"Delta = 0.010000",
						"EditCondition = bUseDecay",
						"ModuleRelativePath = Components/Cleanable.h",
						"ToolTip = How fast the object should decay, as a percentage relative to the object's original GrimeAmount per minute.",
						"UIMax = 1",
						"UIMin = 0",
						"Units = Percent",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "How fast the object should decay, as a percentage relative to the object's original GrimeAmount per minute."
				},
				{
					"name": "LootSpawnEffect",
					"type": "TObjectPtr<ULootSpawnEffect>",
					"flags": [
						"Category = Effects",
						"Comment = // Loot Spawn Effect triggered when the clean action is performed.\n",
						"EditInline = true",
						"ModuleRelativePath = Components/Cleanable.h",
						"ToolTip = Loot Spawn Effect triggered when the clean action is performed.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Loot Spawn Effect triggered when the clean action is performed."
				},
				{
					"name": "CleanAudioEffect",
					"type": "TObjectPtr<UInteractionEffect>",
					"flags": [
						"Category = Effects",
						"Comment = // Audio Effect played when the clean action is performed.\n",
						"EditInline = true",
						"ModuleRelativePath = Components/Cleanable.h",
						"ToolTip = Audio Effect played when the clean action is performed.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Audio Effect played when the clean action is performed."
				},
				{
					"name": "CleanFailAudioEffect",
					"type": "TObjectPtr<UInteractionEffect>",
					"flags": [
						"Category = Effects",
						"Comment = // Audio Effect played when the clean action is attempted but player does not have the required tags.\n",
						"EditInline = true",
						"ModuleRelativePath = Components/Cleanable.h",
						"ToolTip = Audio Effect played when the clean action is attempted but player does not have the required tags.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Audio Effect played when the clean action is attempted but player does not have the required tags."
				},
				{
					"name": "CleanCompleteAudioEffect",
					"type": "TObjectPtr<UInteractionEffect>",
					"flags": [
						"Category = Effects",
						"Comment = // Audio Effect played when the clean action is complete.\n",
						"EditInline = true",
						"ModuleRelativePath = Components/Cleanable.h",
						"ToolTip = Audio Effect played when the clean action is complete.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Audio Effect played when the clean action is complete."
				},
				{
					"name": "CleanAnimationEffect",
					"type": "TObjectPtr<UInteractionEffect>",
					"flags": [
						"Category = Effects",
						"Comment = // Animation Effect played (on the player) when the clean action is performed.\n",
						"EditInline = true",
						"ModuleRelativePath = Components/Cleanable.h",
						"ToolTip = Animation Effect played (on the player) when the clean action is performed.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Animation Effect played (on the player) when the clean action is performed."
				},
				{
					"name": "CleanParticleEffect",
					"type": "TObjectPtr<UInteractionEffect>",
					"flags": [
						"Category = Effects",
						"Comment = // Particle Effect played when the clean action is performed.\n",
						"EditInline = true",
						"ModuleRelativePath = Components/Cleanable.h",
						"ToolTip = Particle Effect played when the clean action is performed.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Particle Effect played when the clean action is performed."
				},
				{
					"name": "CleanCompleteParticleEffect",
					"type": "TObjectPtr<UInteractionEffect>",
					"flags": [
						"Category = Effects",
						"Comment = // Particle Effect played when the clean action is complete.\n",
						"EditInline = true",
						"ModuleRelativePath = Components/Cleanable.h",
						"ToolTip = Particle Effect played when the clean action is complete.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Particle Effect played when the clean action is complete."
				}
			],
			"functions": [
				{
					"name": "CanBeCleaned",
					"description": "Checks if the clean action can be performed.",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "CanDecay",
					"description": "Checks if the object can decay.",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "Clean",
					"description": "Performs the clean action.",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "CleanComplete",
					"description": "Called when the clean action is complete.",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "Decay",
					"description": "Begins the decay process.",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "GetMaterialParameterNames",
					"description": "Retrieves a list of the scalar material parameters.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"Const"
					],
					"returnType": "TArray",
					"parameters": []
				},
				{
					"name": "GetMeshComponent",
					"description": "Retrieves the mesh component of the parent object.",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "UMeshComponent*",
					"parameters": []
				},
				{
					"name": "SetGrimeAmount",
					"description": "Sets the grime amount.",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InGrimeAmount",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetNumOfInteractionsRemaining",
					"description": "Set Num Of Interactions Remaining",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewNumInteractionsRemaining",
							"type": "int32",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "TearDownGrimeMaterial",
					"description": "Tears down the grime material.",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "UpdateGrimeMaterial",
					"description": "Updates the grime material.",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UCleanable",
					"className": "Cleanable",
					"shortTitle": "Event Update Grime Material",
					"fullTitle": "Event Update Grime Material",
					"description": "Add Event",
					"imgPath": "../img/nd_img_UpdateGrimeMaterial.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCleanable",
					"className": "Cleanable",
					"shortTitle": "Update Grime Material",
					"fullTitle": "Update Grime Material",
					"description": "",
					"imgPath": "../img/nd_img_UpdateGrimeMaterial.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Cleanable Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCleanable",
					"className": "Cleanable",
					"shortTitle": "Event Tear Down Grime Material",
					"fullTitle": "Event Tear Down Grime Material",
					"description": "Add Event",
					"imgPath": "../img/nd_img_TearDownGrimeMaterial.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCleanable",
					"className": "Cleanable",
					"shortTitle": "Tear Down Grime Material",
					"fullTitle": "Tear Down Grime Material",
					"description": "",
					"imgPath": "../img/nd_img_TearDownGrimeMaterial.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Cleanable Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCleanable",
					"className": "Cleanable",
					"shortTitle": "Event Set Grime Amount",
					"fullTitle": "Event Set Grime Amount",
					"description": "Add Event",
					"imgPath": "../img/nd_img_SetGrimeAmount.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "In Grime Amount",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCleanable",
					"className": "Cleanable",
					"shortTitle": "Set Grime Amount",
					"fullTitle": "Set Grime Amount",
					"description": "",
					"imgPath": "../img/nd_img_SetGrimeAmount.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Cleanable Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Grime Amount",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCleanable",
					"className": "Cleanable",
					"shortTitle": "Get Mesh Component",
					"fullTitle": "Get Mesh Component",
					"description": "",
					"imgPath": "../img/nd_img_GetMeshComponent.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Cleanable Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Mesh Component Object Reference",
							"description": "Retrieves the mesh component of the parent object."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCleanable",
					"className": "Cleanable",
					"shortTitle": "Event Decay",
					"fullTitle": "Event Decay",
					"description": "Add Event",
					"imgPath": "../img/nd_img_Decay.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCleanable",
					"className": "Cleanable",
					"shortTitle": "Decay",
					"fullTitle": "Decay",
					"description": "",
					"imgPath": "../img/nd_img_Decay.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Cleanable Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCleanable",
					"className": "Cleanable",
					"shortTitle": "Event Clean Complete",
					"fullTitle": "Event Clean Complete",
					"description": "Add Event",
					"imgPath": "../img/nd_img_CleanComplete.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCleanable",
					"className": "Cleanable",
					"shortTitle": "Clean Complete",
					"fullTitle": "Clean Complete",
					"description": "",
					"imgPath": "../img/nd_img_CleanComplete.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Cleanable Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCleanable",
					"className": "Cleanable",
					"shortTitle": "Event Clean",
					"fullTitle": "Event Clean",
					"description": "Add Event",
					"imgPath": "../img/nd_img_Clean.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCleanable",
					"className": "Cleanable",
					"shortTitle": "Clean",
					"fullTitle": "Clean",
					"description": "",
					"imgPath": "../img/nd_img_Clean.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Cleanable Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCleanable",
					"className": "Cleanable",
					"shortTitle": "Can Decay",
					"fullTitle": "Can Decay",
					"description": "",
					"imgPath": "../img/nd_img_CanDecay.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Cleanable Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Checks if the object can decay."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCleanable",
					"className": "Cleanable",
					"shortTitle": "Can be Cleaned",
					"fullTitle": "Can be Cleaned",
					"description": "",
					"imgPath": "../img/nd_img_CanBeCleaned.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Cleanable Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Checks if the clean action can be performed."
						}
					]
				}
			]
		},
		{
			"className": "UClimateInfo",
			"classHierarchy": [
				"UObject",
				"UDataAsset",
				"UPrimaryDataAsset"
			],
			"path": "Classes/Default/UClimateInfo",
			"properties": [
				{
					"name": "HasTemperature",
					"type": "bool",
					"flags": [
						"Category = Temperature Info",
						"Comment = // --------------------------------- Temperature\n",
						"ModuleRelativePath = Climate/ClimateInfo.h",
						"ToolTip = --------------------------------- Temperature",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "--------------------------------- Temperature"
				},
				{
					"name": "StartingTemperature",
					"type": "float",
					"flags": [
						"Category = Temperature Info",
						"EditCondition = HasTemperature",
						"ModuleRelativePath = Climate/ClimateInfo.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "CriticalMinTemperature",
					"type": "float",
					"flags": [
						"Category = Temperature Info",
						"EditCondition = HasTemperature",
						"ModuleRelativePath = Climate/ClimateInfo.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "AbsoluteMinTemperature",
					"type": "float",
					"flags": [
						"Category = Temperature Info",
						"EditCondition = HasTemperature",
						"ModuleRelativePath = Climate/ClimateInfo.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "CriticalMaxTemperature",
					"type": "float",
					"flags": [
						"Category = Temperature Info",
						"EditCondition = HasTemperature",
						"ModuleRelativePath = Climate/ClimateInfo.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "AbsoluteMaxTemperature",
					"type": "float",
					"flags": [
						"Category = Temperature Info",
						"EditCondition = HasTemperature",
						"ModuleRelativePath = Climate/ClimateInfo.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "HasWeather",
					"type": "bool",
					"flags": [
						"Category = Weather Info",
						"Comment = // --------------------------------- Weather\n",
						"ModuleRelativePath = Climate/ClimateInfo.h",
						"ToolTip = --------------------------------- Weather",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "--------------------------------- Weather"
				},
				{
					"name": "WeatherType",
					"type": "EWeatherType",
					"flags": [
						"Category = Weather Info",
						"EditCondition = HasWeather",
						"ModuleRelativePath = Climate/ClimateInfo.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "CloudCoverage",
					"type": "float",
					"flags": [
						"Category = Weather Info",
						"ClampMax = 10",
						"ClampMin = 0",
						"EditCondition = HasWeather",
						"ModuleRelativePath = Climate/ClimateInfo.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "RainIntensity",
					"type": "float",
					"flags": [
						"Category = Weather Info",
						"ClampMax = 10",
						"ClampMin = 0",
						"EditCondition = HasWeather",
						"ModuleRelativePath = Climate/ClimateInfo.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "SnowIntensity",
					"type": "float",
					"flags": [
						"Category = Weather Info",
						"ClampMax = 10",
						"ClampMin = 0",
						"EditCondition = HasWeather",
						"ModuleRelativePath = Climate/ClimateInfo.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "MagneticStormIntensity",
					"type": "float",
					"flags": [
						"Category = Weather Info",
						"ClampMax = 10",
						"ClampMin = 0",
						"EditCondition = HasWeather",
						"ModuleRelativePath = Climate/ClimateInfo.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "WindIntensity",
					"type": "float",
					"flags": [
						"Category = Weather Info",
						"ClampMax = 10",
						"ClampMin = 0",
						"EditCondition = HasWeather",
						"ModuleRelativePath = Climate/ClimateInfo.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "FogIntensity",
					"type": "float",
					"flags": [
						"Category = Weather Info",
						"ClampMax = 10",
						"ClampMin = 0",
						"EditCondition = HasWeather",
						"ModuleRelativePath = Climate/ClimateInfo.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "TemperatureInfluenceFromRain",
					"type": "float",
					"flags": [
						"Category = Weather Info",
						"EditCondition = HasWeather && WeatherType== EWeatherType::Rainy",
						"ModuleRelativePath = Climate/ClimateInfo.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "TemperatureInfluenceFromSnow",
					"type": "float",
					"flags": [
						"Category = Weather Info",
						"EditCondition = HasWeather && WeatherType== EWeatherType::Snowy",
						"ModuleRelativePath = Climate/ClimateInfo.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "TemperatureInfluenceFromMagneticStorm",
					"type": "float",
					"flags": [
						"Category = Weather Info",
						"EditCondition = HasWeather && WeatherType== EWeatherType::MagneticStormy",
						"ModuleRelativePath = Climate/ClimateInfo.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "UCombatAbilityData",
			"classHierarchy": [
				"UObject",
				"UDataAsset"
			],
			"path": "Classes/Default/UCombatAbilityData",
			"properties": [
				{
					"name": "Ability",
					"type": "TObjectPtr<UCombatAbility>",
					"flags": [
						"Category = CombatAbilityData",
						"EditInline = true",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"TitleProperty = AbilityTag",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "UMobData",
			"classHierarchy": [
				"UObject",
				"UDataAsset"
			],
			"path": "Classes/Default/UMobData",
			"properties": [
				{
					"name": "MaxHealthBase",
					"type": "float",
					"flags": [
						"Category = MobData",
						"ClampMin = 0",
						"Delta = 1",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"UIMax = 100",
						"UIMin = 0",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "DamageMultiplier",
					"type": "float",
					"flags": [
						"Category = MobData",
						"ClampMin = 0",
						"Delta = 0.100000",
						"ForceUnits = Multiplier",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"UIMax = 100",
						"UIMin = 0",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "AttackSpeedMultiplier",
					"type": "float",
					"flags": [
						"Category = MobData",
						"ClampMin = 0",
						"Delta = 0.100000",
						"ForceUnits = m/s",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"UIMax = 100",
						"UIMin = 0",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "MovementSpeed",
					"type": "float",
					"flags": [
						"Category = MobData",
						"ClampMin = 0",
						"Delta = 0.100000",
						"ForceUnits = m/s",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"UIMax = 100",
						"UIMin = 0",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Abilities",
					"type": "TArray",
					"flags": [
						"Category = MobData",
						"EditInline = true",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"TitleProperty = AbilityTag",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "UCombatAbility",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect"
			],
			"path": "Classes/Default/UCombatAbility",
			"properties": [
				{
					"name": "AbilityTag",
					"type": "FGameplayTag",
					"flags": [
						"Categories = Combat.Ability",
						"Category = CombatAbility",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Description",
					"type": "FText",
					"flags": [
						"Category = CombatAbility",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"MultiLine = TRUE",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Target",
					"type": "FCombatTarget",
					"flags": [
						"Category = CombatAbility",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "SelectionChanceValue",
					"type": "float",
					"flags": [
						"Category = CombatAbility",
						"ClampMin = 0",
						"Delta = 0.050000",
						"DisplayName = SelectionChance",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"UIMax = 1",
						"UIMin = 0",
						"Units = Multiplier",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ActivationsBeforeSelectionChange",
					"type": "FInt32Range",
					"flags": [
						"Category = CombatAbility",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bCanUseLocationTarget",
					"type": "bool",
					"flags": [
						"Category = CombatAbility",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bRestartOnCooldown",
					"type": "bool",
					"flags": [
						"Category = CombatAbility",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "CombatParticipantComponent",
					"type": "TObjectPtr<UCombatParticipantComponent>",
					"flags": [
						"Category = CombatAbility",
						"EditInline = true",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "bAllowFriendlyTarget",
					"type": "bool",
					"flags": [
						"Category = CombatAbility",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bRequiresTarget",
					"type": "bool",
					"flags": [
						"Category = CombatAbility",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "FindTarget",
					"description": "Find Target",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent",
						"Const"
					],
					"returnType": "FCombatTarget",
					"parameters": []
				},
				{
					"name": "GetSelectionChance",
					"description": "Get Selection Chance",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "float",
					"parameters": []
				},
				{
					"name": "GetTarget",
					"description": "Get Target",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FCombatTarget",
					"parameters": []
				},
				{
					"name": "GetTargetActor",
					"description": "Get Target Actor",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "AActor*",
					"parameters": []
				},
				{
					"name": "GetTargetLocation",
					"description": "Get Target Location",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FVector",
					"parameters": []
				},
				{
					"name": "HasValidTarget",
					"description": "Has Valid Target",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsValidTargetActor",
					"description": "Is Valid Target Actor",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Actor",
							"type": "const AActor*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "OnTargetChanged",
					"description": "On Target Changed",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InTarget",
							"type": "FCombatTarget",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnTargetChanged_K2__DelegateSignature",
					"description": "On Target Changed K2  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Target",
							"type": "FCombatTarget",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetSelectionChance",
					"description": "Set Selection Chance",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InSelectionChance",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetTarget",
					"description": "Set Target",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InTarget",
							"type": "FCombatTarget",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatAbility",
					"className": "Combat Ability",
					"shortTitle": "Set Target",
					"fullTitle": "Set Target",
					"description": "",
					"imgPath": "../img/nd_img_SetTarget.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Ability Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Target",
							"type": "Combat Target Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatAbility",
					"className": "Combat Ability",
					"shortTitle": "Set Selection Chance",
					"fullTitle": "Set Selection Chance",
					"description": "",
					"imgPath": "../img/nd_img_SetSelectionChance.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Ability Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Selection Chance",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatAbility",
					"className": "Combat Ability",
					"shortTitle": "Event On Target Changed",
					"fullTitle": "Event On Target Changed",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnTargetChanged.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "In Target",
							"type": "Combat Target Structure",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatAbility",
					"className": "Combat Ability",
					"shortTitle": "Is Valid Target Actor",
					"fullTitle": "Is Valid Target Actor",
					"description": "",
					"imgPath": "../img/nd_img_IsValidTargetActor.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Ability Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Valid Target Actor"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatAbility",
					"className": "Combat Ability",
					"shortTitle": "Has Valid Target",
					"fullTitle": "Has Valid Target",
					"description": "",
					"imgPath": "../img/nd_img_HasValidTarget.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Ability Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Has Valid Target"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatAbility",
					"className": "Combat Ability",
					"shortTitle": "Get Target Location",
					"fullTitle": "Get Target Location",
					"description": "",
					"imgPath": "../img/nd_img_GetTargetLocation.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Ability Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Vector",
							"description": "Get Target Location"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatAbility",
					"className": "Combat Ability",
					"shortTitle": "Get Target Actor",
					"fullTitle": "Get Target Actor",
					"description": "",
					"imgPath": "../img/nd_img_GetTargetActor.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Ability Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Actor Object Reference",
							"description": "Get Target Actor"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatAbility",
					"className": "Combat Ability",
					"shortTitle": "Get Target",
					"fullTitle": "Get Target",
					"description": "",
					"imgPath": "../img/nd_img_GetTarget.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Ability Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Combat Target Structure",
							"description": "Get Target"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatAbility",
					"className": "Combat Ability",
					"shortTitle": "Get Selection Chance",
					"fullTitle": "Get Selection Chance",
					"description": "",
					"imgPath": "../img/nd_img_GetSelectionChance.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Ability Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Selection Chance"
						}
					]
				}
			]
		},
		{
			"className": "UAttack",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect",
				"UCombatAbility"
			],
			"path": "Classes/Default/UAttack",
			"properties": [
				{
					"name": "Damage",
					"type": "FDamageValue",
					"flags": [
						"Category = Attack",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"ShowOnlyInnerProperties",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "ApplyDamage",
					"description": "Apply Damage",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "DamagedActor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Amount",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "CreateDamageEvent",
					"description": "Create Damage Event",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "FActorDamageEvent",
					"parameters": [
						{
							"name": "DamagedActor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Amount",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetDamage",
					"description": "Get Damage",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "float",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UAttack",
					"className": "Attack",
					"shortTitle": "Get Damage",
					"fullTitle": "Get Damage",
					"description": "",
					"imgPath": "../img/nd_img_GetDamage.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Attack Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Damage"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UAttack",
					"className": "Attack",
					"shortTitle": "Create Damage Event",
					"fullTitle": "Create Damage Event",
					"description": "",
					"imgPath": "../img/nd_img_CreateDamageEvent.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Attack Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Damaged Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Amount",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Actor Damage Event Structure",
							"description": "Create Damage Event"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UAttack",
					"className": "Attack",
					"shortTitle": "Apply Damage",
					"fullTitle": "Apply Damage",
					"description": "",
					"imgPath": "../img/nd_img_ApplyDamage.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Attack Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Damaged Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Amount",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "URangedAttack",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect",
				"UCombatAbility",
				"UAttack"
			],
			"path": "Classes/Default/URangedAttack",
			"properties": [
				{
					"name": "LaunchParameters",
					"type": "FLaunchParameters",
					"flags": [
						"Category = RangedAttack",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"ShowOnlyInnerProperties",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "TargetAccuracyOptions",
					"type": "FRandomPointInCircleOptions",
					"flags": [
						"Category = RangedAttack",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bCanBeReflected",
					"type": "bool",
					"flags": [
						"Category = RangedAttack",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "UCombatAbilityComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent",
				"UEffectComponent"
			],
			"path": "Classes/Default/UCombatAbilityComponent",
			"properties": [],
			"functions": [
				{
					"name": "GetAbility",
					"description": "Get Ability",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UCombatAbility*",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatAbilityComponent",
					"className": "Combat Ability Component",
					"shortTitle": "Get Ability",
					"fullTitle": "Get Ability",
					"description": "",
					"imgPath": "../img/nd_img_GetAbility.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Ability Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Combat Ability Object Reference",
							"description": "Get Ability"
						}
					]
				}
			]
		},
		{
			"className": "UDistanceScoreUtil",
			"classHierarchy": [
				"UObject",
				"UBlueprintFunctionLibrary"
			],
			"path": "Classes/Default/UDistanceScoreUtil",
			"properties": [],
			"functions": [
				{
					"name": "GetPercent",
					"description": "Get Percent",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "float",
					"parameters": [
						{
							"name": "DistanceScore",
							"type": "const FDistanceScore&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "Distance",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetScore",
					"description": "Get Score",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "float",
					"parameters": [
						{
							"name": "DistanceScore",
							"type": "const FDistanceScore&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "Distance",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "DefaultScore",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UDistanceScoreUtil",
					"className": "Distance Score Util",
					"shortTitle": "Get Score",
					"fullTitle": "Get Score",
					"description": "",
					"imgPath": "../img/nd_img_GetScore.png",
					"inputs": [
						{
							"name": "Distance Score",
							"type": "Distance Score Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Distance",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Default Score",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Score"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDistanceScoreUtil",
					"className": "Distance Score Util",
					"shortTitle": "Get Percent",
					"fullTitle": "Get Percent",
					"description": "",
					"imgPath": "../img/nd_img_GetPercent.png",
					"inputs": [
						{
							"name": "Distance Score",
							"type": "Distance Score Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Distance",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Percent"
						}
					]
				}
			]
		},
		{
			"className": "ULaunchProjectileEffect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect"
			],
			"path": "Classes/Default/ULaunchProjectileEffect",
			"properties": [
				{
					"name": "bUseGravity",
					"type": "bool",
					"flags": [
						"Category = LaunchProjectileEffect",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "LaunchVector",
					"type": "FVector",
					"flags": [
						"Category = LaunchProjectileEffect",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "HasValidLaunchVelocity",
					"type": "bool",
					"flags": [
						"Category = LaunchProjectileEffect",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "ProjectileMovement",
					"type": "TObjectPtr<UProjectileMovementComponent>",
					"flags": [
						"Category = LaunchProjectileEffect",
						"EditInline = true",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "LaunchParameters",
					"type": "FLaunchParameters",
					"flags": [
						"Category = LaunchProjectileEffect",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Target",
					"type": "FCombatTarget",
					"flags": [
						"Category = LaunchProjectileEffect",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "SetLaunchParameters",
					"description": "Set Launch Parameters",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InLaunchParameters",
							"type": "const FLaunchParameters",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "SetNewTargetParameters",
					"description": "Set New Target Parameters",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InTarget",
							"type": "const FCombatTarget&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "InLaunchParameters",
							"type": "const FLaunchParameters&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "SetProjectileMovement",
					"description": "Set Projectile Movement",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InProjectileMovement",
							"type": "UProjectileMovementComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetTarget",
					"description": "Set Target",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InTarget",
							"type": "const FCombatTarget",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "ULaunchProjectileEffect",
					"className": "Launch Projectile Effect",
					"shortTitle": "Set Target",
					"fullTitle": "Set Target",
					"description": "",
					"imgPath": "../img/nd_img_SetTarget.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Launch Projectile Effect Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Target",
							"type": "Combat Target Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULaunchProjectileEffect",
					"className": "Launch Projectile Effect",
					"shortTitle": "Set Projectile Movement",
					"fullTitle": "Set Projectile Movement",
					"description": "",
					"imgPath": "../img/nd_img_SetProjectileMovement.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Launch Projectile Effect Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Projectile Movement",
							"type": "Projectile Movement Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULaunchProjectileEffect",
					"className": "Launch Projectile Effect",
					"shortTitle": "Set New Target Parameters",
					"fullTitle": "Set New Target Parameters",
					"description": "",
					"imgPath": "../img/nd_img_SetNewTargetParameters.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Launch Projectile Effect Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Target",
							"type": "Combat Target Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "In Launch Parameters",
							"type": "Launch Parameters Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULaunchProjectileEffect",
					"className": "Launch Projectile Effect",
					"shortTitle": "Set Launch Parameters",
					"fullTitle": "Set Launch Parameters",
					"description": "",
					"imgPath": "../img/nd_img_SetLaunchParameters.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Launch Projectile Effect Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Launch Parameters",
							"type": "Launch Parameters Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "ULaunchProjectileEffectComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent",
				"UEffectComponent"
			],
			"path": "Classes/Default/ULaunchProjectileEffectComponent",
			"properties": [],
			"functions": []
		},
		{
			"className": "ACombatProjectile",
			"classHierarchy": [
				"UObject",
				"AActor"
			],
			"path": "Classes/Default/ACombatProjectile",
			"properties": [
				{
					"name": "InteractiveComponent",
					"type": "TObjectPtr<UInteractiveComponent>",
					"flags": [
						"Category = CombatProjectile",
						"EditInline = true",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Target",
					"type": "FCombatTarget",
					"flags": [
						"Category = CombatProjectile",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn"
					],
					"description": ""
				},
				{
					"name": "bUseInitialLaunchParameters",
					"type": "bool",
					"flags": [
						"Category = CombatProjectile",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"ExposeOnSpawn"
					],
					"description": ""
				},
				{
					"name": "InitialLaunchParameters",
					"type": "FLaunchParameters",
					"flags": [
						"Category = CombatProjectile",
						"EditCondition = bUseInitialLaunchParameters",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"ExposeOnSpawn"
					],
					"description": ""
				},
				{
					"name": "ExplodeLifespan",
					"type": "float",
					"flags": [
						"Category = CombatProjectile",
						"ClampMin = 0",
						"Comment = // Lifespan of the projectile after it explodes\n",
						"Delta = 0.100000",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"ToolTip = Lifespan of the projectile after it explodes",
						"UIMax = 10",
						"UIMin = 0",
						"Units = s",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": "Lifespan of the projectile after it explodes"
				},
				{
					"name": "LaunchCount",
					"type": "int32",
					"flags": [
						"Category = CombatProjectile",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "ReflectCount",
					"type": "int32",
					"flags": [
						"Category = CombatProjectile",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "MaxReflectCount",
					"type": "int32",
					"flags": [
						"Category = CombatProjectile",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "bDidExplode",
					"type": "bool",
					"flags": [
						"Category = CombatProjectile",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "LaunchEffect",
					"type": "TObjectPtr<ULaunchProjectileEffect>",
					"flags": [
						"Category = CombatProjectile",
						"EditInline = true",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Damage",
					"type": "FDamageValue",
					"flags": [
						"Category = CombatProjectile",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"ShowOnlyInnerProperties",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bWasInCombat",
					"type": "bool",
					"flags": [
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "bCanReflect",
					"type": "bool",
					"flags": [
						"Category = CombatProjectile",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "DamageInstigator",
					"type": "TObjectPtr<AActor>",
					"flags": [
						"Category = CombatProjectile",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ProjectileMovement",
					"type": "TObjectPtr<UProjectileMovementComponent>",
					"flags": [
						"Category = CombatProjectile",
						"EditInline = true",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Mesh",
					"type": "TObjectPtr<UStaticMeshComponent>",
					"flags": [
						"Category = CombatProjectile",
						"EditInline = true",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "CombatSubsystem",
					"type": "TObjectPtr<UCombatSubsystem>",
					"flags": [
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "HitActors",
					"type": "TSet",
					"flags": [
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "OnLaunchDelegate_K2",
					"type": "FOnLaunch_K2",
					"flags": [
						"DisplayName = OnLaunch",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "bIncludeBoundsInReachTargetRadius",
					"type": "bool",
					"flags": [
						"Category = CombatProjectile",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ReachedTargetRadius",
					"type": "float",
					"flags": [
						"Category = CombatProjectile",
						"ClampMin = 0",
						"Delta = 5",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"UIMax = 1000",
						"UIMin = 0",
						"Units = cm",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OnReachTargetDelegate_K2",
					"type": "FOnReachTarget_K2",
					"flags": [
						"DisplayName = OnReachTarget",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnReflectDelegate_K2",
					"type": "FOnProjectileEvent_K2",
					"flags": [
						"DisplayName = OnReflect",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnExplodeDelegate_K2",
					"type": "FOnProjectileEvent_K2",
					"flags": [
						"DisplayName = OnExplode",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "bDidReachTargetAlready",
					"type": "bool",
					"flags": [
						"Category = CombatProjectile",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintVisible"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "CanLaunch",
					"description": "Can Launch",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "CanReflect",
					"description": "Can Reflect",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "DidReachTarget",
					"description": "Did Reach Target",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "Explode",
					"description": "Explode",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "GetLaunchEffect",
					"description": "Get Launch Effect",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "ULaunchProjectileEffect*",
					"parameters": []
				},
				{
					"name": "GetLaunchParameters",
					"description": "Get Launch Parameters",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FLaunchParameters",
					"parameters": []
				},
				{
					"name": "IsLaunched",
					"description": "Is Launched",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsRelevant",
					"description": "Is Relevant",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "Launch",
					"description": "Launch",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnActorDefeated",
					"description": "On Actor Defeated",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnCombatHit",
					"description": "On Combat Hit",
					"flags": [
						"Native",
						"Event",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Hit",
							"type": "const FHitResult&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnCombatStarted",
					"description": "On Combat Started",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnCombatStopped",
					"description": "On Combat Stopped",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnHit",
					"description": "On Hit",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"HasDefaults"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "HitComponent",
							"type": "UPrimitiveComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						},
						{
							"name": "OtherActor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "OtherComp",
							"type": "UPrimitiveComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						},
						{
							"name": "NormalImpulse",
							"type": "FVector",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Hit",
							"type": "const FHitResult&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnLaunch_K2__DelegateSignature",
					"description": "On Launch K2  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnProjectileEvent_K2__DelegateSignature",
					"description": "On Projectile Event K2  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnReachTarget_K2__DelegateSignature",
					"description": "On Reach Target K2  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "Reflect",
					"description": "Reflect",
					"flags": [
						"Native",
						"Event",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InDamageInstigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "InDamage",
							"type": "const FDamageValue&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "ReflectLaunchParameters",
							"type": "const FLaunchParameters&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "RunReachTargetCheck",
					"description": "Run Reach Target Check",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "SetLaunchParameters",
					"description": "Set Launch Parameters",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InLaunchParameters",
							"type": "const FLaunchParameters",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "ACombatProjectile",
					"className": "Combat Projectile",
					"shortTitle": "Set Launch Parameters",
					"fullTitle": "Set Launch Parameters",
					"description": "",
					"imgPath": "../img/nd_img_SetLaunchParameters.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Projectile Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Launch Parameters",
							"type": "Launch Parameters Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ACombatProjectile",
					"className": "Combat Projectile",
					"shortTitle": "Event Reflect",
					"fullTitle": "Event Reflect",
					"description": "Add Event",
					"imgPath": "../img/nd_img_Reflect.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "In Damage Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Damage",
							"type": "Damage Value Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Reflect Launch Parameters",
							"type": "Launch Parameters Structure (by ref)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ACombatProjectile",
					"className": "Combat Projectile",
					"shortTitle": "Reflect",
					"fullTitle": "Reflect",
					"description": "",
					"imgPath": "../img/nd_img_Reflect.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Projectile Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Damage Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Damage",
							"type": "Damage Value Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Reflect Launch Parameters",
							"type": "Launch Parameters Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ACombatProjectile",
					"className": "Combat Projectile",
					"shortTitle": "Event On Combat Hit",
					"fullTitle": "Event On Combat Hit",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnCombatHit.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Hit",
							"type": "Hit Result Structure (by ref)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ACombatProjectile",
					"className": "Combat Projectile",
					"shortTitle": "On Combat Hit",
					"fullTitle": "On Combat Hit",
					"description": "",
					"imgPath": "../img/nd_img_OnCombatHit.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Projectile Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Hit",
							"type": "Hit Result Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ACombatProjectile",
					"className": "Combat Projectile",
					"shortTitle": "Event Launch",
					"fullTitle": "Event Launch",
					"description": "Add Event",
					"imgPath": "../img/nd_img_Launch.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ACombatProjectile",
					"className": "Combat Projectile",
					"shortTitle": "Launch",
					"fullTitle": "Launch",
					"description": "",
					"imgPath": "../img/nd_img_Launch.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Projectile Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ACombatProjectile",
					"className": "Combat Projectile",
					"shortTitle": "Is Relevant",
					"fullTitle": "Is Relevant",
					"description": "",
					"imgPath": "../img/nd_img_IsRelevant.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Projectile Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Relevant"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ACombatProjectile",
					"className": "Combat Projectile",
					"shortTitle": "Is Launched",
					"fullTitle": "Is Launched",
					"description": "",
					"imgPath": "../img/nd_img_IsLaunched.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Projectile Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Launched"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ACombatProjectile",
					"className": "Combat Projectile",
					"shortTitle": "Get Launch Parameters",
					"fullTitle": "Get Launch Parameters",
					"description": "",
					"imgPath": "../img/nd_img_GetLaunchParameters.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Projectile Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Launch Parameters Structure",
							"description": "Get Launch Parameters"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ACombatProjectile",
					"className": "Combat Projectile",
					"shortTitle": "Get Launch Effect",
					"fullTitle": "Get Launch Effect",
					"description": "",
					"imgPath": "../img/nd_img_GetLaunchEffect.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Projectile Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Launch Projectile Effect Object Reference",
							"description": "Get Launch Effect"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ACombatProjectile",
					"className": "Combat Projectile",
					"shortTitle": "Event Explode",
					"fullTitle": "Event Explode",
					"description": "Add Event",
					"imgPath": "../img/nd_img_Explode.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ACombatProjectile",
					"className": "Combat Projectile",
					"shortTitle": "Explode",
					"fullTitle": "Explode",
					"description": "",
					"imgPath": "../img/nd_img_Explode.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Projectile Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ACombatProjectile",
					"className": "Combat Projectile",
					"shortTitle": "Did Reach Target",
					"fullTitle": "Did Reach Target",
					"description": "",
					"imgPath": "../img/nd_img_DidReachTarget.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Projectile Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Did Reach Target"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ACombatProjectile",
					"className": "Combat Projectile",
					"shortTitle": "Can Reflect",
					"fullTitle": "Can Reflect",
					"description": "",
					"imgPath": "../img/nd_img_CanReflect.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Projectile Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Can Reflect"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ACombatProjectile",
					"className": "Combat Projectile",
					"shortTitle": "Can Launch",
					"fullTitle": "Can Launch",
					"description": "",
					"imgPath": "../img/nd_img_CanLaunch.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Projectile Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Can Launch"
						}
					]
				}
			]
		},
		{
			"className": "UReflectProjectileAbility",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect",
				"UCombatAbility",
				"UAttack"
			],
			"path": "Classes/Default/UReflectProjectileAbility",
			"properties": [
				{
					"name": "DistanceScore",
					"type": "FDistanceScore",
					"flags": [
						"Category = ReflectProjectileAbility",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Projectile",
					"type": "TWeakObjectPtr<ACombatProjectile>",
					"flags": [
						"Category = ReflectProjectileAbility",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bReplaceDamage",
					"type": "bool",
					"flags": [
						"Category = ReflectProjectileAbility",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bReplaceLaunchParameters",
					"type": "bool",
					"flags": [
						"Category = ReflectProjectileAbility",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "LaunchParameters",
					"type": "FLaunchParameters",
					"flags": [
						"Category = ReflectProjectileAbility",
						"ModuleRelativePath = Combat/CombatAbility.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "GetReflectDamage",
					"description": "Get Reflect Damage",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FDamageValue",
					"parameters": []
				},
				{
					"name": "GetReflectLaunchParameters",
					"description": "Get Reflect Launch Parameters",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FLaunchParameters",
					"parameters": []
				},
				{
					"name": "GetScore",
					"description": "Get Score",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "float",
					"parameters": []
				},
				{
					"name": "SetProjectile",
					"description": "Set Projectile",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InProjectile",
							"type": "ACombatProjectile*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UReflectProjectileAbility",
					"className": "Reflect Projectile Ability",
					"shortTitle": "Set Projectile",
					"fullTitle": "Set Projectile",
					"description": "",
					"imgPath": "../img/nd_img_SetProjectile.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Reflect Projectile Ability Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Projectile",
							"type": "Combat Projectile Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UReflectProjectileAbility",
					"className": "Reflect Projectile Ability",
					"shortTitle": "Get Score",
					"fullTitle": "Get Score",
					"description": "",
					"imgPath": "../img/nd_img_GetScore.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Reflect Projectile Ability Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Score"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UReflectProjectileAbility",
					"className": "Reflect Projectile Ability",
					"shortTitle": "Get Reflect Launch Parameters",
					"fullTitle": "Get Reflect Launch Parameters",
					"description": "",
					"imgPath": "../img/nd_img_GetReflectLaunchParameters.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Reflect Projectile Ability Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Launch Parameters Structure",
							"description": "Get Reflect Launch Parameters"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UReflectProjectileAbility",
					"className": "Reflect Projectile Ability",
					"shortTitle": "Get Reflect Damage",
					"fullTitle": "Get Reflect Damage",
					"description": "",
					"imgPath": "../img/nd_img_GetReflectDamage.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Reflect Projectile Ability Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Damage Value Structure",
							"description": "Get Reflect Damage"
						}
					]
				}
			]
		},
		{
			"className": "UGameplayTagActorComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UGameplayTagActorComponent",
			"properties": [
				{
					"name": "GameplayTagsAggregate",
					"type": "FGameplayTagsAggregate",
					"flags": [
						"Category = GameplayTagActorComponent",
						"ModuleRelativePath = GameplayTags/GameplayTagContainerComponent.h",
						"ShowOnlyInnerProperties",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "GameplayTagsDebugOptions",
					"type": "FGameplayTagInterfaceDebugOptions",
					"flags": [
						"Category = GameplayTagActorComponent",
						"ModuleRelativePath = GameplayTags/GameplayTagContainerComponent.h",
						"ShowOnlyInnerProperties",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "UCombatComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent",
				"UGameplayTagActorComponent"
			],
			"path": "Classes/Default/UCombatComponent",
			"properties": [
				{
					"name": "bIsInitiator",
					"type": "bool",
					"flags": [
						"Category = CombatComponent",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "CombatInitiator",
					"type": "TObjectPtr<AActor>",
					"flags": [
						"Category = CombatComponent",
						"EditCondition = !bIsInitiator",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "CombatSubsystem",
					"type": "TObjectPtr<UCombatSubsystem>",
					"flags": [
						"Category = CombatComponent",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "GameplayTagContainerComponent",
					"type": "TObjectPtr<UGameplayTagContainerComponent>",
					"flags": [
						"Category = CombatComponent",
						"EditInline = true",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "bRequiresDamageableComponent",
					"type": "bool",
					"flags": [
						"Category = CombatComponent",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bWasRelevant",
					"type": "bool",
					"flags": [
						"Category = CombatComponent",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "bIsAlwaysRelevant",
					"type": "bool",
					"flags": [
						"Category = CombatComponent",
						"Comment = // if true, the component will always be considered relevant to combat\n// otherwise, needs to have CombatInitiator set\n",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"ToolTip = if true, the component will always be considered relevant to combat\notherwise, needs to have CombatInitiator set",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": "if true, the component will always be considered relevant to combat\notherwise, needs to have CombatInitiator set"
				},
				{
					"name": "Effects",
					"type": "TArray",
					"flags": [
						"Category = CombatComponent",
						"EditInline = true",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OnCombatStartedDelegate",
					"type": "FOnCombatStateChanged_K2",
					"flags": [
						"DisplayName = OnStarted",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnCombatStoppedDelegate",
					"type": "FOnCombatStateChanged_K2",
					"flags": [
						"DisplayName = OnStopped",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnStoppedGameplayTagOperation",
					"type": "FGameplayTagOperation",
					"flags": [
						"Category = CombatComponent",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OnCombatPhaseChangedDelegate_K2",
					"type": "FOnCombatStateChanged_K2",
					"flags": [
						"DisplayName = OnPhaseChanged",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnCombatActiveDelegate",
					"type": "FOnCombatStateChanged_K2",
					"flags": [
						"DisplayName = OnCombatActive",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnCombatSuccessDelegate",
					"type": "FOnCombatStateChanged_K2",
					"flags": [
						"DisplayName = OnCombatSuccess",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnCombatFailureDelegate",
					"type": "FOnCombatStateChanged_K2",
					"flags": [
						"DisplayName = OnCombatFailure",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnDisengagedDelegate",
					"type": "FOnCombatStateChanged_K2",
					"flags": [
						"DisplayName = OnDisengaged",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "GetInitiator",
					"description": "Get Initiator",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "AActor*",
					"parameters": []
				},
				{
					"name": "IsEngaged",
					"description": "Is Engaged",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsEngagedInCombat",
					"description": "Is Engaged in Combat",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsInitiator",
					"description": "Is Initiator",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsRelevant",
					"description": "Is Relevant",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "OnCombatActive",
					"description": "On Combat Active",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnCombatFailure",
					"description": "On Combat Failure",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnCombatStateChanged_K2__DelegateSignature",
					"description": "On Combat State Changed K2  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnCombatSuccess",
					"description": "On Combat Success",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnPhaseChanged",
					"description": "On Phase Changed",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnStarted",
					"description": "On Started",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnStopped",
					"description": "On Stopped",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnSubsystemCombatPhaseChanged",
					"description": "On Subsystem Combat Phase Changed",
					"flags": [
						"Native",
						"Protected"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnSubsystemCombatStarted",
					"description": "On Subsystem Combat Started",
					"flags": [
						"Native",
						"Protected"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnSubsystemCombatStopped",
					"description": "On Subsystem Combat Stopped",
					"flags": [
						"Native",
						"Protected"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "Update",
					"description": "Update",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatComponent",
					"className": "Combat Component",
					"shortTitle": "Event Update",
					"fullTitle": "Event Update",
					"description": "Add Event",
					"imgPath": "../img/nd_img_Update.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatComponent",
					"className": "Combat Component",
					"shortTitle": "Update",
					"fullTitle": "Update",
					"description": "",
					"imgPath": "../img/nd_img_Update.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatComponent",
					"className": "Combat Component",
					"shortTitle": "Event On Stopped",
					"fullTitle": "Event On Stopped",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnStopped.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatComponent",
					"className": "Combat Component",
					"shortTitle": "Event On Started",
					"fullTitle": "Event On Started",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnStarted.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatComponent",
					"className": "Combat Component",
					"shortTitle": "Event On Phase Changed",
					"fullTitle": "Event On Phase Changed",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnPhaseChanged.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatComponent",
					"className": "Combat Component",
					"shortTitle": "Event On Combat Success",
					"fullTitle": "Event On Combat Success",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnCombatSuccess.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatComponent",
					"className": "Combat Component",
					"shortTitle": "Event On Combat Failure",
					"fullTitle": "Event On Combat Failure",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnCombatFailure.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatComponent",
					"className": "Combat Component",
					"shortTitle": "Event On Combat Active",
					"fullTitle": "Event On Combat Active",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnCombatActive.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatComponent",
					"className": "Combat Component",
					"shortTitle": "Is Relevant",
					"fullTitle": "Is Relevant",
					"description": "",
					"imgPath": "../img/nd_img_IsRelevant.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Relevant"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatComponent",
					"className": "Combat Component",
					"shortTitle": "Is Initiator",
					"fullTitle": "Is Initiator",
					"description": "",
					"imgPath": "../img/nd_img_IsInitiator.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Initiator"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatComponent",
					"className": "Combat Component",
					"shortTitle": "Is Engaged in Combat",
					"fullTitle": "Is Engaged in Combat",
					"description": "",
					"imgPath": "../img/nd_img_IsEngagedInCombat.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Engaged in Combat"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatComponent",
					"className": "Combat Component",
					"shortTitle": "Is Engaged",
					"fullTitle": "Is Engaged",
					"description": "",
					"imgPath": "../img/nd_img_IsEngaged.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Engaged"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatComponent",
					"className": "Combat Component",
					"shortTitle": "Get Initiator",
					"fullTitle": "Get Initiator",
					"description": "",
					"imgPath": "../img/nd_img_GetInitiator.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Actor Object Reference",
							"description": "Get Initiator"
						}
					]
				}
			]
		},
		{
			"className": "UCombatParticipantComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent",
				"UGameplayTagActorComponent",
				"UCombatComponent"
			],
			"path": "Classes/Default/UCombatParticipantComponent",
			"properties": [
				{
					"name": "bIsCritical",
					"type": "bool",
					"flags": [
						"Category = CombatParticipantComponent",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "MobData",
					"type": "TObjectPtr<UMobData>",
					"flags": [
						"Category = CombatParticipantComponent",
						"EditInline = true",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Abilities",
					"type": "TArray",
					"flags": [
						"Category = CombatParticipantComponent",
						"EditInline = true",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"TitleProperty = AbilityTag",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "CurrentAbility",
					"type": "TObjectPtr<UCombatAbility>",
					"flags": [
						"Category = CombatParticipantComponent",
						"EditInline = true",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "bCanActivateAbilities",
					"type": "bool",
					"flags": [
						"Category = CombatParticipantComponent",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "ActivateAbility",
					"description": "Activate Ability",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "AbilityTag",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Categories = Combat.Abilities",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "ActivateCurrentAbility",
					"description": "Activate Current Ability",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "AddAbility",
					"description": "Add Ability",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Ability",
							"type": "UCombatAbility*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "DeactivateAbility",
					"description": "Deactivate Ability",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "AbilityTag",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "Disengage",
					"description": "Disengage",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "FindAbility",
					"description": "Find Ability",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UCombatAbility*",
					"parameters": [
						{
							"name": "AbilityRequirements",
							"type": "FGameplayTagRequirements",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "FindNextAbility",
					"description": "Find Next Ability",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "UCombatAbility*",
					"parameters": []
				},
				{
					"name": "GetAbility",
					"description": "Get Ability",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UCombatAbility*",
					"parameters": [
						{
							"name": "AbilityTag",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetAbilityDefault",
					"description": "Get Ability Default",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UCombatAbility*",
					"parameters": []
				},
				{
					"name": "GetTeam",
					"description": "Get Team",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "ECombatTeam",
					"parameters": []
				},
				{
					"name": "IsDefeated",
					"description": "Is Defeated",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "OnAbilityStopped",
					"description": "On Ability Stopped",
					"flags": [
						"Final",
						"Native",
						"Protected"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Effect",
							"type": "UEffect*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnDefeated",
					"description": "On Defeated",
					"flags": [
						"Final",
						"Native",
						"Protected",
						"HasOutParams"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Event",
							"type": "const FActorDamageEvent&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnDisengaged",
					"description": "On Disengaged",
					"flags": [
						"Native",
						"Event",
						"Protected",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnSubsystemDisengaged",
					"description": "On Subsystem Disengaged",
					"flags": [
						"Native",
						"Protected"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "QueueNextAbility",
					"description": "Queue Next Ability",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "SetCanActivateAbilities",
					"description": "Set Can Activate Abilities",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bInCanActivateAbilities",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetCurrentAbility",
					"description": "Set Current Ability",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Ability",
							"type": "UCombatAbility*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetIsCriticalState",
					"description": "Set Is Critical State",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bInIsCritical",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetNextCurrentAbility",
					"description": "Set Next Current Ability",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "StopCombat",
					"description": "Stop Combat",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatParticipantComponent",
					"className": "Combat Participant Component",
					"shortTitle": "Stop Combat",
					"fullTitle": "Stop Combat",
					"description": "",
					"imgPath": "../img/nd_img_StopCombat.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Participant Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Stop Combat"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatParticipantComponent",
					"className": "Combat Participant Component",
					"shortTitle": "Set Next Current Ability",
					"fullTitle": "Set Next Current Ability",
					"description": "",
					"imgPath": "../img/nd_img_SetNextCurrentAbility.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Participant Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatParticipantComponent",
					"className": "Combat Participant Component",
					"shortTitle": "Set Is Critical State",
					"fullTitle": "Set Is Critical State",
					"description": "",
					"imgPath": "../img/nd_img_SetIsCriticalState.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Participant Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Is Critical",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatParticipantComponent",
					"className": "Combat Participant Component",
					"shortTitle": "Set Current Ability",
					"fullTitle": "Set Current Ability",
					"description": "",
					"imgPath": "../img/nd_img_SetCurrentAbility.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Participant Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Ability",
							"type": "Combat Ability Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatParticipantComponent",
					"className": "Combat Participant Component",
					"shortTitle": "Set Can Activate Abilities",
					"fullTitle": "Set Can Activate Abilities",
					"description": "",
					"imgPath": "../img/nd_img_SetCanActivateAbilities.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Participant Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Can Activate Abilities",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatParticipantComponent",
					"className": "Combat Participant Component",
					"shortTitle": "Queue Next Ability",
					"fullTitle": "Queue Next Ability",
					"description": "",
					"imgPath": "../img/nd_img_QueueNextAbility.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Participant Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatParticipantComponent",
					"className": "Combat Participant Component",
					"shortTitle": "Event On Disengaged",
					"fullTitle": "Event On Disengaged",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnDisengaged.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatParticipantComponent",
					"className": "Combat Participant Component",
					"shortTitle": "Is Defeated",
					"fullTitle": "Is Defeated",
					"description": "",
					"imgPath": "../img/nd_img_IsDefeated.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Participant Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Defeated"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatParticipantComponent",
					"className": "Combat Participant Component",
					"shortTitle": "Get Team",
					"fullTitle": "Get Team",
					"description": "",
					"imgPath": "../img/nd_img_GetTeam.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Participant Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "ECombatTeam Enum",
							"description": "Get Team"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatParticipantComponent",
					"className": "Combat Participant Component",
					"shortTitle": "Get Ability Default",
					"fullTitle": "Get Ability Default",
					"description": "",
					"imgPath": "../img/nd_img_GetAbilityDefault.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Participant Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Combat Ability Object Reference",
							"description": "Get Ability Default"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatParticipantComponent",
					"className": "Combat Participant Component",
					"shortTitle": "Get Ability",
					"fullTitle": "Get Ability",
					"description": "",
					"imgPath": "../img/nd_img_GetAbility.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Participant Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Ability Tag",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Combat Ability Object Reference",
							"description": "Get Ability"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatParticipantComponent",
					"className": "Combat Participant Component",
					"shortTitle": "Find Next Ability",
					"fullTitle": "Find Next Ability",
					"description": "",
					"imgPath": "../img/nd_img_FindNextAbility.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Participant Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Combat Ability Object Reference",
							"description": "Find Next Ability"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatParticipantComponent",
					"className": "Combat Participant Component",
					"shortTitle": "Find Ability",
					"fullTitle": "Find Ability",
					"description": "",
					"imgPath": "../img/nd_img_FindAbility.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Participant Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Ability Requirements",
							"type": "Gameplay Tag Requirements Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Combat Ability Object Reference",
							"description": "Find Ability"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatParticipantComponent",
					"className": "Combat Participant Component",
					"shortTitle": "Disengage",
					"fullTitle": "Disengage",
					"description": "",
					"imgPath": "../img/nd_img_Disengage.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Participant Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatParticipantComponent",
					"className": "Combat Participant Component",
					"shortTitle": "Deactivate Ability",
					"fullTitle": "Deactivate Ability",
					"description": "",
					"imgPath": "../img/nd_img_DeactivateAbility.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Participant Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Ability Tag",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatParticipantComponent",
					"className": "Combat Participant Component",
					"shortTitle": "Add Ability",
					"fullTitle": "Add Ability",
					"description": "",
					"imgPath": "../img/nd_img_AddAbility.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Participant Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Ability",
							"type": "Combat Ability Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatParticipantComponent",
					"className": "Combat Participant Component",
					"shortTitle": "Activate Current Ability",
					"fullTitle": "Activate Current Ability",
					"description": "",
					"imgPath": "../img/nd_img_ActivateCurrentAbility.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Participant Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatParticipantComponent",
					"className": "Combat Participant Component",
					"shortTitle": "Activate Ability",
					"fullTitle": "Activate Ability",
					"description": "",
					"imgPath": "../img/nd_img_ActivateAbility.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Participant Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Ability Tag",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UCombatInitiatorComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent",
				"UGameplayTagActorComponent",
				"UCombatComponent",
				"UCombatParticipantComponent"
			],
			"path": "Classes/Default/UCombatInitiatorComponent",
			"properties": [
				{
					"name": "CombatContext",
					"type": "TObjectPtr<UCombatContext>",
					"flags": [
						"Category = CombatInitiatorComponent",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "CombatTriggerTarget",
					"type": "FCombatTarget",
					"flags": [
						"Category = CombatInitiatorComponent",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ArenaPadding",
					"type": "FVector",
					"flags": [
						"Category = CombatInitiatorComponent",
						"ClampMin = 0",
						"Delta = 10",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"UIMax = 10000",
						"UIMin = 0",
						"Units = cm",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ArenaMinSize",
					"type": "FVector",
					"flags": [
						"Category = CombatInitiatorComponent",
						"ClampMin = 0",
						"Delta = 10",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatComponent.h",
						"UIMax = 10000",
						"UIMin = 0",
						"Units = cm",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "InitiateCombat",
					"description": "Initiate Combat",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatInitiatorComponent",
					"className": "Combat Initiator Component",
					"shortTitle": "Initiate Combat",
					"fullTitle": "Initiate Combat",
					"description": "",
					"imgPath": "../img/nd_img_InitiateCombat.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Initiator Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Initiate Combat"
						}
					]
				}
			]
		},
		{
			"className": "UCombatContext",
			"classHierarchy": [
				"UObject"
			],
			"path": "Classes/Default/UCombatContext",
			"properties": [
				{
					"name": "CombatPhase",
					"type": "FGameplayTag",
					"flags": [
						"Categories = Combat.Phase",
						"Category = CombatContext",
						"ModuleRelativePath = Combat/CombatSubsystem.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "Initiator",
					"type": "TWeakObjectPtr<AActor>",
					"flags": [
						"Category = CombatContext",
						"ModuleRelativePath = Combat/CombatSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "RelevantActors",
					"type": "TArray",
					"flags": [
						"Category = CombatContext",
						"ModuleRelativePath = Combat/CombatSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ActorsEngaged",
					"type": "TSet",
					"flags": [
						"Category = CombatContext",
						"ModuleRelativePath = Combat/CombatSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ArenaData",
					"type": "FArenaData",
					"flags": [
						"Category = CombatContext",
						"ModuleRelativePath = Combat/CombatSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "EventLog",
					"type": "TArray",
					"flags": [
						"Category = CombatContext",
						"ModuleRelativePath = Combat/CombatSubsystem.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "bDebugEnabled",
					"type": "bool",
					"flags": [
						"Category = CombatContext",
						"ModuleRelativePath = Combat/CombatSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "AddToTeam",
					"description": "Add to Team",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Team",
							"type": "ECombatTeam",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "CreateDefaultContext",
					"description": "Create Default Context",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "UCombatContext*",
					"parameters": [
						{
							"name": "InOuter",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "InInitiator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "InArenaData",
							"type": "FArenaData",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetActors",
					"description": "Get Actors",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "TArray",
					"parameters": [
						{
							"name": "CombatActorFilter",
							"type": "ECombatFilter",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "IsValidContext",
					"description": "Is Valid Context",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatContext",
					"className": "Combat Context",
					"shortTitle": "Is Valid Context",
					"fullTitle": "Is Valid Context",
					"description": "",
					"imgPath": "../img/nd_img_IsValidContext.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Context Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Valid Context"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatContext",
					"className": "Combat Context",
					"shortTitle": "Get Actors",
					"fullTitle": "Get Actors",
					"description": "",
					"imgPath": "../img/nd_img_GetActors.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Context Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Combat Actor Filter",
							"type": "ECombatFilter Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Array of Actor Object References",
							"description": "Get Actors"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatContext",
					"className": "Combat Context",
					"shortTitle": "Create Default Context",
					"fullTitle": "Create Default Context",
					"description": "",
					"imgPath": "../img/nd_img_CreateDefaultContext.png",
					"inputs": [
						{
							"name": "In Outer",
							"type": "Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Initiator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Arena Data",
							"type": "Arena Data Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Combat Context Object Reference",
							"description": "Create Default Context"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatContext",
					"className": "Combat Context",
					"shortTitle": "Add to Team",
					"fullTitle": "Add to Team",
					"description": "",
					"imgPath": "../img/nd_img_AddToTeam.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Context Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Team",
							"type": "ECombatTeam Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UCombatSubsystem",
			"classHierarchy": [
				"UObject",
				"USubsystem",
				"UWorldSubsystem",
				"UTickableWorldSubsystem",
				"UWorldModeSubsystem"
			],
			"path": "Classes/Default/UCombatSubsystem",
			"properties": [
				{
					"name": "CombatContext",
					"type": "TObjectPtr<UCombatContext>",
					"flags": [
						"Category = CombatSubsystem",
						"ModuleRelativePath = Combat/CombatSubsystem.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "OnEventLogChangedDelegate_K2",
					"type": "FOnEventLogChanged_K2",
					"flags": [
						"DisplayName = OnEventLogChanged",
						"ModuleRelativePath = Combat/CombatSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnPhaseChangedDelegate_K2",
					"type": "FOnCombatPhaseChanged_K2",
					"flags": [
						"DisplayName = OnCombatPhaseChanged",
						"ModuleRelativePath = Combat/CombatSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnActorDefeatedDelegate_K2",
					"type": "FOnDisengageActor_K2",
					"flags": [
						"DisplayName = OnActorDefeated",
						"ModuleRelativePath = Combat/CombatSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "AddActorToCombat",
					"description": "Add Actor to Combat",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "AddActorToTeam",
					"description": "adds actor to team and combat",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Team",
							"type": "ECombatTeam",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "ClearLog",
					"description": "Clear Log",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"Const"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "Defeat",
					"description": "Defeat",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetActors",
					"description": "Get Actors",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "TArray",
					"parameters": [
						{
							"name": "Filter",
							"type": "ECombatFilter",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetArenaBounds_K2",
					"description": "Get Arena Bounds K2",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Origin",
							"type": "FVector",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						},
						{
							"name": "BoxExtent",
							"type": "FVector",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						},
						{
							"name": "Bounds",
							"type": "FBox",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						}
					]
				},
				{
					"name": "GetArenaData",
					"description": "Get Arena Data",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "ArenaData",
							"type": "FArenaData",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						}
					]
				},
				{
					"name": "GetCombatPhase",
					"description": "Get Combat Phase",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FGameplayTag",
					"parameters": []
				},
				{
					"name": "GetCriticalActors",
					"description": "Get Critical Actors",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "TArray",
					"parameters": [
						{
							"name": "Team",
							"type": "ECombatTeam",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Filter",
							"type": "ECombatFilter",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetDefaultCombatant",
					"description": "get default target from team",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "AActor*",
					"parameters": [
						{
							"name": "Team",
							"type": "ECombatTeam",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetEngagedActors",
					"description": "Get Engaged Actors",
					"flags": [
						"Final",
						"Native",
						"Protected",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "TArray",
					"parameters": []
				},
				{
					"name": "GetFirstCombatant",
					"description": "get first active target from team",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "AActor*",
					"parameters": [
						{
							"name": "Team",
							"type": "ECombatTeam",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetFirstCriticalCombatant",
					"description": "get first critical target from team",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "AActor*",
					"parameters": [
						{
							"name": "Team",
							"type": "ECombatTeam",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetInitiator",
					"description": "Get Initiator",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "AActor*",
					"parameters": []
				},
				{
					"name": "GetNonCriticalActors",
					"description": "Get Non Critical Actors",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "TArray",
					"parameters": [
						{
							"name": "Team",
							"type": "ECombatTeam",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Filter",
							"type": "ECombatFilter",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetPlayerCombatant",
					"description": "Get Player Combatant",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "AActor*",
					"parameters": []
				},
				{
					"name": "GetRandomCombatant",
					"description": "get random active target from team",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "AActor*",
					"parameters": [
						{
							"name": "Team",
							"type": "ECombatTeam",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetRandomCriticalCombatant",
					"description": "get random critical target from team",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "AActor*",
					"parameters": [
						{
							"name": "Team",
							"type": "ECombatTeam",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetRandomNonCriticalCombatant",
					"description": "get first non-critical target from team",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "AActor*",
					"parameters": [
						{
							"name": "Team",
							"type": "ECombatTeam",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetRelevantActors",
					"description": "Get Relevant Actors",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "TArray",
					"parameters": [
						{
							"name": "Filter",
							"type": "ECombatFilter",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetTeamActors_K2",
					"description": "Get Team Actors K2",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "TArray",
					"parameters": [
						{
							"name": "Team",
							"type": "ECombatTeam",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Filter",
							"type": "ECombatFilter",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "HasValidCombatContext",
					"description": "Has Valid Combat Context",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsCombatActive",
					"description": "Is Combat Active",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsCombatComplete",
					"description": "Is Combat Complete",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsCombatFailure",
					"description": "Is Combat Failure",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsCombatSuccess",
					"description": "Is Combat Success",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsCritical",
					"description": "Is Critical",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Actor",
							"type": "const AActor*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "IsDefeated",
					"description": "Is Defeated",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "IsEngagedInCombat",
					"description": "Is Engaged in Combat",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "IsRelevant",
					"description": "Is Relevant",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Filter",
							"type": "ECombatFilter",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "IsTeamDefeated",
					"description": "Is Team Defeated",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Team",
							"type": "ECombatTeam",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "IsValidPhaseTransition",
					"description": "Is Valid Phase Transition",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "NewPhase",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Categories = Combat.Phase",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "LogEvent",
					"description": "Log Event",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Event",
							"type": "const FActorDamageEvent&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnActorDefeated",
					"description": "On Actor Defeated",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Event",
							"type": "const FActorDamageEvent&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnCombatPhaseChanged_K2__DelegateSignature",
					"description": "On Combat Phase Changed K2  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnDisengageActor_K2__DelegateSignature",
					"description": "On Disengage Actor K2  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnEventLogChanged_K2__DelegateSignature",
					"description": "On Event Log Changed K2  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "ParticipantToString",
					"description": "Participant to String",
					"flags": [
						"Final",
						"Native",
						"Protected",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FString",
					"parameters": [
						{
							"name": "Participant",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetCombatPhase",
					"description": "Set Combat Phase",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InCombatPhase",
							"type": "const FGameplayTag",
							"description": "",
							"flags": [
								"Categories = Combat.Phase",
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "StartCombat",
					"description": "Start Combat",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "InCombatContext",
							"type": "UCombatContext*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "StopCombat",
					"description": "Stop Combat",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "TeamActorsToString",
					"description": "Team Actors to String",
					"flags": [
						"Final",
						"Native",
						"Protected",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FString",
					"parameters": [
						{
							"name": "Team",
							"type": "const ECombatTeam",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "ToString",
					"description": "To String",
					"flags": [
						"Final",
						"Native",
						"Protected",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FString",
					"parameters": []
				},
				{
					"name": "Update",
					"description": "Update",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Update",
					"fullTitle": "Update",
					"description": "",
					"imgPath": "../img/nd_img_Update.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "To String",
					"fullTitle": "To String",
					"description": "",
					"imgPath": "../img/nd_img_ToString.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "String",
							"description": "To String"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Team Actors to String",
					"fullTitle": "Team Actors to String",
					"description": "",
					"imgPath": "../img/nd_img_TeamActorsToString.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Team",
							"type": "ECombatTeam Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "String",
							"description": "Team Actors to String"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Stop Combat",
					"fullTitle": "Stop Combat",
					"description": "",
					"imgPath": "../img/nd_img_StopCombat.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Stop Combat"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Start Combat",
					"fullTitle": "Start Combat",
					"description": "",
					"imgPath": "../img/nd_img_StartCombat.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Combat Context",
							"type": "Combat Context Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Start Combat"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Set Combat Phase",
					"fullTitle": "Set Combat Phase",
					"description": "",
					"imgPath": "../img/nd_img_SetCombatPhase.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Combat Phase",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Participant to String",
					"fullTitle": "Participant to String",
					"description": "",
					"imgPath": "../img/nd_img_ParticipantToString.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Participant",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "String",
							"description": "Participant to String"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Log Event",
					"fullTitle": "Log Event",
					"description": "",
					"imgPath": "../img/nd_img_LogEvent.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Event",
							"type": "Actor Damage Event Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Is Valid Phase Transition",
					"fullTitle": "Is Valid Phase Transition",
					"description": "",
					"imgPath": "../img/nd_img_IsValidPhaseTransition.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Phase",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Valid Phase Transition"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Is Team Defeated",
					"fullTitle": "Is Team Defeated",
					"description": "",
					"imgPath": "../img/nd_img_IsTeamDefeated.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Team",
							"type": "ECombatTeam Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Team Defeated"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Is Relevant",
					"fullTitle": "Is Relevant",
					"description": "",
					"imgPath": "../img/nd_img_IsRelevant.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Filter",
							"type": "ECombatFilter Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Relevant"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Is Engaged in Combat",
					"fullTitle": "Is Engaged in Combat",
					"description": "",
					"imgPath": "../img/nd_img_IsEngagedInCombat.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Engaged in Combat"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Is Defeated",
					"fullTitle": "Is Defeated",
					"description": "",
					"imgPath": "../img/nd_img_IsDefeated.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Defeated"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Is Critical",
					"fullTitle": "Is Critical",
					"description": "",
					"imgPath": "../img/nd_img_IsCritical.png",
					"inputs": [
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Critical"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Is Combat Success",
					"fullTitle": "Is Combat Success",
					"description": "",
					"imgPath": "../img/nd_img_IsCombatSuccess.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Combat Success"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Is Combat Failure",
					"fullTitle": "Is Combat Failure",
					"description": "",
					"imgPath": "../img/nd_img_IsCombatFailure.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Combat Failure"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Is Combat Complete",
					"fullTitle": "Is Combat Complete",
					"description": "",
					"imgPath": "../img/nd_img_IsCombatComplete.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Combat Complete"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Is Combat Active",
					"fullTitle": "Is Combat Active",
					"description": "",
					"imgPath": "../img/nd_img_IsCombatActive.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Combat Active"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Has Valid Combat Context",
					"fullTitle": "Has Valid Combat Context",
					"description": "",
					"imgPath": "../img/nd_img_HasValidCombatContext.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Has Valid Combat Context"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Get Team Actors",
					"fullTitle": "Get Team Actors",
					"description": "",
					"imgPath": "../img/nd_img_GetTeamActors_K2.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Team",
							"type": "ECombatTeam Enum",
							"description": "$no_comments"
						},
						{
							"name": "Filter",
							"type": "ECombatFilter Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Array of Actor Object References",
							"description": "Get Team Actors K2"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Get Relevant Actors",
					"fullTitle": "Get Relevant Actors",
					"description": "",
					"imgPath": "../img/nd_img_GetRelevantActors.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Filter",
							"type": "ECombatFilter Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Array of Actor Object References",
							"description": "Get Relevant Actors"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Get Random Non Critical Combatant",
					"fullTitle": "Get Random Non Critical Combatant",
					"description": "",
					"imgPath": "../img/nd_img_GetRandomNonCriticalCombatant.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Team",
							"type": "ECombatTeam Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Actor Object Reference",
							"description": "get first non-critical target from team"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Get Random Critical Combatant",
					"fullTitle": "Get Random Critical Combatant",
					"description": "",
					"imgPath": "../img/nd_img_GetRandomCriticalCombatant.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Team",
							"type": "ECombatTeam Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Actor Object Reference",
							"description": "get random critical target from team"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Get Random Combatant",
					"fullTitle": "Get Random Combatant",
					"description": "",
					"imgPath": "../img/nd_img_GetRandomCombatant.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Team",
							"type": "ECombatTeam Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Actor Object Reference",
							"description": "get random active target from team"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Get Player Combatant",
					"fullTitle": "Get Player Combatant",
					"description": "",
					"imgPath": "../img/nd_img_GetPlayerCombatant.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Actor Object Reference",
							"description": "Get Player Combatant"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Get Non Critical Actors",
					"fullTitle": "Get Non Critical Actors",
					"description": "",
					"imgPath": "../img/nd_img_GetNonCriticalActors.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Team",
							"type": "ECombatTeam Enum",
							"description": "$no_comments"
						},
						{
							"name": "Filter",
							"type": "ECombatFilter Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Array of Actor Object References",
							"description": "Get Non Critical Actors"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Get Initiator",
					"fullTitle": "Get Initiator",
					"description": "",
					"imgPath": "../img/nd_img_GetInitiator.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Actor Object Reference",
							"description": "Get Initiator"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Get First Critical Combatant",
					"fullTitle": "Get First Critical Combatant",
					"description": "",
					"imgPath": "../img/nd_img_GetFirstCriticalCombatant.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Team",
							"type": "ECombatTeam Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Actor Object Reference",
							"description": "get first critical target from team"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Get First Combatant",
					"fullTitle": "Get First Combatant",
					"description": "",
					"imgPath": "../img/nd_img_GetFirstCombatant.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Team",
							"type": "ECombatTeam Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Actor Object Reference",
							"description": "get first active target from team"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Get Engaged Actors",
					"fullTitle": "Get Engaged Actors",
					"description": "",
					"imgPath": "../img/nd_img_GetEngagedActors.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Array of Actor Object References",
							"description": "Get Engaged Actors"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Get Default Combatant",
					"fullTitle": "Get Default Combatant",
					"description": "",
					"imgPath": "../img/nd_img_GetDefaultCombatant.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Team",
							"type": "ECombatTeam Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Actor Object Reference",
							"description": "get default target from team"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Get Critical Actors",
					"fullTitle": "Get Critical Actors",
					"description": "",
					"imgPath": "../img/nd_img_GetCriticalActors.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Team",
							"type": "ECombatTeam Enum",
							"description": "$no_comments"
						},
						{
							"name": "Filter",
							"type": "ECombatFilter Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Array of Actor Object References",
							"description": "Get Critical Actors"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Get Combat Phase",
					"fullTitle": "Get Combat Phase",
					"description": "",
					"imgPath": "../img/nd_img_GetCombatPhase.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Gameplay Tag Structure",
							"description": "Get Combat Phase"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Get Arena Data",
					"fullTitle": "Get Arena Data",
					"description": "",
					"imgPath": "../img/nd_img_GetArenaData.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Arena Data",
							"type": "Arena Data Structure",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Get Arena Data"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Get Arena Bounds",
					"fullTitle": "Get Arena Bounds",
					"description": "",
					"imgPath": "../img/nd_img_GetArenaBounds_K2.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Origin",
							"type": "Vector",
							"description": "$no_comments"
						},
						{
							"name": "Box Extent",
							"type": "Vector",
							"description": "$no_comments"
						},
						{
							"name": "Bounds",
							"type": "Box Structure",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Get Arena Bounds K2"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Get Actors",
					"fullTitle": "Get Actors",
					"description": "",
					"imgPath": "../img/nd_img_GetActors.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Filter",
							"type": "ECombatFilter Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Array of Actor Object References",
							"description": "Get Actors"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Defeat",
					"fullTitle": "Defeat",
					"description": "",
					"imgPath": "../img/nd_img_Defeat.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Defeat"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Clear Log",
					"fullTitle": "Clear Log",
					"description": "",
					"imgPath": "../img/nd_img_ClearLog.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Add Actor to Team",
					"fullTitle": "Add Actor to Team",
					"description": "",
					"imgPath": "../img/nd_img_AddActorToTeam.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Team",
							"type": "ECombatTeam Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatSubsystem",
					"className": "Combat Subsystem",
					"shortTitle": "Add Actor to Combat",
					"fullTitle": "Add Actor to Combat",
					"description": "",
					"imgPath": "../img/nd_img_AddActorToCombat.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UCombatAbility2",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect"
			],
			"path": "Classes/Default/UCombatAbility2",
			"properties": [],
			"functions": []
		},
		{
			"className": "UCombatTargetUtil",
			"classHierarchy": [
				"UObject",
				"UBlueprintFunctionLibrary"
			],
			"path": "Classes/Default/UCombatTargetUtil",
			"properties": [],
			"functions": [
				{
					"name": "ActorToTarget",
					"description": "Actor to Target",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FCombatTarget",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "AsLocationTarget",
					"description": "As Location Target",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "FCombatTarget",
					"parameters": [
						{
							"name": "Target",
							"type": "FCombatTarget",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						}
					]
				},
				{
					"name": "BreakTarget",
					"description": "Break Target",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Target",
							"type": "const FCombatTarget&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "bIsEnabled",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						},
						{
							"name": "bUseActor",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						},
						{
							"name": "TargetActor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						},
						{
							"name": "TargetLocation",
							"type": "FVector",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						},
						{
							"name": "bUseTargetActorTagRequirements",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						},
						{
							"name": "TargetActorRequirements",
							"type": "FGameplayTagRequirements",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						}
					]
				},
				{
					"name": "DoesMeetRequirements",
					"description": "Does Meet Requirements",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Target",
							"type": "const FCombatTarget&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetTargetActor",
					"description": "Get Target Actor",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "AActor*",
					"parameters": [
						{
							"name": "Target",
							"type": "const FCombatTarget&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "GetTargetLocation",
					"description": "Get Target Location",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FVector",
					"parameters": [
						{
							"name": "Target",
							"type": "const FCombatTarget&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "GetValidTargetActor",
					"description": "Get Valid Target Actor",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "AActor*",
					"parameters": [
						{
							"name": "Target",
							"type": "const FCombatTarget&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "bIsValid",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						}
					]
				},
				{
					"name": "GetValidTargetLocation",
					"description": "Get Valid Target Location",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "FVector",
					"parameters": [
						{
							"name": "Target",
							"type": "const FCombatTarget&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "bIsValid",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						}
					]
				},
				{
					"name": "IsValidTarget",
					"description": "Is Valid Target",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Target",
							"type": "const FCombatTarget&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "Reason",
							"type": "FString",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						}
					]
				},
				{
					"name": "LocationToTarget",
					"description": "Location to Target",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FCombatTarget",
					"parameters": [
						{
							"name": "Location",
							"type": "FVector",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "MakeTarget",
					"description": "Make Target",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FCombatTarget",
					"parameters": [
						{
							"name": "bIsEnabled",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bUseActor",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "TargetActor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "TargetLocation",
							"type": "const FVector",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bUseTargetActorTagRequirements",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "TargetActorRequirements",
							"type": "FGameplayTagRequirements",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "TargetToActor",
					"description": "Target to Actor",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "AActor*",
					"parameters": [
						{
							"name": "Target",
							"type": "const FCombatTarget&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "TargetToLocation",
					"description": "Target to Location",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FVector",
					"parameters": [
						{
							"name": "Target",
							"type": "const FCombatTarget&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "TargetToString",
					"description": "Target to String",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FString",
					"parameters": [
						{
							"name": "Target",
							"type": "const FCombatTarget&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "ToString",
					"description": "To String",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FString",
					"parameters": [
						{
							"name": "Target",
							"type": "const FCombatTarget&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatTargetUtil",
					"className": "Combat Target Util",
					"shortTitle": "To String",
					"fullTitle": "To String",
					"description": "",
					"imgPath": "../img/nd_img_ToString.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Target Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "String",
							"description": "To String"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatTargetUtil",
					"className": "Combat Target Util",
					"shortTitle": "Make Target",
					"fullTitle": "Make Target",
					"description": "",
					"imgPath": "../img/nd_img_MakeTarget.png",
					"inputs": [
						{
							"name": "Is Enabled",
							"type": "Boolean",
							"description": "$no_comments"
						},
						{
							"name": "Use Actor",
							"type": "Boolean",
							"description": "$no_comments"
						},
						{
							"name": "Target Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Target Location",
							"type": "Vector",
							"description": "$no_comments"
						},
						{
							"name": "Use Target Actor Tag Requirements",
							"type": "Boolean",
							"description": "$no_comments"
						},
						{
							"name": "Target Actor Requirements",
							"type": "Gameplay Tag Requirements Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Combat Target Structure",
							"description": "Make Target"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatTargetUtil",
					"className": "Combat Target Util",
					"shortTitle": "Is Valid Target",
					"fullTitle": "Is Valid Target",
					"description": "",
					"imgPath": "../img/nd_img_IsValidTarget.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Target Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Reason",
							"type": "String",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Valid Target"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatTargetUtil",
					"className": "Combat Target Util",
					"shortTitle": "Get Valid Target Location",
					"fullTitle": "Get Valid Target Location",
					"description": "",
					"imgPath": "../img/nd_img_GetValidTargetLocation.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Target Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "True",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "False",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Vector",
							"description": "Get Valid Target Location"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatTargetUtil",
					"className": "Combat Target Util",
					"shortTitle": "Get Valid Target Actor",
					"fullTitle": "Get Valid Target Actor",
					"description": "",
					"imgPath": "../img/nd_img_GetValidTargetActor.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Target Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "True",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "False",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Actor Object Reference",
							"description": "Get Valid Target Actor"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatTargetUtil",
					"className": "Combat Target Util",
					"shortTitle": "Get Target Location",
					"fullTitle": "Get Target Location",
					"description": "",
					"imgPath": "../img/nd_img_GetTargetLocation.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Target Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Vector",
							"description": "Get Target Location"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatTargetUtil",
					"className": "Combat Target Util",
					"shortTitle": "Get Target Actor",
					"fullTitle": "Get Target Actor",
					"description": "",
					"imgPath": "../img/nd_img_GetTargetActor.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Target Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Actor Object Reference",
							"description": "Get Target Actor"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatTargetUtil",
					"className": "Combat Target Util",
					"shortTitle": "Does Meet Requirements",
					"fullTitle": "Does Meet Requirements",
					"description": "",
					"imgPath": "../img/nd_img_DoesMeetRequirements.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Target Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Does Meet Requirements"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatTargetUtil",
					"className": "Combat Target Util",
					"shortTitle": "Break Target",
					"fullTitle": "Break Target",
					"description": "",
					"imgPath": "../img/nd_img_BreakTarget.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Combat Target Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Is Enabled",
							"type": "Boolean",
							"description": "$no_comments"
						},
						{
							"name": "Use Actor",
							"type": "Boolean",
							"description": "$no_comments"
						},
						{
							"name": "Target Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Target Location",
							"type": "Vector",
							"description": "$no_comments"
						},
						{
							"name": "Use Target Actor Tag Requirements",
							"type": "Boolean",
							"description": "$no_comments"
						},
						{
							"name": "Target Actor Requirements",
							"type": "Gameplay Tag Requirements Structure",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatTargetUtil",
					"className": "Combat Target Util",
					"shortTitle": "As Location Target",
					"fullTitle": "As Location Target",
					"description": "",
					"imgPath": "../img/nd_img_AsLocationTarget.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Combat Target Structure",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Combat Target Structure",
							"description": "As Location Target"
						}
					]
				}
			]
		},
		{
			"className": "UCombatUtil",
			"classHierarchy": [
				"UObject",
				"UBlueprintFunctionLibrary"
			],
			"path": "Classes/Default/UCombatUtil",
			"properties": [],
			"functions": [
				{
					"name": "EnsureIsValidTeam",
					"description": "Ensure Is Valid Team",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Team",
							"type": "ECombatTeam",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Subject",
							"type": "const UObject*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "EnsureIsValidTeamTag",
					"description": "Ensure Is Valid Team Tag",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "TeamTag",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Categories = Combat.Team",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetActorTeam",
					"description": "UFUNCTION(BlueprintPure, meta=(BlueprintAutocast))\nstatic ECombatTeam ToTeam(UPARAM(meta=(Categories=\"Combat.Team\")) FGameplayTag TeamTag)\n{\n      return UCombatSubsystem::ToTeam(TeamTag);",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "ECombatTeam",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetOtherTeam",
					"description": "e.g. GetOtherTeamTag(\"Enemy\") -> \"Player\"",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "ECombatTeam",
					"parameters": [
						{
							"name": "Team",
							"type": "ECombatTeam",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetTeam",
					"description": "Get Team",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "ECombatTeam",
					"parameters": [
						{
							"name": "Actor",
							"type": "const AActor*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bLogError",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetTeamTag",
					"description": "Get Team Tag",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FGameplayTag",
					"parameters": [
						{
							"name": "Actor",
							"type": "const AActor*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bLogError",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "HasTeamTag",
					"description": "Has Team Tag",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "IsOnTeam",
					"description": "Is on Team",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Actor",
							"type": "const AActor*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "Team",
							"type": "ECombatTeam",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "IsValidTeam",
					"description": "Is Valid Team",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Team",
							"type": "ECombatTeam",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "TeamToString",
					"description": "UFUNCTION(BlueprintPure, meta=(BlueprintAutocast))\nstatic FGameplayTag ToTeamTag(ECombatTeam Team)\n{\n      return UCombatSubsystem::ToTeamTag(Team);",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FString",
					"parameters": [
						{
							"name": "Team",
							"type": "ECombatTeam",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "ToTeam",
					"description": "To Team",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "ECombatTeam",
					"parameters": [
						{
							"name": "TeamTag",
							"type": "const FGameplayTag&",
							"description": "",
							"flags": [
								"Categories = Combat.Team",
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "ToTeamTag",
					"description": "To Team Tag",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FGameplayTag",
					"parameters": [
						{
							"name": "Team",
							"type": "ECombatTeam",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatUtil",
					"className": "Combat Util",
					"shortTitle": "To Team Tag",
					"fullTitle": "To Team Tag",
					"description": "",
					"imgPath": "../img/nd_img_ToTeamTag.png",
					"inputs": [
						{
							"name": "Team",
							"type": "ECombatTeam Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Gameplay Tag Structure",
							"description": "To Team Tag"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatUtil",
					"className": "Combat Util",
					"shortTitle": "To Team",
					"fullTitle": "To Team",
					"description": "",
					"imgPath": "../img/nd_img_ToTeam.png",
					"inputs": [
						{
							"name": "Team Tag",
							"type": "Gameplay Tag Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "ECombatTeam Enum",
							"description": "To Team"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatUtil",
					"className": "Combat Util",
					"shortTitle": "Is Valid Team",
					"fullTitle": "Is Valid Team",
					"description": "",
					"imgPath": "../img/nd_img_IsValidTeam.png",
					"inputs": [
						{
							"name": "Team",
							"type": "ECombatTeam Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Valid Team"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatUtil",
					"className": "Combat Util",
					"shortTitle": "Is on Team",
					"fullTitle": "Is on Team",
					"description": "",
					"imgPath": "../img/nd_img_IsOnTeam.png",
					"inputs": [
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Team",
							"type": "ECombatTeam Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is on Team"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatUtil",
					"className": "Combat Util",
					"shortTitle": "Has Team Tag",
					"fullTitle": "Has Team Tag",
					"description": "",
					"imgPath": "../img/nd_img_HasTeamTag.png",
					"inputs": [
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Has Team Tag"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatUtil",
					"className": "Combat Util",
					"shortTitle": "Get Team Tag",
					"fullTitle": "Get Team Tag",
					"description": "",
					"imgPath": "../img/nd_img_GetTeamTag.png",
					"inputs": [
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Log Error",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Gameplay Tag Structure",
							"description": "Get Team Tag"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatUtil",
					"className": "Combat Util",
					"shortTitle": "Get Team",
					"fullTitle": "Get Team",
					"description": "",
					"imgPath": "../img/nd_img_GetTeam.png",
					"inputs": [
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Log Error",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "ECombatTeam Enum",
							"description": "Get Team"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatUtil",
					"className": "Combat Util",
					"shortTitle": "Get Other Team",
					"fullTitle": "Get Other Team",
					"description": "",
					"imgPath": "../img/nd_img_GetOtherTeam.png",
					"inputs": [
						{
							"name": "Team",
							"type": "ECombatTeam Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "ECombatTeam Enum",
							"description": "e.g. GetOtherTeamTag(\"Enemy\") -> \"Player\""
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatUtil",
					"className": "Combat Util",
					"shortTitle": "Ensure Is Valid Team Tag",
					"fullTitle": "Ensure Is Valid Team Tag",
					"description": "",
					"imgPath": "../img/nd_img_EnsureIsValidTeamTag.png",
					"inputs": [
						{
							"name": "Team Tag",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Ensure Is Valid Team Tag"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UCombatUtil",
					"className": "Combat Util",
					"shortTitle": "Ensure Is Valid Team",
					"fullTitle": "Ensure Is Valid Team",
					"description": "",
					"imgPath": "../img/nd_img_EnsureIsValidTeam.png",
					"inputs": [
						{
							"name": "Team",
							"type": "ECombatTeam Enum",
							"description": "$no_comments"
						},
						{
							"name": "Subject",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Ensure Is Valid Team"
						}
					]
				}
			]
		},
		{
			"className": "URandomSubsystem",
			"classHierarchy": [
				"UObject",
				"USubsystem",
				"UWorldSubsystem"
			],
			"path": "Classes/Default/URandomSubsystem",
			"properties": [
				{
					"name": "RandomStream",
					"type": "FRandomStream",
					"flags": [
						"Category = RandomSubsystem",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Combat/CombatUtils.h",
						"ShowOnlyInnerProperties",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "URandomPointInCircleUtil",
			"classHierarchy": [
				"UObject",
				"UBlueprintFunctionLibrary"
			],
			"path": "Classes/Default/URandomPointInCircleUtil",
			"properties": [],
			"functions": [
				{
					"name": "GetRandomPointInCircle",
					"description": "Get a random point in a circle around the origin, within the scaled radius\nIf CircleAxis is specified, the random point will be constrained to a cone around the axis",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Private",
						"HasOutParams",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FVector",
					"parameters": [
						{
							"name": "Options",
							"type": "const FRandomPointInCircleOptions&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "Origin",
							"type": "const FVector&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "CircleAxis",
							"type": "const FVector",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "ToString",
					"description": "Get debug string",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Private",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FString",
					"parameters": [
						{
							"name": "Options",
							"type": "const FRandomPointInCircleOptions&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				}
			]
		},
		{
			"className": "UCursorStack",
			"classHierarchy": [
				"UObject"
			],
			"path": "Classes/Default/UCursorStack",
			"properties": [],
			"functions": []
		},
		{
			"className": "UDamageValueUtil",
			"classHierarchy": [
				"UObject",
				"UBlueprintFunctionLibrary"
			],
			"path": "Classes/Default/UDamageValueUtil",
			"properties": [],
			"functions": [
				{
					"name": "GetType",
					"description": "Get Type",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Private",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FGameplayTag",
					"parameters": [
						{
							"name": "Damage",
							"type": "const FDamageValue&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "GetValue",
					"description": "Get Value",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Private",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "float",
					"parameters": [
						{
							"name": "Damage",
							"type": "const FDamageValue&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "IsDamage",
					"description": "Is Damage",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Private",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Damage",
							"type": "const FDamageValue&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "IsHealing",
					"description": "Is Healing",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Private",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Damage",
							"type": "const FDamageValue&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "IsNoop",
					"description": "Is Noop",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Private",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Damage",
							"type": "const FDamageValue&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "ToString",
					"description": "To String",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Private",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FString",
					"parameters": [
						{
							"name": "Damage",
							"type": "const FDamageValue&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				}
			]
		},
		{
			"className": "UActorDamageEventUtil",
			"classHierarchy": [
				"UObject",
				"UBlueprintFunctionLibrary"
			],
			"path": "Classes/Default/UActorDamageEventUtil",
			"properties": [],
			"functions": [
				{
					"name": "GetDefaultMessage",
					"description": "Get Default Message",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FText",
					"parameters": [
						{
							"name": "Event",
							"type": "const FActorDamageEvent&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "GetMessage",
					"description": "Get Message",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FText",
					"parameters": [
						{
							"name": "Event",
							"type": "const FActorDamageEvent&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "IsNoop",
					"description": "Is Noop",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Event",
							"type": "const FActorDamageEvent&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "IsValidEvent",
					"description": "Is Valid Event",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Event",
							"type": "const FActorDamageEvent&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "ReadGameplayTags",
					"description": "Read Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FGameplayTagContainer",
					"parameters": [
						{
							"name": "Event",
							"type": "const FActorDamageEvent&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "ToString",
					"description": "To String",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FString",
					"parameters": [
						{
							"name": "Event",
							"type": "const FActorDamageEvent&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UActorDamageEventUtil",
					"className": "Actor Damage Event Util",
					"shortTitle": "To String",
					"fullTitle": "To String",
					"description": "",
					"imgPath": "../img/nd_img_ToString.png",
					"inputs": [
						{
							"name": "Event",
							"type": "Actor Damage Event Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "String",
							"description": "To String"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UActorDamageEventUtil",
					"className": "Actor Damage Event Util",
					"shortTitle": "Read Gameplay Tags",
					"fullTitle": "Read Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_ReadGameplayTags.png",
					"inputs": [
						{
							"name": "Event",
							"type": "Actor Damage Event Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Gameplay Tag Container Structure",
							"description": "Read Gameplay Tags"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UActorDamageEventUtil",
					"className": "Actor Damage Event Util",
					"shortTitle": "Is Valid Event",
					"fullTitle": "Is Valid Event",
					"description": "",
					"imgPath": "../img/nd_img_IsValidEvent.png",
					"inputs": [
						{
							"name": "Event",
							"type": "Actor Damage Event Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Valid Event"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UActorDamageEventUtil",
					"className": "Actor Damage Event Util",
					"shortTitle": "Is Noop",
					"fullTitle": "Is Noop",
					"description": "",
					"imgPath": "../img/nd_img_IsNoop.png",
					"inputs": [
						{
							"name": "Event",
							"type": "Actor Damage Event Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Noop"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UActorDamageEventUtil",
					"className": "Actor Damage Event Util",
					"shortTitle": "Get Message",
					"fullTitle": "Get Message",
					"description": "",
					"imgPath": "../img/nd_img_GetMessage.png",
					"inputs": [
						{
							"name": "Event",
							"type": "Actor Damage Event Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Text",
							"description": "Get Message"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UActorDamageEventUtil",
					"className": "Actor Damage Event Util",
					"shortTitle": "Get Default Message",
					"fullTitle": "Get Default Message",
					"description": "",
					"imgPath": "../img/nd_img_GetDefaultMessage.png",
					"inputs": [
						{
							"name": "Event",
							"type": "Actor Damage Event Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Text",
							"description": "Get Default Message"
						}
					]
				}
			]
		},
		{
			"className": "UDamageableComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent",
				"UGameplayTagActorComponent"
			],
			"path": "Classes/Default/UDamageableComponent",
			"properties": [
				{
					"name": "PendingDamageEvents",
					"type": "TArray",
					"flags": [
						"Category = DamageableComponent",
						"ModuleRelativePath = Life/DamageableComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "DamageEvents",
					"type": "TArray",
					"flags": [
						"Category = DamageableComponent",
						"ModuleRelativePath = Life/DamageableComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "MaxHealth",
					"type": "float",
					"flags": [
						"Category = DamageableComponent",
						"ModuleRelativePath = Life/DamageableComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bIsExhaustedValue",
					"type": "bool",
					"flags": [
						"Category = DamageableComponent",
						"ModuleRelativePath = Life/DamageableComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ExhaustedEvent",
					"type": "TOptional",
					"flags": [
						"Category = DamageableComponent",
						"ModuleRelativePath = Life/DamageableComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "LastHealthDownEvent",
					"type": "TOptional",
					"flags": [
						"Category = DamageableComponent",
						"ModuleRelativePath = Life/DamageableComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "LastHealthUpEvent",
					"type": "TOptional",
					"flags": [
						"Category = DamageableComponent",
						"ModuleRelativePath = Life/DamageableComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bOnlyDamageInCombat",
					"type": "bool",
					"flags": [
						"Category = DamageableComponent",
						"ModuleRelativePath = Life/DamageableComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OnDamageEvent_K2",
					"type": "FOnDamageEvent_K2",
					"flags": [
						"DisplayName = OnDamage",
						"ModuleRelativePath = Life/DamageableComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnExhaustedDelegate_K2",
					"type": "FOnDamageEvent_K2",
					"flags": [
						"DisplayName = OnExhausted",
						"ModuleRelativePath = Life/DamageableComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "Effects",
					"type": "TArray",
					"flags": [
						"Category = DamageableComponent",
						"EditInline = true",
						"ModuleRelativePath = Life/DamageableComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "LifeSubsystem",
					"type": "TObjectPtr<ULifeSubsystem>",
					"flags": [
						"ModuleRelativePath = Life/DamageableComponent.h",
						"Protected"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "AddPendingDamage",
					"description": "Add Pending Damage",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Event",
							"type": "const FActorDamageEvent&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "ApplyActorDamage",
					"description": "Apply Actor Damage",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Damage",
							"type": "const FDamageValue&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "DamageCauser",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "ApplyDamage",
					"description": "Apply Damage",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Damage",
							"type": "const FDamageValue&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "DamageCauser",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "Exhaust",
					"description": "Exhaust",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Event",
							"type": "FActorDamageEvent",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						}
					]
				},
				{
					"name": "GetDamage",
					"description": "Get Damage",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "float",
					"parameters": []
				},
				{
					"name": "GetHealth",
					"description": "Get Health",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "float",
					"parameters": []
				},
				{
					"name": "GetPendingDamage",
					"description": "Get Pending Damage",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "float",
					"parameters": []
				},
				{
					"name": "HasPendingDamage",
					"description": "Has Pending Damage",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsAlive",
					"description": "Is Alive",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsDamaged",
					"description": "Is Damaged",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsExhausted",
					"description": "Is Exhausted",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "OnDamageEvent_K2__DelegateSignature",
					"description": "On Damage Event K2  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate",
						"HasOutParams"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "DamageEvent",
							"type": "const FActorDamageEvent&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnTakeAnyDamage",
					"description": "On Take Any Damage",
					"flags": [
						"Final",
						"Native",
						"Protected"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "DamagedActor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "InDamage",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "DamageType",
							"type": "const UDamageType*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "InstigatedBy",
							"type": "AController*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "DamageCauser",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "Update",
					"description": "Update",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "WasEverDamaged",
					"description": "Was Ever Damaged",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UDamageableComponent",
					"className": "Damageable Component",
					"shortTitle": "Was Ever Damaged",
					"fullTitle": "Was Ever Damaged",
					"description": "",
					"imgPath": "../img/nd_img_WasEverDamaged.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Damageable Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Was Ever Damaged"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDamageableComponent",
					"className": "Damageable Component",
					"shortTitle": "Update",
					"fullTitle": "Update",
					"description": "",
					"imgPath": "../img/nd_img_Update.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Damageable Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDamageableComponent",
					"className": "Damageable Component",
					"shortTitle": "Is Exhausted",
					"fullTitle": "Is Exhausted",
					"description": "",
					"imgPath": "../img/nd_img_IsExhausted.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Damageable Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Exhausted"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDamageableComponent",
					"className": "Damageable Component",
					"shortTitle": "Is Damaged",
					"fullTitle": "Is Damaged",
					"description": "",
					"imgPath": "../img/nd_img_IsDamaged.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Damageable Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Damaged"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDamageableComponent",
					"className": "Damageable Component",
					"shortTitle": "Is Alive",
					"fullTitle": "Is Alive",
					"description": "",
					"imgPath": "../img/nd_img_IsAlive.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Damageable Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Alive"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDamageableComponent",
					"className": "Damageable Component",
					"shortTitle": "Has Pending Damage",
					"fullTitle": "Has Pending Damage",
					"description": "",
					"imgPath": "../img/nd_img_HasPendingDamage.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Damageable Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Has Pending Damage"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDamageableComponent",
					"className": "Damageable Component",
					"shortTitle": "Get Pending Damage",
					"fullTitle": "Get Pending Damage",
					"description": "",
					"imgPath": "../img/nd_img_GetPendingDamage.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Damageable Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Pending Damage"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDamageableComponent",
					"className": "Damageable Component",
					"shortTitle": "Get Health",
					"fullTitle": "Get Health",
					"description": "",
					"imgPath": "../img/nd_img_GetHealth.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Damageable Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Health"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDamageableComponent",
					"className": "Damageable Component",
					"shortTitle": "Get Damage",
					"fullTitle": "Get Damage",
					"description": "",
					"imgPath": "../img/nd_img_GetDamage.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Damageable Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Damage"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDamageableComponent",
					"className": "Damageable Component",
					"shortTitle": "Exhaust",
					"fullTitle": "Exhaust",
					"description": "",
					"imgPath": "../img/nd_img_Exhaust.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Damageable Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Event",
							"type": "Actor Damage Event Structure",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDamageableComponent",
					"className": "Damageable Component",
					"shortTitle": "Apply Damage",
					"fullTitle": "Apply Damage",
					"description": "",
					"imgPath": "../img/nd_img_ApplyDamage.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Damageable Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Damage",
							"type": "Damage Value Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Damage Causer",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDamageableComponent",
					"className": "Damageable Component",
					"shortTitle": "Apply Actor Damage",
					"fullTitle": "Apply Actor Damage",
					"description": "",
					"imgPath": "../img/nd_img_ApplyActorDamage.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Damage",
							"type": "Damage Value Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Damage Causer",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Apply Actor Damage"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDamageableComponent",
					"className": "Damageable Component",
					"shortTitle": "Add Pending Damage",
					"fullTitle": "Add Pending Damage",
					"description": "",
					"imgPath": "../img/nd_img_AddPendingDamage.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Damageable Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Event",
							"type": "Actor Damage Event Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UDebugLoggingInteractionEffect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect",
				"UInteractionEffect"
			],
			"path": "Classes/Default/UDebugLoggingInteractionEffect",
			"properties": [
				{
					"name": "LogPrefix",
					"type": "FString",
					"flags": [
						"Category = DebugLoggingInteractionEffect",
						"ModuleRelativePath = Interaction/Effects/DebugLoggingEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "PrevGameplayTags",
					"type": "FGameplayTagContainer",
					"flags": [
						"Category = DebugLoggingInteractionEffect",
						"ModuleRelativePath = Interaction/Effects/DebugLoggingEffect.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "UDigable",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UDigable",
			"properties": [
				{
					"name": "RequiredTags",
					"type": "FGameplayTagContainer",
					"flags": [
						"Category = Digable",
						"ModuleRelativePath = Components/Digable.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "DigSuccessAudioEffect",
					"type": "TObjectPtr<UInteractionEffect>",
					"flags": [
						"Category = Digable",
						"EditInline = true",
						"ModuleRelativePath = Components/Digable.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "DigFailAudioEffect",
					"type": "TObjectPtr<UInteractionEffect>",
					"flags": [
						"Category = Digable",
						"Comment = // This audio effect plays when the dig action is performed but the player does not have the required tags.\n",
						"EditInline = true",
						"ModuleRelativePath = Components/Digable.h",
						"ToolTip = This audio effect plays when the dig action is performed but the player does not have the required tags.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "This audio effect plays when the dig action is performed but the player does not have the required tags."
				},
				{
					"name": "DigAnimationEffect",
					"type": "TObjectPtr<UInteractionEffect>",
					"flags": [
						"Category = Digable",
						"EditInline = true",
						"ModuleRelativePath = Components/Digable.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "LootSpawnEffect",
					"type": "TObjectPtr<ULootSpawnEffect>",
					"flags": [
						"Category = Digable",
						"EditInline = true",
						"ModuleRelativePath = Components/Digable.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "CanBeDug",
					"description": "* Although we're using the parent's inspiration or interactive component to gate whether or not the dig action can be performed,\n* we still need an internal function to check whether the player has the required tags to perform the action.\n* This allows the dig behavior ot be more expressive, where the designer can choose what implements are required for the dig,\n* which should be contained within the RequiredTags of this component to keep the behavior encapsulated.",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "Dig",
					"description": "* Instead of gating this with a CanBeDug() function, we're instead going to attach ourselves to a listener on the parent's inspiration / interactive component\n* which will handle gating whether or not the dig action can be performed.",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UDigable",
					"className": "Digable",
					"shortTitle": "Event Dig",
					"fullTitle": "Event Dig",
					"description": "Add Event",
					"imgPath": "../img/nd_img_Dig.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDigable",
					"className": "Digable",
					"shortTitle": "Dig",
					"fullTitle": "Dig",
					"description": "",
					"imgPath": "../img/nd_img_Dig.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Digable Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDigable",
					"className": "Digable",
					"shortTitle": "Can be Dug",
					"fullTitle": "Can be Dug",
					"description": "",
					"imgPath": "../img/nd_img_CanBeDug.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Digable Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "* Although we're using the parent's inspiration or interactive component to gate whether or not the dig action can be performed,\n* we still need an internal function to check whether the player has the required tags to perform the action.\n* This allows the dig behavior ot be more expressive, where the designer can choose what implements are required for the dig,\n* which should be contained within the RequiredTags of this component to keep the behavior encapsulated."
						}
					]
				}
			]
		},
		{
			"className": "UDragDropSubsystemStateLibrary",
			"classHierarchy": [
				"UObject",
				"UBlueprintFunctionLibrary"
			],
			"path": "Classes/Default/UDragDropSubsystemStateLibrary",
			"properties": [],
			"functions": [
				{
					"name": "IsDragging",
					"description": "Is Dragging",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "State",
							"type": "const FDragDropSubsystemState&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "IsDraggingActor",
					"description": "Is Dragging Actor",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "State",
							"type": "const FDragDropSubsystemState&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "IsDraggingComponent",
					"description": "Is Dragging Component",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "State",
							"type": "const FDragDropSubsystemState&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "Component",
							"type": "UPrimitiveComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UDragDropSubsystemStateLibrary",
					"className": "Drag Drop Subsystem State Library",
					"shortTitle": "Is Dragging Component",
					"fullTitle": "Is Dragging Component",
					"description": "",
					"imgPath": "../img/nd_img_IsDraggingComponent.png",
					"inputs": [
						{
							"name": "State",
							"type": "Drag Drop Subsystem State Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Component",
							"type": "Primitive Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Dragging Component"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDragDropSubsystemStateLibrary",
					"className": "Drag Drop Subsystem State Library",
					"shortTitle": "Is Dragging Actor",
					"fullTitle": "Is Dragging Actor",
					"description": "",
					"imgPath": "../img/nd_img_IsDraggingActor.png",
					"inputs": [
						{
							"name": "State",
							"type": "Drag Drop Subsystem State Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Dragging Actor"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDragDropSubsystemStateLibrary",
					"className": "Drag Drop Subsystem State Library",
					"shortTitle": "Is Dragging",
					"fullTitle": "Is Dragging",
					"description": "",
					"imgPath": "../img/nd_img_IsDragging.png",
					"inputs": [
						{
							"name": "State",
							"type": "Drag Drop Subsystem State Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Dragging"
						}
					]
				}
			]
		},
		{
			"className": "UDragDropSubsystem",
			"classHierarchy": [
				"UObject",
				"USubsystem",
				"UWorldSubsystem",
				"UTickableWorldSubsystem",
				"UWorldModeSubsystem",
				"UActorSelectionSubsystemBase"
			],
			"path": "Classes/Default/UDragDropSubsystem",
			"properties": [
				{
					"name": "State",
					"type": "FDragDropSubsystemState",
					"flags": [
						"Category = DragDropSubsystem",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "OnIsDraggingChanged",
					"type": "FOnDragDropSubsystemEvent",
					"flags": [
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnCanDropChanged",
					"type": "FOnDragDropSubsystemEvent",
					"flags": [
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnDrop",
					"type": "FOnDragDropSubsystemEvent",
					"flags": [
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnDropSocketChanged",
					"type": "FOnDragDropSubsystemEvent",
					"flags": [
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnGameplayTagsSourceChanged",
					"type": "FOnDragDropSubsystemEvent",
					"flags": [
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "Cancel",
					"description": "Cancel",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "CanDrop",
					"description": "Can Drop",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "ClearGameplayTagsSource",
					"description": "Clear Gameplay Tags Source",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "Drop",
					"description": "Drop",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "GetDraggedComponent",
					"description": "Get Dragged Component",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UPrimitiveComponent*",
					"parameters": []
				},
				{
					"name": "GetDragOffset",
					"description": "Get Drag Offset",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FVector",
					"parameters": []
				},
				{
					"name": "GetDropSocketName",
					"description": "Get Drop Socket Name",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FName",
					"parameters": []
				},
				{
					"name": "GetDropTargetComponent",
					"description": "Get Drop Target Component",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UPrimitiveComponent*",
					"parameters": []
				},
				{
					"name": "IsDragging",
					"description": "Is Dragging",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsDraggingActor",
					"description": "Is Dragging Actor",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "IsDraggingComponent",
					"description": "Is Dragging Component",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Component",
							"type": "UPrimitiveComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetCanDrop",
					"description": "Set Can Drop",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bNewCanDrop",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetDraggedComponent",
					"description": "Set Dragged Component",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Component",
							"type": "UPrimitiveComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						},
						{
							"name": "NewGameplayTagsSource",
							"type": "TScriptInterface",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetDropSocketName",
					"description": "Set Drop Socket Name",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewDropSocketName",
							"type": "FName",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetGameplayTagsSource",
					"description": "Set Gameplay Tags Source",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewGameplayTagSource",
							"type": "TScriptInterface",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "StartDragging",
					"description": "Start Dragging",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Component",
							"type": "UPrimitiveComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						},
						{
							"name": "NewGameplayTagsSource",
							"type": "TScriptInterface",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "StopDragging",
					"description": "Stop Dragging",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UDragDropSubsystem",
					"className": "Drag Drop Subsystem",
					"shortTitle": "Stop Dragging",
					"fullTitle": "Stop Dragging",
					"description": "",
					"imgPath": "../img/nd_img_StopDragging.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Drag Drop Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDragDropSubsystem",
					"className": "Drag Drop Subsystem",
					"shortTitle": "Start Dragging",
					"fullTitle": "Start Dragging",
					"description": "",
					"imgPath": "../img/nd_img_StartDragging.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Drag Drop Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Component",
							"type": "Primitive Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Gameplay Tags Source",
							"type": "Gameplay Tag Interface Interface",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDragDropSubsystem",
					"className": "Drag Drop Subsystem",
					"shortTitle": "Set Gameplay Tags Source",
					"fullTitle": "Set Gameplay Tags Source",
					"description": "",
					"imgPath": "../img/nd_img_SetGameplayTagsSource.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Drag Drop Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Gameplay Tag Source",
							"type": "Gameplay Tag Interface Interface",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDragDropSubsystem",
					"className": "Drag Drop Subsystem",
					"shortTitle": "Set Drop Socket Name",
					"fullTitle": "Set Drop Socket Name",
					"description": "",
					"imgPath": "../img/nd_img_SetDropSocketName.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Drag Drop Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Drop Socket Name",
							"type": "Name",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDragDropSubsystem",
					"className": "Drag Drop Subsystem",
					"shortTitle": "Set Dragged Component",
					"fullTitle": "Set Dragged Component",
					"description": "",
					"imgPath": "../img/nd_img_SetDraggedComponent.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Drag Drop Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Component",
							"type": "Primitive Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Gameplay Tags Source",
							"type": "Gameplay Tag Interface Interface",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDragDropSubsystem",
					"className": "Drag Drop Subsystem",
					"shortTitle": "Set Can Drop",
					"fullTitle": "Set Can Drop",
					"description": "",
					"imgPath": "../img/nd_img_SetCanDrop.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Drag Drop Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Can Drop",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDragDropSubsystem",
					"className": "Drag Drop Subsystem",
					"shortTitle": "Is Dragging Component",
					"fullTitle": "Is Dragging Component",
					"description": "",
					"imgPath": "../img/nd_img_IsDraggingComponent.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Drag Drop Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Component",
							"type": "Primitive Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Dragging Component"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDragDropSubsystem",
					"className": "Drag Drop Subsystem",
					"shortTitle": "Is Dragging Actor",
					"fullTitle": "Is Dragging Actor",
					"description": "",
					"imgPath": "../img/nd_img_IsDraggingActor.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Drag Drop Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Dragging Actor"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDragDropSubsystem",
					"className": "Drag Drop Subsystem",
					"shortTitle": "Is Dragging",
					"fullTitle": "Is Dragging",
					"description": "",
					"imgPath": "../img/nd_img_IsDragging.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Drag Drop Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Dragging"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDragDropSubsystem",
					"className": "Drag Drop Subsystem",
					"shortTitle": "Get Drop Target Component",
					"fullTitle": "Get Drop Target Component",
					"description": "",
					"imgPath": "../img/nd_img_GetDropTargetComponent.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Drag Drop Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Primitive Component Object Reference",
							"description": "Get Drop Target Component"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDragDropSubsystem",
					"className": "Drag Drop Subsystem",
					"shortTitle": "Get Drop Socket Name",
					"fullTitle": "Get Drop Socket Name",
					"description": "",
					"imgPath": "../img/nd_img_GetDropSocketName.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Drag Drop Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Name",
							"description": "Get Drop Socket Name"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDragDropSubsystem",
					"className": "Drag Drop Subsystem",
					"shortTitle": "Get Drag Offset",
					"fullTitle": "Get Drag Offset",
					"description": "",
					"imgPath": "../img/nd_img_GetDragOffset.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Drag Drop Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Vector",
							"description": "Get Drag Offset"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDragDropSubsystem",
					"className": "Drag Drop Subsystem",
					"shortTitle": "Get Dragged Component",
					"fullTitle": "Get Dragged Component",
					"description": "",
					"imgPath": "../img/nd_img_GetDraggedComponent.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Drag Drop Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Primitive Component Object Reference",
							"description": "Get Dragged Component"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDragDropSubsystem",
					"className": "Drag Drop Subsystem",
					"shortTitle": "Drop",
					"fullTitle": "Drop",
					"description": "",
					"imgPath": "../img/nd_img_Drop.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Drag Drop Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDragDropSubsystem",
					"className": "Drag Drop Subsystem",
					"shortTitle": "Clear Gameplay Tags Source",
					"fullTitle": "Clear Gameplay Tags Source",
					"description": "",
					"imgPath": "../img/nd_img_ClearGameplayTagsSource.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Drag Drop Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDragDropSubsystem",
					"className": "Drag Drop Subsystem",
					"shortTitle": "Can Drop",
					"fullTitle": "Can Drop",
					"description": "",
					"imgPath": "../img/nd_img_CanDrop.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Drag Drop Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Can Drop"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDragDropSubsystem",
					"className": "Drag Drop Subsystem",
					"shortTitle": "Cancel",
					"fullTitle": "Cancel",
					"description": "",
					"imgPath": "../img/nd_img_Cancel.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Drag Drop Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UGameplayTagSceneComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent",
				"USceneComponent"
			],
			"path": "Classes/Default/UGameplayTagSceneComponent",
			"properties": [
				{
					"name": "GameplayTagsAggregate",
					"type": "FGameplayTagsAggregate",
					"flags": [
						"Category = GameplayTagSceneComponent",
						"ModuleRelativePath = GameplayTags/GameplayTagContainerComponent.h",
						"ShowOnlyInnerProperties",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "GameplayTagsDebugOptions",
					"type": "FGameplayTagInterfaceDebugOptions",
					"flags": [
						"Category = GameplayTagSceneComponent",
						"ModuleRelativePath = GameplayTags/GameplayTagContainerComponent.h",
						"ShowOnlyInnerProperties",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "UDraggableBase",
			"classHierarchy": [
				"UObject",
				"UActorComponent",
				"USceneComponent",
				"UGameplayTagSceneComponent"
			],
			"path": "Classes/Default/UDraggableBase",
			"properties": [
				{
					"name": "bHasFocus",
					"type": "bool",
					"flags": [
						"Category = DraggableBase",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "bIsDragging",
					"type": "bool",
					"flags": [
						"Category = DraggableBase",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "bDidDrop",
					"type": "bool",
					"flags": [
						"Category = DraggableBase",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "bDidDropSuccessfully",
					"type": "bool",
					"flags": [
						"Category = DraggableBase",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "bIsCancelled",
					"type": "bool",
					"flags": [
						"Category = DraggableBase",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "OnFocusChangedDelegate",
					"type": "FOnComponentFocusChanged",
					"flags": [
						"DisplayName = OnFocusChanged",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnIsDraggingChangedDelegate",
					"type": "FOnDragDropSubsystemEvent",
					"flags": [
						"DisplayName = OnIsDraggingChanged",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnDropDelegate",
					"type": "FOnDragDropSubsystemEvent",
					"flags": [
						"DisplayName = OnDrop",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "bDebugEnabled",
					"type": "bool",
					"flags": [
						"Category = DraggableBase",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "DragDropSubsystem",
					"type": "TObjectPtr<UDragDropSubsystem>",
					"flags": [
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Protected"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "Cancel",
					"description": "Cancel",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "CanDrop",
					"description": "Can Drop",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "Drop",
					"description": "Drop",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"Const"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "GetDraggablePrimitive",
					"description": "Get Draggable Primitive",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UPrimitiveComponent*",
					"parameters": []
				},
				{
					"name": "OnDrop",
					"description": "On Drop",
					"flags": [
						"Native",
						"Event",
						"Public",
						"HasOutParams",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Event",
							"type": "const FDragDropSubsystemState&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnFocusChanged",
					"description": "On Focus Changed",
					"flags": [
						"Native",
						"Event",
						"Public",
						"HasOutParams",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bNewHasFocus",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "HitResult",
							"type": "const FHitResult&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnIsDraggingChanged",
					"description": "On Is Dragging Changed",
					"flags": [
						"Native",
						"Event",
						"Public",
						"HasOutParams",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Event",
							"type": "const FDragDropSubsystemState&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnStart",
					"description": "On Start",
					"flags": [
						"Native",
						"Event",
						"Public",
						"HasOutParams",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Event",
							"type": "const FDragDropSubsystemState&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnStop",
					"description": "On Stop",
					"flags": [
						"Native",
						"Event",
						"Public",
						"HasOutParams",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Event",
							"type": "const FDragDropSubsystemState&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnSubsystemDrop",
					"description": "On Subsystem Drop",
					"flags": [
						"Final",
						"Native",
						"Protected",
						"HasOutParams"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Event",
							"type": "const FDragDropSubsystemState&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnSubsystemFocusChanged",
					"description": "On Subsystem Focus Changed",
					"flags": [
						"Native",
						"Event",
						"Protected",
						"HasOutParams",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewFocussedActor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "HitResult",
							"type": "const FHitResult&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnSubsystemIsDraggingChanged",
					"description": "On Subsystem Is Dragging Changed",
					"flags": [
						"Final",
						"Native",
						"Protected",
						"HasOutParams"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Event",
							"type": "const FDragDropSubsystemState&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "SetEnableInput",
					"description": "Set Enable Input",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bNewEnableInput",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "Start",
					"description": "Start",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "Stop",
					"description": "Stop",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UDraggableBase",
					"className": "Draggable Base",
					"shortTitle": "Stop",
					"fullTitle": "Stop",
					"description": "",
					"imgPath": "../img/nd_img_Stop.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Draggable Base Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDraggableBase",
					"className": "Draggable Base",
					"shortTitle": "Start",
					"fullTitle": "Start",
					"description": "",
					"imgPath": "../img/nd_img_Start.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Draggable Base Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDraggableBase",
					"className": "Draggable Base",
					"shortTitle": "Set Enable Input",
					"fullTitle": "Set Enable Input",
					"description": "",
					"imgPath": "../img/nd_img_SetEnableInput.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Draggable Base Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Enable Input",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDraggableBase",
					"className": "Draggable Base",
					"shortTitle": "Event On Subsystem Focus Changed",
					"fullTitle": "Event On Subsystem Focus Changed",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnSubsystemFocusChanged.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "New Focussed Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Hit Result",
							"type": "Hit Result Structure (by ref)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDraggableBase",
					"className": "Draggable Base",
					"shortTitle": "Event On Stop",
					"fullTitle": "Event On Stop",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnStop.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Event",
							"type": "Drag Drop Subsystem State Structure (by ref)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDraggableBase",
					"className": "Draggable Base",
					"shortTitle": "Event On Start",
					"fullTitle": "Event On Start",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnStart.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Event",
							"type": "Drag Drop Subsystem State Structure (by ref)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDraggableBase",
					"className": "Draggable Base",
					"shortTitle": "Event On Is Dragging Changed",
					"fullTitle": "Event On Is Dragging Changed",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnIsDraggingChanged.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Event",
							"type": "Drag Drop Subsystem State Structure (by ref)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDraggableBase",
					"className": "Draggable Base",
					"shortTitle": "Event On Focus Changed",
					"fullTitle": "Event On Focus Changed",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnFocusChanged.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "New Has Focus",
							"type": "Boolean",
							"description": "$no_comments"
						},
						{
							"name": "Hit Result",
							"type": "Hit Result Structure (by ref)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDraggableBase",
					"className": "Draggable Base",
					"shortTitle": "Event On Drop",
					"fullTitle": "Event On Drop",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnDrop.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Event",
							"type": "Drag Drop Subsystem State Structure (by ref)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDraggableBase",
					"className": "Draggable Base",
					"shortTitle": "Get Draggable Primitive",
					"fullTitle": "Get Draggable Primitive",
					"description": "",
					"imgPath": "../img/nd_img_GetDraggablePrimitive.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Draggable Base Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Primitive Component Object Reference",
							"description": "Get Draggable Primitive"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDraggableBase",
					"className": "Draggable Base",
					"shortTitle": "Drop",
					"fullTitle": "Drop",
					"description": "",
					"imgPath": "../img/nd_img_Drop.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Draggable Base Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDraggableBase",
					"className": "Draggable Base",
					"shortTitle": "Can Drop",
					"fullTitle": "Can Drop",
					"description": "",
					"imgPath": "../img/nd_img_CanDrop.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Draggable Base Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Can Drop"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDraggableBase",
					"className": "Draggable Base",
					"shortTitle": "Cancel",
					"fullTitle": "Cancel",
					"description": "",
					"imgPath": "../img/nd_img_Cancel.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Draggable Base Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UDraggableComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent",
				"USceneComponent",
				"UGameplayTagSceneComponent",
				"UDraggableBase"
			],
			"path": "Classes/Default/UDraggableComponent",
			"properties": [
				{
					"name": "SocketSnapSpeed",
					"type": "float",
					"flags": [
						"Category = DraggableComponent",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "SnapCompleteDistance",
					"type": "float",
					"flags": [
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "DropTargetComponent",
					"type": "TWeakObjectPtr<UPrimitiveComponent>",
					"flags": [
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Protected"
					],
					"description": ""
				},
				{
					"name": "DragHandle",
					"type": "TWeakObjectPtr<UPhysicsHandleComponent>",
					"flags": [
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Protected"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "OnSubsystemCanDropChanged",
					"description": "On Subsystem Can Drop Changed",
					"flags": [
						"Final",
						"Native",
						"Protected",
						"HasOutParams"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "DropEvent",
							"type": "const FDragDropSubsystemState&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				}
			]
		},
		{
			"className": "UDropTargetComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent",
				"USceneComponent",
				"UGameplayTagSceneComponent"
			],
			"path": "Classes/Default/UDropTargetComponent",
			"properties": [
				{
					"name": "bHasFocus",
					"type": "bool",
					"flags": [
						"Category = DropTargetComponent",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "bCanDrop",
					"type": "bool",
					"flags": [
						"Category = DropTargetComponent",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "bUseCanDropRequirements",
					"type": "bool",
					"flags": [
						"Category = DropTargetComponent",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bUseDropCompatibilityRequirements",
					"type": "bool",
					"flags": [
						"Category = DropTargetComponent",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bDropCompatible",
					"type": "bool",
					"flags": [
						"Category = DropTargetComponent",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "CachedGameplayTags",
					"type": "FGameplayTagContainer",
					"flags": [
						"Category = DropTargetComponent",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "bUseMaxCapacity",
					"type": "bool",
					"flags": [
						"Category = DropTargetComponent",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "MaxCapacity",
					"type": "int32",
					"flags": [
						"Category = DropTargetComponent",
						"ClampMin = 0",
						"EditCondition = bUseMaxCapacity",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"UIMin = 0",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "CanDropRequirements",
					"type": "FGameplayTagRequirements",
					"flags": [
						"Category = DropTargetComponent",
						"EditCondition = bUseCanDropRequirements",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "DropCompatibilityRequirements",
					"type": "FGameplayTagRequirements",
					"flags": [
						"Category = DropTargetComponent",
						"EditCondition = bUseDropCompatibilityRequirements",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Effects",
					"type": "TArray",
					"flags": [
						"Category = DropTargetComponent",
						"DisplayName = Effects",
						"EditInline = true",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bDebugEnabled",
					"type": "bool",
					"flags": [
						"Category = DropTargetComponent",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OnCanDropChangedDelegate",
					"type": "FOnDragDropSubsystemEvent",
					"flags": [
						"DisplayName = OnCanDropChanged",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnDropDelegate",
					"type": "FOnDragDropSubsystemEvent",
					"flags": [
						"DisplayName = OnDrop",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnFocusChangedDelegate",
					"type": "FOnComponentFocusChanged",
					"flags": [
						"DisplayName = OnFocusChanged",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnIsDraggingChangedDelegate",
					"type": "FOnDragDropSubsystemEvent",
					"flags": [
						"DisplayName = OnIsDraggingChanged",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnIsDragDropActiveChangedDelegate",
					"type": "FOnDragDropSubsystemEvent",
					"flags": [
						"DisplayName = OnIsDragDropActiveChanged",
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnDropTargetUpdated",
					"type": "FOnDropTargetUpdated",
					"flags": [
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Protected",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "DragDropSubsystem",
					"type": "TObjectPtr<UDragDropSubsystem>",
					"flags": [
						"ModuleRelativePath = Interaction/DragDropSubsystem.h",
						"Protected"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "CheckCanDrop",
					"description": "Check Can Drop",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "CheckDropCompatible",
					"description": "Check Drop Compatible",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "GetAttachedComponents",
					"description": "Get Attached Components",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "TArray",
					"parameters": []
				},
				{
					"name": "GetDropTargetPrimitiveComponent",
					"description": "Get Drop Target Primitive Component",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UPrimitiveComponent*",
					"parameters": []
				},
				{
					"name": "HasCapacity",
					"description": "Has Capacity",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "OnDrop",
					"description": "On Drop",
					"flags": [
						"Native",
						"Event",
						"Protected",
						"HasOutParams",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Event",
							"type": "const FDragDropSubsystemState&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnDropTargetUpdated__DelegateSignature",
					"description": "On Drop Target Updated  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnFocusChanged",
					"description": "On Focus Changed",
					"flags": [
						"Native",
						"Event",
						"Protected",
						"HasOutParams",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bNewHasFocus",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "HitResult",
							"type": "const FHitResult&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnStop",
					"description": "On Stop",
					"flags": [
						"Native",
						"Event",
						"Protected",
						"HasOutParams",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Event",
							"type": "const FDragDropSubsystemState&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnSubsystemActiveChanged",
					"description": "On Subsystem Active Changed",
					"flags": [
						"Final",
						"Native",
						"Protected"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bIsStarted",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnSubsystemCanDropChanged",
					"description": "On Subsystem Can Drop Changed",
					"flags": [
						"Final",
						"Native",
						"Protected",
						"HasOutParams"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "DropEvent",
							"type": "const FDragDropSubsystemState&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnSubsystemDrop",
					"description": "On Subsystem Drop",
					"flags": [
						"Final",
						"Native",
						"Protected",
						"HasOutParams"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Event",
							"type": "const FDragDropSubsystemState&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnSubsystemFocusChanged",
					"description": "On Subsystem Focus Changed",
					"flags": [
						"Final",
						"Native",
						"Protected",
						"HasOutParams"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewFocussedActor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "HitResult",
							"type": "const FHitResult&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnSubsystemGameplayTagsSourceChanged",
					"description": "On Subsystem Gameplay Tags Source Changed",
					"flags": [
						"Final",
						"Native",
						"Protected",
						"HasOutParams"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "DropEvent",
							"type": "const FDragDropSubsystemState&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnSubsystemIsDraggingChanged",
					"description": "On Subsystem Is Dragging Changed",
					"flags": [
						"Final",
						"Native",
						"Protected",
						"HasOutParams"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Event",
							"type": "const FDragDropSubsystemState&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UDropTargetComponent",
					"className": "Drop Target Component",
					"shortTitle": "Event On Stop",
					"fullTitle": "Event On Stop",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnStop.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Event",
							"type": "Drag Drop Subsystem State Structure (by ref)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDropTargetComponent",
					"className": "Drop Target Component",
					"shortTitle": "Event On Focus Changed",
					"fullTitle": "Event On Focus Changed",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnFocusChanged.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "New Has Focus",
							"type": "Boolean",
							"description": "$no_comments"
						},
						{
							"name": "Hit Result",
							"type": "Hit Result Structure (by ref)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDropTargetComponent",
					"className": "Drop Target Component",
					"shortTitle": "Event On Drop",
					"fullTitle": "Event On Drop",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnDrop.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Event",
							"type": "Drag Drop Subsystem State Structure (by ref)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDropTargetComponent",
					"className": "Drop Target Component",
					"shortTitle": "Has Capacity",
					"fullTitle": "Has Capacity",
					"description": "",
					"imgPath": "../img/nd_img_HasCapacity.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Drop Target Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Has Capacity"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDropTargetComponent",
					"className": "Drop Target Component",
					"shortTitle": "Get Drop Target Primitive Component",
					"fullTitle": "Get Drop Target Primitive Component",
					"description": "",
					"imgPath": "../img/nd_img_GetDropTargetPrimitiveComponent.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Drop Target Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Primitive Component Object Reference",
							"description": "Get Drop Target Primitive Component"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDropTargetComponent",
					"className": "Drop Target Component",
					"shortTitle": "Get Attached Components",
					"fullTitle": "Get Attached Components",
					"description": "",
					"imgPath": "../img/nd_img_GetAttachedComponents.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Drop Target Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Array of Primitive Component Object References",
							"description": "Get Attached Components"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDropTargetComponent",
					"className": "Drop Target Component",
					"shortTitle": "Check Drop Compatible",
					"fullTitle": "Check Drop Compatible",
					"description": "",
					"imgPath": "../img/nd_img_CheckDropCompatible.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Drop Target Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Check Drop Compatible"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UDropTargetComponent",
					"className": "Drop Target Component",
					"shortTitle": "Check Can Drop",
					"fullTitle": "Check Can Drop",
					"description": "",
					"imgPath": "../img/nd_img_CheckCanDrop.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Drop Target Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Check Can Drop"
						}
					]
				}
			]
		},
		{
			"className": "UNoopEffect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect"
			],
			"path": "Classes/Default/UNoopEffect",
			"properties": [],
			"functions": []
		},
		{
			"className": "UEffectsComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UEffectsComponent",
			"properties": [
				{
					"name": "Effects",
					"type": "TArray",
					"flags": [
						"Category = EffectsComponent",
						"Comment = // Use Effects to add effects that should be applied to all instances of this component\n// Separating this from InstanceEffects helps prevent accidental overrides on the default effects\n// and helps ensure that the default effects are always applied to all instances\n",
						"DisplayName = 🧩 Default Effects",
						"EditInline = true",
						"ModuleRelativePath = Interaction/Effects/EffectsComponent.h",
						"ShowInnerProperties",
						"ShowOnlyInnerProperties",
						"ShowTreeView",
						"ToolTip = Use Effects to add effects that should be applied to all instances of this component\nSeparating this from InstanceEffects helps prevent accidental overrides on the default effects\nand helps ensure that the default effects are always applied to all instances",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Use Effects to add effects that should be applied to all instances of this component\nSeparating this from InstanceEffects helps prevent accidental overrides on the default effects\nand helps ensure that the default effects are always applied to all instances"
				}
			],
			"functions": [
				{
					"name": "Get",
					"description": "Get",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "UEffectsComponent*",
					"parameters": [
						{
							"name": "Actor",
							"type": "const AActor*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetValidEffects",
					"description": "Returns list of valid effects",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "TArray",
					"parameters": []
				},
				{
					"name": "HasEffectOfType",
					"description": "Has any effect of the given type, in either the default or instance effects",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "EffectType",
							"type": "TSubclassOf<UEffect>",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UEffectsComponent",
					"className": "Interaction Effects",
					"shortTitle": "Has Effect Of Type",
					"fullTitle": "Has Effect Of Type",
					"description": "",
					"imgPath": "../img/nd_img_HasEffectOfType.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interaction Effects Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Effect Type",
							"type": "🧩 Effect Class Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Has any effect of the given type, in either the default or instance effects"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffectsComponent",
					"className": "Interaction Effects",
					"shortTitle": "Get Valid Effects",
					"fullTitle": "Get Valid Effects",
					"description": "",
					"imgPath": "../img/nd_img_GetValidEffects.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interaction Effects Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Array of 🧩 Effect Object References",
							"description": "Returns list of valid effects"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UEffectsComponent",
					"className": "Interaction Effects",
					"shortTitle": "Get Interaction Effects Component",
					"fullTitle": "Get Interaction Effects Component",
					"description": "",
					"imgPath": "../img/nd_img_Get.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Interaction Effects Object Reference",
							"description": "Get"
						}
					]
				}
			]
		},
		{
			"className": "UFadeWidgetUtil",
			"classHierarchy": [
				"UObject"
			],
			"path": "Classes/Default/UFadeWidgetUtil",
			"properties": [
				{
					"name": "bIsChanging",
					"type": "bool",
					"flags": [
						"Category = FadeWidgetUtil",
						"ModuleRelativePath = Widget/FadeWidget.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "Widget",
					"type": "TWeakObjectPtr<UUserWidget>",
					"flags": [
						"ModuleRelativePath = Widget/FadeWidget.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "bIsTickable",
					"type": "bool",
					"flags": [
						"Category = FadeWidgetUtil",
						"ModuleRelativePath = Widget/FadeWidget.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "bUseOverrideInitialOpacity",
					"type": "bool",
					"flags": [
						"Category = FadeWidgetUtil",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Widget/FadeWidget.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OverrideInitialOpacity",
					"type": "float",
					"flags": [
						"Category = FadeWidgetUtil",
						"ClampMax = 1.000000",
						"ClampMin = 0.000000",
						"EditCondition = bUseOverrideInitialOpacity",
						"ModuleRelativePath = Widget/FadeWidget.h",
						"UIMax = 1.000000",
						"UIMin = 0.000000",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "TargetOpacity",
					"type": "float",
					"flags": [
						"Category = FadeWidgetUtil",
						"ModuleRelativePath = Widget/FadeWidget.h",
						"Public",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "FadeSpeed",
					"type": "float",
					"flags": [
						"Category = FadeWidgetUtil",
						"ModuleRelativePath = Widget/FadeWidget.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "FadeIn",
					"description": "Fade In",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "FadeOut",
					"description": "Fade Out",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "IsFadingIn",
					"description": "Is Fading In",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "OnFadeEvent__DelegateSignature",
					"description": "On Fade Event  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "SetTargetOpacity",
					"description": "Set Target Opacity",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InTargetOpacity",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetWidget",
					"description": "Set Widget",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InWidget",
							"type": "UUserWidget*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UFadeWidgetUtil",
					"className": "Fade Widget Util",
					"shortTitle": "Set Widget",
					"fullTitle": "Set Widget",
					"description": "",
					"imgPath": "../img/nd_img_SetWidget.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Fade Widget Util Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Widget",
							"type": "User Widget Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UFadeWidgetUtil",
					"className": "Fade Widget Util",
					"shortTitle": "Set Target Opacity",
					"fullTitle": "Set Target Opacity",
					"description": "",
					"imgPath": "../img/nd_img_SetTargetOpacity.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Fade Widget Util Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Target Opacity",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UFadeWidgetUtil",
					"className": "Fade Widget Util",
					"shortTitle": "Is Fading In",
					"fullTitle": "Is Fading In",
					"description": "",
					"imgPath": "../img/nd_img_IsFadingIn.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Fade Widget Util Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Fading In"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UFadeWidgetUtil",
					"className": "Fade Widget Util",
					"shortTitle": "Fade Out",
					"fullTitle": "Fade Out",
					"description": "",
					"imgPath": "../img/nd_img_FadeOut.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Fade Widget Util Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UFadeWidgetUtil",
					"className": "Fade Widget Util",
					"shortTitle": "Fade In",
					"fullTitle": "Fade In",
					"description": "",
					"imgPath": "../img/nd_img_FadeIn.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Fade Widget Util Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UFloatSpringConfigUtil",
			"classHierarchy": [
				"UObject",
				"UBlueprintFunctionLibrary"
			],
			"path": "Classes/Default/UFloatSpringConfigUtil",
			"properties": [],
			"functions": [
				{
					"name": "Apply",
					"description": "Apply",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "float",
					"parameters": [
						{
							"name": "Current",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Target",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Delta",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "State",
							"type": "FFloatSpringState",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						},
						{
							"name": "Config",
							"type": "const FFloatSpringConfig&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UFloatSpringConfigUtil",
					"className": "Float Spring Config Util",
					"shortTitle": "Apply",
					"fullTitle": "Apply",
					"description": "Spring",
					"imgPath": "../img/nd_img_Apply.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Current",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Delta",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Config",
							"type": "Float Spring Config Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "State",
							"type": "Float Spring State Structure",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Apply"
						}
					]
				}
			]
		},
		{
			"className": "UGameplayTagAggregateInterface",
			"classHierarchy": [
				"UObject",
				"UInterface"
			],
			"path": "Classes/Default/UGameplayTagAggregateInterface",
			"properties": [],
			"functions": [
				{
					"name": "AddGameplayTagSource_K2",
					"description": "Add Gameplay Tag Source K2",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Source",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "HasGameplayTagSource",
					"description": "Has Gameplay Tag Source",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Source",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "RemoveGameplayTagSource_K2",
					"description": "Remove Gameplay Tag Source K2",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Source",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetDebugLogsEnabled",
					"description": "Set Debug Logs Enabled",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bEnable",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagAggregateInterface",
					"className": "Gameplay Tag Aggregate Interface",
					"shortTitle": "Event Set Debug Logs Enabled",
					"fullTitle": "Event Set Debug Logs Enabled\nFrom Gameplay Tag Aggregate Interface",
					"description": "Add Event",
					"imgPath": "../img/nd_img_SetDebugLogsEnabled.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Enable",
							"type": "Boolean",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagAggregateInterface",
					"className": "Gameplay Tag Aggregate Interface",
					"shortTitle": "Set Debug Logs Enabled",
					"fullTitle": "Set Debug Logs Enabled",
					"description": "",
					"imgPath": "../img/nd_img_SetDebugLogsEnabled.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Gameplay Tag Aggregate Interface Interface",
							"description": "$no_comments"
						},
						{
							"name": "Enable",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagAggregateInterface",
					"className": "Gameplay Tag Aggregate Interface",
					"shortTitle": "Event Remove Gameplay Tag Source",
					"fullTitle": "Event Remove Gameplay Tag Source\nFrom Gameplay Tag Aggregate Interface",
					"description": "Add Event",
					"imgPath": "../img/nd_img_RemoveGameplayTagSource_K2.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Source",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagAggregateInterface",
					"className": "Gameplay Tag Aggregate Interface",
					"shortTitle": "Remove Gameplay Tag Source",
					"fullTitle": "Remove Gameplay Tag Source",
					"description": "",
					"imgPath": "../img/nd_img_RemoveGameplayTagSource_K2.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Gameplay Tag Aggregate Interface Interface",
							"description": "$no_comments"
						},
						{
							"name": "Source",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagAggregateInterface",
					"className": "Gameplay Tag Aggregate Interface",
					"shortTitle": "Has Gameplay Tag Source",
					"fullTitle": "Has Gameplay Tag Source",
					"description": "",
					"imgPath": "../img/nd_img_HasGameplayTagSource.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Gameplay Tag Aggregate Interface Interface",
							"description": "$no_comments"
						},
						{
							"name": "Source",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Has Gameplay Tag Source"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagAggregateInterface",
					"className": "Gameplay Tag Aggregate Interface",
					"shortTitle": "Event Add Gameplay Tag Source",
					"fullTitle": "Event Add Gameplay Tag Source\nFrom Gameplay Tag Aggregate Interface",
					"description": "Add Event",
					"imgPath": "../img/nd_img_AddGameplayTagSource_K2.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Source",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagAggregateInterface",
					"className": "Gameplay Tag Aggregate Interface",
					"shortTitle": "Add Gameplay Tag Source",
					"fullTitle": "Add Gameplay Tag Source",
					"description": "",
					"imgPath": "../img/nd_img_AddGameplayTagSource_K2.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Gameplay Tag Aggregate Interface Interface",
							"description": "$no_comments"
						},
						{
							"name": "Source",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UGameplayTagAggregateUtil",
			"classHierarchy": [
				"UObject",
				"UBlueprintFunctionLibrary"
			],
			"path": "Classes/Default/UGameplayTagAggregateUtil",
			"properties": [],
			"functions": [
				{
					"name": "AddGameplayTagSource",
					"description": "Add Gameplay Tag Source",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Context",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Source",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "AddGameplayTagSourcesByTags",
					"description": "Add Gameplay Tag Sources by Tags",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Context",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Source",
							"type": "FGameplayTagsAggregate",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						},
						{
							"name": "Tags",
							"type": "const FGameplayTagContainer&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "bLogError",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetGameplayTagSourceDebugNames",
					"description": "Get Gameplay Tag Source Debug Names",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FString",
					"parameters": [
						{
							"name": "ContextObject",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetTargetInterface",
					"description": "Get Target Interface",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "TScriptInterface",
					"parameters": [
						{
							"name": "ContextObject",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "bLogError",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "ToString",
					"description": "To String",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FString",
					"parameters": [
						{
							"name": "Aggregate",
							"type": "const FGameplayTagsAggregate&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagAggregateUtil",
					"className": "Gameplay Tag Aggregate Util",
					"shortTitle": "To String",
					"fullTitle": "To String",
					"description": "",
					"imgPath": "../img/nd_img_ToString.png",
					"inputs": [
						{
							"name": "Aggregate",
							"type": "Gameplay Tags Aggregate Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "String",
							"description": "To String"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagAggregateUtil",
					"className": "Gameplay Tag Aggregate Util",
					"shortTitle": "Get Target Interface",
					"fullTitle": "Get Target Interface",
					"description": "",
					"imgPath": "../img/nd_img_GetTargetInterface.png",
					"inputs": [
						{
							"name": "Context Object",
							"type": "Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Log Error",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Gameplay Tag Aggregate Interface Interface",
							"description": "Get Target Interface"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagAggregateUtil",
					"className": "Gameplay Tag Aggregate Util",
					"shortTitle": "Get Gameplay Tag Source Debug Names",
					"fullTitle": "Get Gameplay Tag Source Debug Names",
					"description": "",
					"imgPath": "../img/nd_img_GetGameplayTagSourceDebugNames.png",
					"inputs": [
						{
							"name": "Context Object",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "String",
							"description": "Get Gameplay Tag Source Debug Names"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagAggregateUtil",
					"className": "Gameplay Tag Aggregate Util",
					"shortTitle": "Add Gameplay Tag Sources by Tags",
					"fullTitle": "Add Gameplay Tag Sources by Tags",
					"description": "",
					"imgPath": "../img/nd_img_AddGameplayTagSourcesByTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Context",
							"type": "Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tags",
							"type": "Gameplay Tag Container Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Log Error",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Source",
							"type": "Gameplay Tags Aggregate Structure",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagAggregateUtil",
					"className": "Gameplay Tag Aggregate Util",
					"shortTitle": "Add Gameplay Tag Source",
					"fullTitle": "Add Gameplay Tag Source",
					"description": "",
					"imgPath": "../img/nd_img_AddGameplayTagSource.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Context",
							"type": "Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Source",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UGameplayTagContainerComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent",
				"UGameplayTagActorComponent"
			],
			"path": "Classes/Default/UGameplayTagContainerComponent",
			"properties": [
				{
					"name": "bInitialVisualizeGameplayTags",
					"type": "bool",
					"flags": [
						"ModuleRelativePath = GameplayTags/GameplayTagContainerComponent.h",
						"Protected"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "ReadDebugCVars",
					"description": "Read Debug CVars",
					"flags": [
						"Final",
						"Native",
						"Protected"
					],
					"returnType": "void",
					"parameters": []
				}
			]
		},
		{
			"className": "UGameplayTagsViewModel",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase"
			],
			"path": "Classes/Default/UGameplayTagsViewModel",
			"properties": [
				{
					"name": "GameplayTagSource",
					"type": "TWeakObjectPtr<UObject>",
					"flags": [
						"Category = GameplayTagsViewModel",
						"ModuleRelativePath = GameplayTags/GameplayTagContainerComponent.h",
						"Public",
						"BlueprintVisible"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "Init",
					"description": "Init",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InGameplayTagsSource",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnGameplayTagsChanged",
					"description": "On Gameplay Tags Changed",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "QueryGameplayTags",
					"description": "Query Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FGameplayTagContainer",
					"parameters": []
				},
				{
					"name": "ReadGameplayTags",
					"description": "Read Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FGameplayTagContainer",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagsViewModel",
					"className": "Gameplay Tags View Model",
					"shortTitle": "Read Gameplay Tags",
					"fullTitle": "Read Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_ReadGameplayTags.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Gameplay Tags View Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Gameplay Tag Container Structure",
							"description": "Read Gameplay Tags"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagsViewModel",
					"className": "Gameplay Tags View Model",
					"shortTitle": "Query Gameplay Tags",
					"fullTitle": "Query Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_QueryGameplayTags.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Gameplay Tags View Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Gameplay Tag Container Structure",
							"description": "Query Gameplay Tags"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagsViewModel",
					"className": "Gameplay Tags View Model",
					"shortTitle": "Init",
					"fullTitle": "Init",
					"description": "",
					"imgPath": "../img/nd_img_Init.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Gameplay Tags View Model Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Gameplay Tags Source",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UGameplayTagContainerUtil",
			"classHierarchy": [
				"UObject",
				"UBlueprintFunctionLibrary"
			],
			"path": "Classes/Default/UGameplayTagContainerUtil",
			"properties": [],
			"functions": [
				{
					"name": "FindAddedRemoved",
					"description": "Find Added Removed",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "CurrentGameplayTags",
							"type": "const FGameplayTagContainer&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "PrevGameplayTags",
							"type": "const FGameplayTagContainer&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "AddedTags",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						},
						{
							"name": "RemovedTags",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						}
					]
				},
				{
					"name": "RemoveMatchingTags_K2",
					"description": "remove all tags that are children of Parent, including Parent\ne.g. if you have a tag \"Mode.Combat.Defend\" and \"Mode.Combat.Attack\", RemoveMatchingTags(\"Mode.Combat\") will remove both",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Container",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						},
						{
							"name": "Parent",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetGameplayTag_K2",
					"description": "add/remove a tag in a container, based on bAdd",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Container",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						},
						{
							"name": "UpdateGameplayTag",
							"type": "const FGameplayTag",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bAdd",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "SetGameplayTagAsMode_K2",
					"description": "ensures that only one tag inside a parent tag is set\ne.g. if you have a tag \"Mode.Combat.Defend\" and \"Mode.Combat.Attack\", the container will only have one of these tags at a time",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Container",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						},
						{
							"name": "UpdateGameplayTag",
							"type": "const FGameplayTag&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "bAdd",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetGameplayTagValues_K2",
					"description": "add/remove multiple tags in a container, based on bAdd",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Container",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						},
						{
							"name": "UpdateGameplayTags",
							"type": "const FGameplayTagContainer",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bAdd",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagContainerUtil",
					"className": "Gameplay Tag Container Util",
					"shortTitle": "Set Gameplay Tags",
					"fullTitle": "Set Gameplay Tags",
					"description": "GameplayTags",
					"imgPath": "../img/nd_img_SetGameplayTagValues_K2.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Update Gameplay Tags",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						},
						{
							"name": "Add",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Container",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagContainerUtil",
					"className": "Gameplay Tag Container Util",
					"shortTitle": "Set Gameplay Tag as Mode",
					"fullTitle": "Set Gameplay Tag as Mode",
					"description": "GameplayTags",
					"imgPath": "../img/nd_img_SetGameplayTagAsMode_K2.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Update Gameplay Tag",
							"type": "Gameplay Tag Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Add",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Container",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagContainerUtil",
					"className": "Gameplay Tag Container Util",
					"shortTitle": "Set Gameplay Tag",
					"fullTitle": "Set Gameplay Tag",
					"description": "GameplayTags",
					"imgPath": "../img/nd_img_SetGameplayTag_K2.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Update Gameplay Tag",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						},
						{
							"name": "Add",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Container",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagContainerUtil",
					"className": "Gameplay Tag Container Util",
					"shortTitle": "Remove Child Tags",
					"fullTitle": "Remove Child Tags",
					"description": "GameplayTags",
					"imgPath": "../img/nd_img_RemoveMatchingTags_K2.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Parent",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Container",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagContainerUtil",
					"className": "Gameplay Tag Container Util",
					"shortTitle": "Find Added Removed",
					"fullTitle": "Find Added Removed",
					"description": "GameplayTags",
					"imgPath": "../img/nd_img_FindAddedRemoved.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Current Gameplay Tags",
							"type": "Gameplay Tag Container Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Prev Gameplay Tags",
							"type": "Gameplay Tag Container Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Added Tags",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						},
						{
							"name": "Removed Tags",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UGameplayTagContainerViewModel",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject"
			],
			"path": "Classes/Default/UGameplayTagContainerViewModel",
			"properties": [],
			"functions": []
		},
		{
			"className": "UGameplayTagInterface",
			"classHierarchy": [
				"UObject",
				"UInterface"
			],
			"path": "Classes/Default/UGameplayTagInterface",
			"properties": [],
			"functions": [
				{
					"name": "AddGameplayTag_K2",
					"description": "Add Gameplay Tag K2",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Tag",
							"type": "const FGameplayTag",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "AddGameplayTags_K2",
					"description": "Add Gameplay Tags K2",
					"flags": [
						"Native",
						"Event",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Tags",
							"type": "const FGameplayTagContainer&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "BroadcastGameplayTagsChanged_K2",
					"description": "Broadcast Gameplay Tags Changed K2",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "QueryGameplayTags_K2",
					"description": "Get aggregate GameplayTags suitable for querying, including tags from other sources. Should not be used in WriteGameplayTags.",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FGameplayTagContainer",
					"parameters": []
				},
				{
					"name": "ReadGameplayTags_K2",
					"description": "Read the current GameplayTags.\nThis should not include tags from any sources, only the tags that are directly set on the target object, if any.\n(If we include source tags we'd end up writing source tags to this object)\nIntended usage:\n```c++\nFGameplayTagContainer Tags = Target->ReadGameplayTags();  read the tags\nTags.AddTag(MyTag);  mutate the tag container as needed\nTarget->WriteGameplayTags(Tags);  write them back",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FGameplayTagContainer",
					"parameters": []
				},
				{
					"name": "RemoveGameplayTag_K2",
					"description": "Remove Gameplay Tag K2",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Tag",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "RemoveGameplayTags_K2",
					"description": "Remove Gameplay Tags K2",
					"flags": [
						"Native",
						"Event",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Tags",
							"type": "const FGameplayTagContainer&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "SetGameplayTag_K2",
					"description": "Add or remove a tag from the target object based on the bAddTag parameter",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Tag",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "bAddTag",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetGameplayTagAsMode_K2",
					"description": "Add or remove a tag from the target object based on the bAddTag parameter. This will remove all other tags with the same tag parent.\ne.g. if the tag is Item::State::Equipped, it will remove all other Item::State tags except Equipped",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "UpdateGameplayTag",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "bAdd",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "SetGameplayTags_K2",
					"description": "Add or remove a set of tags from the target object based on the bAddTags parameter",
					"flags": [
						"Native",
						"Event",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InTags",
							"type": "const FGameplayTagContainer&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "bAddTags",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "WriteGameplayTags_K2",
					"description": "Write new GameplayTags for this object. Will replace existing tags.",
					"flags": [
						"Native",
						"Event",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewValue",
							"type": "const FGameplayTagContainer&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterface",
					"className": "Gameplay Tag Interface",
					"shortTitle": "Event Set Gameplay Tags",
					"fullTitle": "Event Set Gameplay Tags\nFrom Gameplay Tag Interface",
					"description": "Add Event",
					"imgPath": "../img/nd_img_WriteGameplayTags_K2.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "New Value",
							"type": "Gameplay Tag Container Structure (by ref)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterface",
					"className": "Gameplay Tag Interface",
					"shortTitle": "Set Gameplay Tags",
					"fullTitle": "Set Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_WriteGameplayTags_K2.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Gameplay Tag Interface Interface",
							"description": "$no_comments"
						},
						{
							"name": "New Value",
							"type": "Gameplay Tag Container Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterface",
					"className": "Gameplay Tag Interface",
					"shortTitle": "Event Set Gameplay Tags",
					"fullTitle": "Event Set Gameplay Tags\nFrom Gameplay Tag Interface",
					"description": "Add Event",
					"imgPath": "../img/nd_img_SetGameplayTags_K2.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "In Tags",
							"type": "Gameplay Tag Container Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Add Tags",
							"type": "Boolean",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterface",
					"className": "Gameplay Tag Interface",
					"shortTitle": "Set Gameplay Tags",
					"fullTitle": "Set Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_SetGameplayTags_K2.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Gameplay Tag Interface Interface",
							"description": "$no_comments"
						},
						{
							"name": "In Tags",
							"type": "Gameplay Tag Container Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Add Tags",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterface",
					"className": "Gameplay Tag Interface",
					"shortTitle": "Event Set Gameplay Tag as Mode",
					"fullTitle": "Event Set Gameplay Tag as Mode\nFrom Gameplay Tag Interface",
					"description": "Add Event",
					"imgPath": "../img/nd_img_SetGameplayTagAsMode_K2.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Update Gameplay Tag",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						},
						{
							"name": "Add",
							"type": "Boolean",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterface",
					"className": "Gameplay Tag Interface",
					"shortTitle": "Set Gameplay Tag as Mode",
					"fullTitle": "Set Gameplay Tag as Mode",
					"description": "",
					"imgPath": "../img/nd_img_SetGameplayTagAsMode_K2.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Gameplay Tag Interface Interface",
							"description": "$no_comments"
						},
						{
							"name": "Update Gameplay Tag",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						},
						{
							"name": "Add",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterface",
					"className": "Gameplay Tag Interface",
					"shortTitle": "Event Set Gameplay Tag",
					"fullTitle": "Event Set Gameplay Tag\nFrom Gameplay Tag Interface",
					"description": "Add Event",
					"imgPath": "../img/nd_img_SetGameplayTag_K2.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Tag",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						},
						{
							"name": "Add Tag",
							"type": "Boolean",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterface",
					"className": "Gameplay Tag Interface",
					"shortTitle": "Set Gameplay Tag",
					"fullTitle": "Set Gameplay Tag",
					"description": "",
					"imgPath": "../img/nd_img_SetGameplayTag_K2.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Gameplay Tag Interface Interface",
							"description": "$no_comments"
						},
						{
							"name": "Tag",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						},
						{
							"name": "Add Tag",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterface",
					"className": "Gameplay Tag Interface",
					"shortTitle": "Event Remove Gameplay Tags",
					"fullTitle": "Event Remove Gameplay Tags\nFrom Gameplay Tag Interface",
					"description": "Add Event",
					"imgPath": "../img/nd_img_RemoveGameplayTags_K2.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Tags",
							"type": "Gameplay Tag Container Structure (by ref)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterface",
					"className": "Gameplay Tag Interface",
					"shortTitle": "Remove Gameplay Tags",
					"fullTitle": "Remove Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_RemoveGameplayTags_K2.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Gameplay Tag Interface Interface",
							"description": "$no_comments"
						},
						{
							"name": "Tags",
							"type": "Gameplay Tag Container Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterface",
					"className": "Gameplay Tag Interface",
					"shortTitle": "Event Remove Gameplay Tag",
					"fullTitle": "Event Remove Gameplay Tag\nFrom Gameplay Tag Interface",
					"description": "Add Event",
					"imgPath": "../img/nd_img_RemoveGameplayTag_K2.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Tag",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterface",
					"className": "Gameplay Tag Interface",
					"shortTitle": "Remove Gameplay Tag",
					"fullTitle": "Remove Gameplay Tag",
					"description": "",
					"imgPath": "../img/nd_img_RemoveGameplayTag_K2.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Gameplay Tag Interface Interface",
							"description": "$no_comments"
						},
						{
							"name": "Tag",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterface",
					"className": "Gameplay Tag Interface",
					"shortTitle": "Get Gameplay Tags",
					"fullTitle": "Get Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_ReadGameplayTags_K2.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Gameplay Tag Interface Interface",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Gameplay Tag Container Structure",
							"description": "Read the current GameplayTags.\nThis should not include tags from any sources, only the tags that are directly set on the target object, if any.\n(If we include source tags we'd end up writing source tags to this object)\nIntended usage:\n```c++\nFGameplayTagContainer Tags = Target->ReadGameplayTags();  read the tags\nTags.AddTag(MyTag);  mutate the tag container as needed\nTarget->WriteGameplayTags(Tags);  write them back"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterface",
					"className": "Gameplay Tag Interface",
					"shortTitle": "Query Gameplay Tags",
					"fullTitle": "Query Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_QueryGameplayTags_K2.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Gameplay Tag Interface Interface",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Gameplay Tag Container Structure",
							"description": "Get aggregate GameplayTags suitable for querying, including tags from other sources. Should not be used in WriteGameplayTags."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterface",
					"className": "Gameplay Tag Interface",
					"shortTitle": "Event Broadcast Gameplay Tags Changed",
					"fullTitle": "Event Broadcast Gameplay Tags Changed\nFrom Gameplay Tag Interface",
					"description": "Add Event",
					"imgPath": "../img/nd_img_BroadcastGameplayTagsChanged_K2.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterface",
					"className": "Gameplay Tag Interface",
					"shortTitle": "Broadcast Gameplay Tags Changed",
					"fullTitle": "Broadcast Gameplay Tags Changed",
					"description": "",
					"imgPath": "../img/nd_img_BroadcastGameplayTagsChanged_K2.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Gameplay Tag Interface Interface",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterface",
					"className": "Gameplay Tag Interface",
					"shortTitle": "Event Add Gameplay Tags",
					"fullTitle": "Event Add Gameplay Tags\nFrom Gameplay Tag Interface",
					"description": "Add Event",
					"imgPath": "../img/nd_img_AddGameplayTags_K2.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Tags",
							"type": "Gameplay Tag Container Structure (by ref)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterface",
					"className": "Gameplay Tag Interface",
					"shortTitle": "Add Gameplay Tags",
					"fullTitle": "Add Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_AddGameplayTags_K2.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Gameplay Tag Interface Interface",
							"description": "$no_comments"
						},
						{
							"name": "Tags",
							"type": "Gameplay Tag Container Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterface",
					"className": "Gameplay Tag Interface",
					"shortTitle": "Event Add Gameplay Tag",
					"fullTitle": "Event Add Gameplay Tag\nFrom Gameplay Tag Interface",
					"description": "Add Event",
					"imgPath": "../img/nd_img_AddGameplayTag_K2.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Tag",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterface",
					"className": "Gameplay Tag Interface",
					"shortTitle": "Add Gameplay Tag",
					"fullTitle": "Add Gameplay Tag",
					"description": "",
					"imgPath": "../img/nd_img_AddGameplayTag_K2.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Gameplay Tag Interface Interface",
							"description": "$no_comments"
						},
						{
							"name": "Tag",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UGameplayTagInterfaceUtil",
			"classHierarchy": [
				"UObject",
				"UBlueprintFunctionLibrary"
			],
			"path": "Classes/Default/UGameplayTagInterfaceUtil",
			"properties": [],
			"functions": [
				{
					"name": "ActorToGameplayTagsQueryResult",
					"description": "Actor to Gameplay Tags Query Result",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FGameplayTagContainer",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "AsGameplayTagInterfaces",
					"description": "As Gameplay Tag Interfaces",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "TArray",
					"parameters": [
						{
							"name": "TargetObjects",
							"type": "TArray",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "DebugVisualizeGameplayTags",
					"description": "Debug Visualize Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Source",
							"type": "TScriptInterface",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Options",
							"type": "const FGameplayTagInterfaceDebugOptions&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "GetGameplayTagInterface",
					"description": "Get Gameplay Tag Interface",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "TScriptInterface",
					"parameters": [
						{
							"name": "ContextObject",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "bLogError",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetGameplayTagInterfaceByTag",
					"description": "Get Gameplay Tag Interface by Tag",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "TScriptInterface",
					"parameters": [
						{
							"name": "ContextObject",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "TargetObjectMethod",
							"type": "const FGameplayTag",
							"description": "",
							"flags": [
								"Categories = TargetObject",
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bLogError",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetGameplayTagInterfacesByTags",
					"description": "Get Gameplay Tag Interfaces by Tags",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "TArray",
					"parameters": [
						{
							"name": "ContextObject",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "TargetObjectMethods",
							"type": "const FGameplayTagContainer&",
							"description": "",
							"flags": [
								"Categories = TargetObject",
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "bLogError",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetGameplayTags_K2",
					"description": "Get Gameplay Tags K2",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FGameplayTagContainer",
					"parameters": [
						{
							"name": "Target",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "bUseAggregate",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "HasAllGameplayTags",
					"description": "Has All Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Target",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Tags",
							"type": "const FGameplayTagContainer&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "bUseAggregate",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "HasAnyGameplayTags",
					"description": "Has Any Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Target",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Tags",
							"type": "const FGameplayTagContainer&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "bUseAggregate",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "HasGameplayTag_K2",
					"description": "Has Gameplay Tag K2",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Target",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Team",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "bUseAggregate",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "QueryGameplayTags_K2",
					"description": "Query Gameplay Tags K2",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FGameplayTagContainer",
					"parameters": [
						{
							"name": "Target",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "ReadGameplayTags_K2",
					"description": "Read Gameplay Tags K2",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FGameplayTagContainer",
					"parameters": [
						{
							"name": "Target",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetGameplayTag",
					"description": "Set Gameplay Tag",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Target",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Tag",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "bAddTag",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetGameplayTagAsMode",
					"description": "Set Gameplay Tag as Mode",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Target",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "GameplayTag",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "bAdd",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetGameplayTags",
					"description": "Set Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Target",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "InTags",
							"type": "const FGameplayTagContainer&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "bAddTags",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "WriteGameplayTags",
					"description": "Write Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Target",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "NewValue",
							"type": "const FGameplayTagContainer&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterfaceUtil",
					"className": "Gameplay Tag Interface Util",
					"shortTitle": "Write Gameplay Tags",
					"fullTitle": "Write Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_WriteGameplayTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Value",
							"type": "Gameplay Tag Container Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterfaceUtil",
					"className": "Gameplay Tag Interface Util",
					"shortTitle": "Set Gameplay Tags",
					"fullTitle": "Set Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_SetGameplayTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Tags",
							"type": "Gameplay Tag Container Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Add Tags",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterfaceUtil",
					"className": "Gameplay Tag Interface Util",
					"shortTitle": "Set Gameplay Tag as Mode",
					"fullTitle": "Set Gameplay Tag as Mode",
					"description": "",
					"imgPath": "../img/nd_img_SetGameplayTagAsMode.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Gameplay Tag",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						},
						{
							"name": "Add",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterfaceUtil",
					"className": "Gameplay Tag Interface Util",
					"shortTitle": "Set Gameplay Tag",
					"fullTitle": "Set Gameplay Tag",
					"description": "",
					"imgPath": "../img/nd_img_SetGameplayTag.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tag",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						},
						{
							"name": "Add Tag",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterfaceUtil",
					"className": "Gameplay Tag Interface Util",
					"shortTitle": "ReadGameplayTags",
					"fullTitle": "ReadGameplayTags",
					"description": "",
					"imgPath": "../img/nd_img_ReadGameplayTags_K2.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Gameplay Tag Container Structure",
							"description": "Read Gameplay Tags K2"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterfaceUtil",
					"className": "Gameplay Tag Interface Util",
					"shortTitle": "QueryGameplayTags",
					"fullTitle": "QueryGameplayTags",
					"description": "",
					"imgPath": "../img/nd_img_QueryGameplayTags_K2.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Gameplay Tag Container Structure",
							"description": "Query Gameplay Tags K2"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterfaceUtil",
					"className": "Gameplay Tag Interface Util",
					"shortTitle": "HasGameplayTag",
					"fullTitle": "HasGameplayTag",
					"description": "",
					"imgPath": "../img/nd_img_HasGameplayTag_K2.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Team",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						},
						{
							"name": "Use Aggregate",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Has Gameplay Tag K2"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterfaceUtil",
					"className": "Gameplay Tag Interface Util",
					"shortTitle": "Has Any Gameplay Tags",
					"fullTitle": "Has Any Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_HasAnyGameplayTags.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tags",
							"type": "Gameplay Tag Container Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Use Aggregate",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Has Any Gameplay Tags"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterfaceUtil",
					"className": "Gameplay Tag Interface Util",
					"shortTitle": "Has All Gameplay Tags",
					"fullTitle": "Has All Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_HasAllGameplayTags.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tags",
							"type": "Gameplay Tag Container Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Use Aggregate",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Has All Gameplay Tags"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterfaceUtil",
					"className": "Gameplay Tag Interface Util",
					"shortTitle": "Get Gameplay Tags K2",
					"fullTitle": "Get Gameplay Tags K2",
					"description": "",
					"imgPath": "../img/nd_img_GetGameplayTags_K2.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Use Aggregate",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Gameplay Tag Container Structure",
							"description": "Get Gameplay Tags K2"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterfaceUtil",
					"className": "Gameplay Tag Interface Util",
					"shortTitle": "Get Gameplay Tag Interfaces by Tags",
					"fullTitle": "Get Gameplay Tag Interfaces by Tags",
					"description": "",
					"imgPath": "../img/nd_img_GetGameplayTagInterfacesByTags.png",
					"inputs": [
						{
							"name": "Context Object",
							"type": "Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Target Object Methods",
							"type": "Gameplay Tag Container Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Log Error",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Array of Gameplay Tag Interface Interfaces",
							"description": "Get Gameplay Tag Interfaces by Tags"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterfaceUtil",
					"className": "Gameplay Tag Interface Util",
					"shortTitle": "Get Gameplay Tag Interface by Tag",
					"fullTitle": "Get Gameplay Tag Interface by Tag",
					"description": "",
					"imgPath": "../img/nd_img_GetGameplayTagInterfaceByTag.png",
					"inputs": [
						{
							"name": "Context Object",
							"type": "Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Target Object Method",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						},
						{
							"name": "Log Error",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Gameplay Tag Interface Interface",
							"description": "Get Gameplay Tag Interface by Tag"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterfaceUtil",
					"className": "Gameplay Tag Interface Util",
					"shortTitle": "Get Gameplay Tag Interface",
					"fullTitle": "Get Gameplay Tag Interface",
					"description": "",
					"imgPath": "../img/nd_img_GetGameplayTagInterface.png",
					"inputs": [
						{
							"name": "Context Object",
							"type": "Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Log Error",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Gameplay Tag Interface Interface",
							"description": "Get Gameplay Tag Interface"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterfaceUtil",
					"className": "Gameplay Tag Interface Util",
					"shortTitle": "Debug Visualize Gameplay Tags",
					"fullTitle": "Debug Visualize Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_DebugVisualizeGameplayTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Source",
							"type": "Gameplay Tag Interface Interface",
							"description": "$no_comments"
						},
						{
							"name": "Options",
							"type": "Gameplay Tag Interface Debug Options Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagInterfaceUtil",
					"className": "Gameplay Tag Interface Util",
					"shortTitle": "As Gameplay Tag Interfaces",
					"fullTitle": "As Gameplay Tag Interfaces",
					"description": "",
					"imgPath": "../img/nd_img_AsGameplayTagInterfaces.png",
					"inputs": [
						{
							"name": "Target Objects",
							"type": "Array of Object References",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Array of Gameplay Tag Interface Interfaces",
							"description": "As Gameplay Tag Interfaces"
						}
					]
				}
			]
		},
		{
			"className": "UGameplayTagOperationUtil",
			"classHierarchy": [
				"UObject",
				"UBlueprintFunctionLibrary"
			],
			"path": "Classes/Default/UGameplayTagOperationUtil",
			"properties": [],
			"functions": [
				{
					"name": "ApplyGameplayTagOperation",
					"description": "Apply Gameplay Tag Operation",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "ContextObject",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Operation",
							"type": "const FGameplayTagOperation&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "bApply",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "ApplyGameplayTagOperations",
					"description": "Apply Gameplay Tag Operations",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "ContextObject",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Operations",
							"type": "TArray",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "bApply",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagOperationUtil",
					"className": "Gameplay Tag Operation Util",
					"shortTitle": "Apply Gameplay Tag Operations",
					"fullTitle": "Apply Gameplay Tag Operations",
					"description": "",
					"imgPath": "../img/nd_img_ApplyGameplayTagOperations.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Context Object",
							"type": "Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Operations",
							"type": "Array of Gameplay Tag Operation Structures",
							"description": "$no_comments"
						},
						{
							"name": "Apply",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UGameplayTagOperationUtil",
					"className": "Gameplay Tag Operation Util",
					"shortTitle": "Apply Gameplay Tag Operation",
					"fullTitle": "Apply Gameplay Tag Operation",
					"description": "",
					"imgPath": "../img/nd_img_ApplyGameplayTagOperation.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Context Object",
							"type": "Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Operation",
							"type": "Gameplay Tag Operation Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Apply",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UHeatSourceComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent",
				"USceneComponent"
			],
			"path": "Classes/Default/UHeatSourceComponent",
			"properties": [
				{
					"name": "HeatSourceValue",
					"type": "float",
					"flags": [
						"Category = HeatSourceComponent",
						"ModuleRelativePath = Climate/HeatSourceComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bCanEverConsiderHeatSourceInclusion",
					"type": "bool",
					"flags": [
						"Category = HeatSourceComponent",
						"ModuleRelativePath = Climate/HeatSourceComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "AddInfluencedObject",
					"description": "Add Influenced Object",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InfluencedObject",
							"type": "UTemperatureComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "AddTemperature",
					"description": "Add Temperature",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "AffectedObject",
							"type": "UTemperatureComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetInfluencedObjects",
					"description": "Get Influenced Objects",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "TArray",
					"parameters": []
				},
				{
					"name": "RemoveInfluencedObject",
					"description": "Remove Influenced Object",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InfluencedObject",
							"type": "UTemperatureComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "RemoveTemperature",
					"description": "Remove Temperature",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "AffectedObject",
							"type": "UTemperatureComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetHeatSourceValue",
					"description": "Set Heat Source Value",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewHeatSourceValue",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UHeatSourceComponent",
					"className": "Heat Source Component",
					"shortTitle": "Event Set Heat Source Value",
					"fullTitle": "Event Set Heat Source Value",
					"description": "Add Event",
					"imgPath": "../img/nd_img_SetHeatSourceValue.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "New Heat Source Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UHeatSourceComponent",
					"className": "Heat Source Component",
					"shortTitle": "Set Heat Source Value",
					"fullTitle": "Set Heat Source Value",
					"description": "",
					"imgPath": "../img/nd_img_SetHeatSourceValue.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Heat Source Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Heat Source Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UHeatSourceComponent",
					"className": "Heat Source Component",
					"shortTitle": "Event Remove Temperature",
					"fullTitle": "Event Remove Temperature",
					"description": "Add Event",
					"imgPath": "../img/nd_img_RemoveTemperature.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Affected Object",
							"type": "Temperature Component Object Reference",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UHeatSourceComponent",
					"className": "Heat Source Component",
					"shortTitle": "Remove Temperature",
					"fullTitle": "Remove Temperature",
					"description": "",
					"imgPath": "../img/nd_img_RemoveTemperature.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Heat Source Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Affected Object",
							"type": "Temperature Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UHeatSourceComponent",
					"className": "Heat Source Component",
					"shortTitle": "Event Remove Influenced Object",
					"fullTitle": "Event Remove Influenced Object",
					"description": "Add Event",
					"imgPath": "../img/nd_img_RemoveInfluencedObject.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Influenced Object",
							"type": "Temperature Component Object Reference",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UHeatSourceComponent",
					"className": "Heat Source Component",
					"shortTitle": "Remove Influenced Object",
					"fullTitle": "Remove Influenced Object",
					"description": "",
					"imgPath": "../img/nd_img_RemoveInfluencedObject.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Heat Source Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Influenced Object",
							"type": "Temperature Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UHeatSourceComponent",
					"className": "Heat Source Component",
					"shortTitle": "Get Influenced Objects",
					"fullTitle": "Get Influenced Objects",
					"description": "",
					"imgPath": "../img/nd_img_GetInfluencedObjects.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Heat Source Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Array of Temperature Component Object References",
							"description": "Get Influenced Objects"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UHeatSourceComponent",
					"className": "Heat Source Component",
					"shortTitle": "Event Add Temperature",
					"fullTitle": "Event Add Temperature",
					"description": "Add Event",
					"imgPath": "../img/nd_img_AddTemperature.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Affected Object",
							"type": "Temperature Component Object Reference",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UHeatSourceComponent",
					"className": "Heat Source Component",
					"shortTitle": "Add Temperature",
					"fullTitle": "Add Temperature",
					"description": "",
					"imgPath": "../img/nd_img_AddTemperature.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Heat Source Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Affected Object",
							"type": "Temperature Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UHeatSourceComponent",
					"className": "Heat Source Component",
					"shortTitle": "Event Add Influenced Object",
					"fullTitle": "Event Add Influenced Object",
					"description": "Add Event",
					"imgPath": "../img/nd_img_AddInfluencedObject.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Influenced Object",
							"type": "Temperature Component Object Reference",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UHeatSourceComponent",
					"className": "Heat Source Component",
					"shortTitle": "Add Influenced Object",
					"fullTitle": "Add Influenced Object",
					"description": "",
					"imgPath": "../img/nd_img_AddInfluencedObject.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Heat Source Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Influenced Object",
							"type": "Temperature Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UHighlightEffect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect"
			],
			"path": "Classes/Default/UHighlightEffect",
			"properties": [
				{
					"name": "bUseOverlayMaterial",
					"type": "bool",
					"flags": [
						"Category = Effect|Highlight",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/Effects/HighlightEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OverlayMaterial",
					"type": "TObjectPtr<UMaterialInterface>",
					"flags": [
						"Category = Effect|Highlight",
						"EditCondition = bUseOverlayMaterial",
						"ModuleRelativePath = Interaction/Effects/HighlightEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "DynamicOverlayMaterials",
					"type": "TSet",
					"flags": [
						"ModuleRelativePath = Interaction/Effects/HighlightEffect.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "bReplaceExistingOverlayMaterial",
					"type": "bool",
					"flags": [
						"Category = Effect|Highlight",
						"Comment = // if an overlay material is already assigned, should it be replaced?\n// that the original overlay material will be restored when the effect is stopped\n// if bRestorePreviousMaterialOnStop is true\n",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/Effects/HighlightEffect.h",
						"ToolTip = if an overlay material is already assigned, should it be replaced?\nthat the original overlay material will be restored when the effect is stopped\nif bRestorePreviousMaterialOnStop is true",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "if an overlay material is already assigned, should it be replaced?\nthat the original overlay material will be restored when the effect is stopped\nif bRestorePreviousMaterialOnStop is true"
				},
				{
					"name": "bRestorePreviousMaterialOnStop",
					"type": "bool",
					"flags": [
						"Category = Effect|Highlight",
						"Comment = // if we replace an existing overlay material, should we restore it when the effect is stopped?\n",
						"EditCondition = bReplaceExistingOverlayMaterial",
						"ModuleRelativePath = Interaction/Effects/HighlightEffect.h",
						"ToolTip = if we replace an existing overlay material, should we restore it when the effect is stopped?",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "if we replace an existing overlay material, should we restore it when the effect is stopped?"
				},
				{
					"name": "PreviousOverlayMaterials",
					"type": "TSet",
					"flags": [
						"ModuleRelativePath = Interaction/Effects/HighlightEffect.h",
						"Public"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "AssignOverlayMaterial",
					"description": "Assign Overlay Material",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Material",
							"type": "UMaterialInterface*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "ResetOverlayMaterial",
					"description": "Reset Overlay Material",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UHighlightEffect",
					"className": "Highlight",
					"shortTitle": "Reset Overlay Material",
					"fullTitle": "Reset Overlay Material",
					"description": "",
					"imgPath": "../img/nd_img_ResetOverlayMaterial.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Highlight Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UHighlightEffect",
					"className": "Highlight",
					"shortTitle": "Assign Overlay Material",
					"fullTitle": "Assign Overlay Material",
					"description": "",
					"imgPath": "../img/nd_img_AssignOverlayMaterial.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Highlight Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Material",
							"type": "Material Interface Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UInespectionInteractionEffect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect",
				"UInteractionEffect"
			],
			"path": "Classes/Default/UInespectionInteractionEffect",
			"properties": [
				{
					"name": "StaticMeshAssetToShow",
					"type": "UStaticMesh*",
					"flags": [
						"Category = Effect|FX|Inespection",
						"ModuleRelativePath = Interaction/Effects/InspectionInteractionEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "DistanceFromCamera",
					"type": "float",
					"flags": [
						"Category = Effect|FX|Inespection",
						"Comment = //virtual bool ShouldStart_Implementation() const override;\n",
						"ModuleRelativePath = Interaction/Effects/InspectionInteractionEffect.h",
						"ToolTip = virtual bool ShouldStart_Implementation() const override;",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "virtual bool ShouldStart_Implementation() const override;"
				},
				{
					"name": "UpAndDownAdjusment",
					"type": "float",
					"flags": [
						"Category = Effect|FX|Inespection",
						"ModuleRelativePath = Interaction/Effects/InspectionInteractionEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Rotation",
					"type": "float",
					"flags": [
						"Category = Effect|FX|Inespection",
						"ModuleRelativePath = Interaction/Effects/InspectionInteractionEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "InspectedObjectScale",
					"type": "FVector",
					"flags": [
						"Category = Effect|FX|Inespection",
						"ModuleRelativePath = Interaction/Effects/InspectionInteractionEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "UInspirationComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent",
				"UGameplayTagActorComponent"
			],
			"path": "Classes/Default/UInspirationComponent",
			"properties": [
				{
					"name": "InitialInspirationState",
					"type": "EInspirationState",
					"flags": [
						"Category = InspirationComponent",
						"ModuleRelativePath = Inspiration/InspirationComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bDebugEnabled",
					"type": "bool",
					"flags": [
						"Category = InspirationComponent",
						"ModuleRelativePath = Inspiration/InspirationComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bDesiredInspirationState",
					"type": "bool",
					"flags": [
						"Category = InspirationComponent",
						"ModuleRelativePath = Inspiration/InspirationComponent.h",
						"Public",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "NumInspirations",
					"type": "int32",
					"flags": [
						"Category = InspirationComponent",
						"Comment = // Number of times this component has been inspired. Reset with ResetInspirationCount()\n",
						"ModuleRelativePath = Inspiration/InspirationComponent.h",
						"ToolTip = Number of times this component has been inspired. Reset with ResetInspirationCount()",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": "Number of times this component has been inspired. Reset with ResetInspirationCount()"
				},
				{
					"name": "bUseInspirationCountMax",
					"type": "bool",
					"flags": [
						"Category = InspirationComponent",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Inspiration/InspirationComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "NumInspirationsLimit",
					"type": "int32",
					"flags": [
						"Category = InspirationComponent",
						"Comment = /**\n\t * Maximum number of times this component can be inspired.\n\t * After this number of inspirations, the component will not be able to be inspired again.\n\t * Call ResetInspirationCount to reset the current count.\n\t */",
						"EditCondition = bUseInspirationCountMax",
						"ModuleRelativePath = Inspiration/InspirationComponent.h",
						"ToolTip = Maximum number of times this component can be inspired.\nAfter this number of inspirations, the component will not be able to be inspired again.\nCall ResetInspirationCount to reset the current count.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Maximum number of times this component can be inspired.\nAfter this number of inspirations, the component will not be able to be inspired again.\nCall ResetInspirationCount to reset the current count."
				},
				{
					"name": "bLockFinalInspiration",
					"type": "bool",
					"flags": [
						"Category = InspirationComponent",
						"Comment = // Prevent uninspiration after reaching inspiration limit\n",
						"EditCondition = bUseInspirationCountMax",
						"ModuleRelativePath = Inspiration/InspirationComponent.h",
						"ToolTip = Prevent uninspiration after reaching inspiration limit",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Prevent uninspiration after reaching inspiration limit"
				},
				{
					"name": "TagsToAddToStateWhenInspired",
					"type": "FGameplayTagContainer",
					"flags": [
						"Category = InspirationComponent",
						"Comment = // Tags to add to LittleTrekkerState when inspired\n",
						"ModuleRelativePath = Inspiration/InspirationComponent.h",
						"ToolTip = Tags to add to LittleTrekkerState when inspired",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Tags to add to LittleTrekkerState when inspired"
				},
				{
					"name": "bRemoveTagsWhenUninspired",
					"type": "bool",
					"flags": [
						"Category = InspirationComponent",
						"Comment = // If true, any TagsToAddToStateWhenInspired will be removed when uninspired\n",
						"ModuleRelativePath = Inspiration/InspirationComponent.h",
						"ToolTip = If true, any TagsToAddToStateWhenInspired will be removed when uninspired",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "If true, any TagsToAddToStateWhenInspired will be removed when uninspired"
				},
				{
					"name": "bUseTagOperations",
					"type": "bool",
					"flags": [
						"Category = InspirationComponent",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Inspiration/InspirationComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "TagOperations",
					"type": "TArray",
					"flags": [
						"Category = InspirationComponent",
						"DisplayName = 🏷️ Tag Operations",
						"EditCondition = bUseTagOperations",
						"ModuleRelativePath = Inspiration/InspirationComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bUseInspirationDelay",
					"type": "bool",
					"flags": [
						"Category = InspirationComponent",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Inspiration/InspirationComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "InspirationDelay",
					"type": "float",
					"flags": [
						"Category = InspirationComponent",
						"Comment = // Delay before triggering inspiration events (use with caution, there is no way to cancel the events once they are queued)\n",
						"DisplayName = Inspiration Delay",
						"EditCondition = bUseInspirationDelay",
						"ModuleRelativePath = Inspiration/InspirationComponent.h",
						"ToolTip = Delay before triggering inspiration events (use with caution, there is no way to cancel the events once they are queued)",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Delay before triggering inspiration events (use with caution, there is no way to cancel the events once they are queued)"
				},
				{
					"name": "bUseUninspirationDelay",
					"type": "bool",
					"flags": [
						"Category = InspirationComponent",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Inspiration/InspirationComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "UninspirationDelay",
					"type": "float",
					"flags": [
						"Category = InspirationComponent",
						"DisplayName = Uninspiration Delay",
						"EditCondition = bUseUninspirationDelay",
						"ModuleRelativePath = Inspiration/InspirationComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bUseDelayAddRandomRange",
					"type": "bool",
					"flags": [
						"Category = InspirationComponent",
						"EditCondition = bUseInspirationDelay || bUseUninspirationDelay",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Inspiration/InspirationComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "DelayAddRandomRange",
					"type": "FFloatRange",
					"flags": [
						"Category = InspirationComponent",
						"Comment = // Random delay to add to InspirationDelay/UninspirationDelay\n",
						"DisplayName = Inspiration Delay Add Random Range",
						"EditCondition = bUseDelayAddRandomRange",
						"ModuleRelativePath = Inspiration/InspirationComponent.h",
						"ToolTip = Random delay to add to InspirationDelay/UninspirationDelay",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Random delay to add to InspirationDelay/UninspirationDelay"
				},
				{
					"name": "MinDelay",
					"type": "float",
					"flags": [
						"Category = InspirationComponent",
						"ClampMin = 0.000100",
						"Comment = // minimum delay, mostly to avoid 0 delay\n",
						"ModuleRelativePath = Inspiration/InspirationComponent.h",
						"ToolTip = minimum delay, mostly to avoid 0 delay",
						"UIMin = 0.000100",
						"Protected",
						"BlueprintVisible",
						"Edit"
					],
					"description": "minimum delay, mostly to avoid 0 delay"
				},
				{
					"name": "bIsInspired",
					"type": "bool",
					"flags": [
						"Category = InspirationComponent",
						"ModuleRelativePath = Inspiration/InspirationComponent.h",
						"Protected",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "OnInspiredDelegate_K2",
					"type": "FOnInspirationChange_K2",
					"flags": [
						"Comment = // for Blueprint, so we can use the more powerful non-dynamic delegate in c++\n",
						"DisplayName = OnInspired",
						"ModuleRelativePath = Inspiration/InspirationComponent.h",
						"ToolTip = for Blueprint, so we can use the more powerful non-dynamic delegate in c++",
						"Protected",
						"BlueprintAssignable"
					],
					"description": "for Blueprint, so we can use the more powerful non-dynamic delegate in c++"
				},
				{
					"name": "OnUninspiredDelegate_K2",
					"type": "FOnInspirationChange_K2",
					"flags": [
						"DisplayName = OnUninspired",
						"ModuleRelativePath = Inspiration/InspirationComponent.h",
						"Protected",
						"BlueprintAssignable"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "ApplyTagOperations",
					"description": "Apply Tag Operations",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "CanBeInspired",
					"description": "True if within inspiration count limit (if enabled)\nand ShouldBeInspiredDelegate is true, (if used)\nand ShouldBeInspired BP override is true.\nIgnores current inspiration state.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "CanBeUninspired",
					"description": "Can be Uninspired",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "ClearPendingDelays",
					"description": "Clear any pending delays",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "GetIsInspired",
					"description": "Get Is Inspired",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "GetOrLog",
					"description": "Get or Log",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "UInspirationComponent*",
					"parameters": [
						{
							"name": "Owner",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "Inspire",
					"description": "Inspire",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "IsInspirationLimited",
					"description": "Is Inspiration Limited",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsInspired",
					"description": "Is Inspired",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "OnInspirationChange_K2__DelegateSignature",
					"description": "On Inspiration Change K2  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InspiredActor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnInspired",
					"description": "On Inspired",
					"flags": [
						"Native",
						"Event",
						"Protected",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnUninspired",
					"description": "On Uninspired",
					"flags": [
						"Native",
						"Event",
						"Protected",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "ResetInspirationCount",
					"description": "Reset Inspiration Count",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "SetIsInspired",
					"description": "Set Is Inspired",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bNewDesiredInspirationState",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "ShouldBeInspired",
					"description": "Should be Inspired",
					"flags": [
						"Final",
						"Native",
						"Public",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "ShouldBeInspired_K2",
					"description": "Override this to provide custom logic for whether the component should be inspired",
					"flags": [
						"Native",
						"Event",
						"Protected",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "ShouldBeInspiredDelegate__DelegateSignature",
					"description": "Should be Inspired Delegate  Delegate Signature",
					"flags": [
						"Public",
						"Delegate"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "ToString",
					"description": "To String",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FString",
					"parameters": []
				},
				{
					"name": "Uninspire",
					"description": "Uninspire",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "Update",
					"description": "Update",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationComponent",
					"className": "Inspiration Component",
					"shortTitle": "Update",
					"fullTitle": "Update",
					"description": "",
					"imgPath": "../img/nd_img_Update.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Inspiration Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationComponent",
					"className": "Inspiration Component",
					"shortTitle": "Uninspire",
					"fullTitle": "Uninspire",
					"description": "",
					"imgPath": "../img/nd_img_Uninspire.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Inspiration Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationComponent",
					"className": "Inspiration Component",
					"shortTitle": "To String",
					"fullTitle": "To String",
					"description": "",
					"imgPath": "../img/nd_img_ToString.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Inspiration Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "String",
							"description": "To String"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationComponent",
					"className": "Inspiration Component",
					"shortTitle": "ShouldBeInspired",
					"fullTitle": "ShouldBeInspired",
					"description": "",
					"imgPath": "../img/nd_img_ShouldBeInspired_K2.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Inspiration Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Override this to provide custom logic for whether the component should be inspired"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationComponent",
					"className": "Inspiration Component",
					"shortTitle": "Set Is Inspired",
					"fullTitle": "Set Is Inspired",
					"description": "",
					"imgPath": "../img/nd_img_SetIsInspired.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Inspiration Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Desired Inspiration State",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationComponent",
					"className": "Inspiration Component",
					"shortTitle": "Reset Inspiration Count",
					"fullTitle": "Reset Inspiration Count",
					"description": "",
					"imgPath": "../img/nd_img_ResetInspirationCount.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Inspiration Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationComponent",
					"className": "Inspiration Component",
					"shortTitle": "Event On Uninspired",
					"fullTitle": "Event On Uninspired",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnUninspired.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationComponent",
					"className": "Inspiration Component",
					"shortTitle": "Event On Inspired",
					"fullTitle": "Event On Inspired",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnInspired.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationComponent",
					"className": "Inspiration Component",
					"shortTitle": "Is Inspired",
					"fullTitle": "Is Inspired",
					"description": "",
					"imgPath": "../img/nd_img_IsInspired.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Inspiration Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Inspired"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationComponent",
					"className": "Inspiration Component",
					"shortTitle": "Is Inspiration Limited",
					"fullTitle": "Is Inspiration Limited",
					"description": "",
					"imgPath": "../img/nd_img_IsInspirationLimited.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Inspiration Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Inspiration Limited"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationComponent",
					"className": "Inspiration Component",
					"shortTitle": "Inspire",
					"fullTitle": "Inspire",
					"description": "",
					"imgPath": "../img/nd_img_Inspire.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Inspiration Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationComponent",
					"className": "Inspiration Component",
					"shortTitle": "Get Inspiration Component Or Log",
					"fullTitle": "Get Inspiration Component Or Log",
					"description": "Inspiration",
					"imgPath": "../img/nd_img_GetOrLog.png",
					"inputs": [
						{
							"name": "Owner",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Inspiration Component Object Reference",
							"description": "Get or Log"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationComponent",
					"className": "Inspiration Component",
					"shortTitle": "Get Is Inspired",
					"fullTitle": "Get Is Inspired",
					"description": "",
					"imgPath": "../img/nd_img_GetIsInspired.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Inspiration Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Get Is Inspired"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationComponent",
					"className": "Inspiration Component",
					"shortTitle": "Clear Pending Delays",
					"fullTitle": "Clear Pending Delays",
					"description": "",
					"imgPath": "../img/nd_img_ClearPendingDelays.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Inspiration Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationComponent",
					"className": "Inspiration Component",
					"shortTitle": "Can be Uninspired",
					"fullTitle": "Can be Uninspired",
					"description": "",
					"imgPath": "../img/nd_img_CanBeUninspired.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Inspiration Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Can be Uninspired"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationComponent",
					"className": "Inspiration Component",
					"shortTitle": "Can be Inspired",
					"fullTitle": "Can be Inspired",
					"description": "",
					"imgPath": "../img/nd_img_CanBeInspired.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Inspiration Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "True if within inspiration count limit (if enabled)\nand ShouldBeInspiredDelegate is true, (if used)\nand ShouldBeInspired BP override is true.\nIgnores current inspiration state."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationComponent",
					"className": "Inspiration Component",
					"shortTitle": "Event Apply Tag Operations",
					"fullTitle": "Event Apply Tag Operations",
					"description": "Add Event",
					"imgPath": "../img/nd_img_ApplyTagOperations.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationComponent",
					"className": "Inspiration Component",
					"shortTitle": "Apply Tag Operations",
					"fullTitle": "Apply Tag Operations",
					"description": "",
					"imgPath": "../img/nd_img_ApplyTagOperations.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Inspiration Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UInspirationEffect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect"
			],
			"path": "Classes/Default/UInspirationEffect",
			"properties": [],
			"functions": []
		},
		{
			"className": "UInspirationMissionBase",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UInspirationMissionBase",
			"properties": [
				{
					"name": "OnUpdate",
					"type": "FOnUpdate",
					"flags": [
						"Category = Default",
						"ModuleRelativePath = Inspiration/InspirationMissionBase.h",
						"Public",
						"BlueprintAssignable",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OnCompleteDelegate",
					"type": "FOnUpdate",
					"flags": [
						"Category = Default",
						"ModuleRelativePath = Inspiration/InspirationMissionBase.h",
						"Public",
						"BlueprintAssignable",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "MissionTagContribution",
					"type": "FGameplayTag",
					"flags": [
						"Category = Default",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Inspiration/InspirationMissionBase.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bDidComplete",
					"type": "bool",
					"flags": [
						"Category = Default",
						"ModuleRelativePath = Inspiration/InspirationMissionBase.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "OnMissionComplete",
					"description": "On Mission Complete",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnUpdate__DelegateSignature",
					"description": "On Update  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "Update",
					"description": "Update",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InteractingController",
							"type": "APlayerController*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "UpdateCollection",
					"description": "Update Collection",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "bool",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationMissionBase",
					"className": "Inspiration Mission Base",
					"shortTitle": "Update Collection",
					"fullTitle": "Update Collection",
					"description": "",
					"imgPath": "../img/nd_img_UpdateCollection.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Inspiration Mission Base Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Update Collection"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationMissionBase",
					"className": "Inspiration Mission Base",
					"shortTitle": "Event Update",
					"fullTitle": "Event Update",
					"description": "Add Event|Default",
					"imgPath": "../img/nd_img_Update.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Interacting Controller",
							"type": "Player Controller Object Reference",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationMissionBase",
					"className": "Inspiration Mission Base",
					"shortTitle": "Update",
					"fullTitle": "Update",
					"description": "Default",
					"imgPath": "../img/nd_img_Update.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Inspiration Mission Base Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Interacting Controller",
							"type": "Player Controller Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInspirationMissionBase",
					"className": "Inspiration Mission Base",
					"shortTitle": "Event On Mission Complete",
					"fullTitle": "Event On Mission Complete",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnMissionComplete.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UInspireOnInteractEffect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect",
				"UInteractionEffect"
			],
			"path": "Classes/Default/UInspireOnInteractEffect",
			"properties": [
				{
					"name": "bToggle",
					"type": "bool",
					"flags": [
						"Category = InspireOnInteractEffect",
						"Comment = /**\n\t * Determines if the effect should toggle on and off based on inspiration state.\n\t * If false the effect will inspire on start, and un-inspire on stop (or vice versa if TargetInspirationState is false)\n\t */",
						"ModuleRelativePath = Interaction/Effects/InspireOnInteractEffect.h",
						"ToolTip = Determines if the effect should toggle on and off based on inspiration state.\nIf false the effect will inspire on start, and un-inspire on stop (or vice versa if TargetInspirationState is false)",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Determines if the effect should toggle on and off based on inspiration state.\nIf false the effect will inspire on start, and un-inspire on stop (or vice versa if TargetInspirationState is false)"
				},
				{
					"name": "TargetInspirationState",
					"type": "bool",
					"flags": [
						"Category = InspireOnInteractEffect",
						"EditCondition = !bToggle",
						"EditConditionHides",
						"ModuleRelativePath = Interaction/Effects/InspireOnInteractEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "UInteractionModel",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject"
			],
			"path": "Classes/Default/UInteractionModel",
			"properties": [
				{
					"name": "BlockCount",
					"type": "int32",
					"flags": [
						"Category = InteractionModel",
						"ModuleRelativePath = Interaction/InteractionModel.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "InteractorSubsystem",
					"type": "TObjectPtr<UInteractorSubsystem>",
					"flags": [
						"ModuleRelativePath = Interaction/InteractionModel.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "VisibilityRadius",
					"type": "float",
					"flags": [
						"Category = Interaction",
						"Comment = // The radius within which the component is visible.\n",
						"ModuleRelativePath = Interaction/InteractionModel.h",
						"ToolTip = The radius within which the component is visible.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "The radius within which the component is visible."
				},
				{
					"name": "InteractionRadius",
					"type": "float",
					"flags": [
						"Category = Interaction",
						"Comment = // The radius within which interaction with the component is possible.\n",
						"ModuleRelativePath = Interaction/InteractionModel.h",
						"ToolTip = The radius within which interaction with the component is possible.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "The radius within which interaction with the component is possible."
				},
				{
					"name": "bOverrideForwardDotThreshold",
					"type": "bool",
					"flags": [
						"Category = Interaction",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/InteractionModel.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ForwardDotThreshold",
					"type": "float",
					"flags": [
						"Category = Interaction",
						"EditCondition = bOverrideForwardDotThreshold",
						"ModuleRelativePath = Interaction/InteractionModel.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Duration",
					"type": "float",
					"flags": [
						"Category = Interaction",
						"Comment = // The duration of the interaction.\n",
						"ModuleRelativePath = Interaction/InteractionModel.h",
						"ToolTip = The duration of the interaction.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "The duration of the interaction."
				},
				{
					"name": "RequireCanBeInspired",
					"type": "bool",
					"flags": [
						"Category = Interaction",
						"Comment = // Whether the interaction requires the actor to be inspired.\n",
						"ModuleRelativePath = Interaction/InteractionModel.h",
						"ToolTip = Whether the interaction requires the actor to be inspired.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Whether the interaction requires the actor to be inspired."
				},
				{
					"name": "InteractionState",
					"type": "FGameplayTag",
					"flags": [
						"Categories = Interaction",
						"Category = Interaction",
						"Comment = // The current state of the interaction.\n",
						"ModuleRelativePath = Interaction/InteractionModel.h",
						"ToolTip = The current state of the interaction.",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": "The current state of the interaction."
				},
				{
					"name": "InteractionPhase",
					"type": "FGameplayTag",
					"flags": [
						"Categories = Interaction.Phase",
						"Category = Interaction",
						"Comment = // The phase of the interaction.\n",
						"ModuleRelativePath = Interaction/InteractionModel.h",
						"ToolTip = The phase of the interaction.",
						"Public",
						"BlueprintVisible"
					],
					"description": "The phase of the interaction."
				},
				{
					"name": "Trigger",
					"type": "TObjectPtr<UInteractiveTriggerBase>",
					"flags": [
						"Category = Interaction",
						"Comment = // How to trigger the interaction e.g. InputAction, Proximity, etc.\n",
						"DisplayName = 🎯 Trigger",
						"EditInline = true",
						"ModuleRelativePath = Interaction/InteractionModel.h",
						"ShowInnerProperties",
						"ShowOnlyInnerProperties",
						"TitleProperty = Title",
						"ToolTip = How to trigger the interaction e.g. InputAction, Proximity, etc.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "How to trigger the interaction e.g. InputAction, Proximity, etc."
				},
				{
					"name": "bUseTriggerCountMax",
					"type": "bool",
					"flags": [
						"Category = Interaction",
						"Comment = // Whether to use a maximum trigger count.\n",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/InteractionModel.h",
						"ToolTip = Whether to use a maximum trigger count.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Whether to use a maximum trigger count."
				},
				{
					"name": "TriggerCountMax",
					"type": "int32",
					"flags": [
						"Category = Interaction",
						"Comment = // The maximum number of times the interaction can be triggered.\n",
						"DisplayName = Use Trigger Count Max",
						"EditCondition = bUseTriggerCountMax",
						"ModuleRelativePath = Interaction/InteractionModel.h",
						"ToolTip = The maximum number of times the interaction can be triggered.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "The maximum number of times the interaction can be triggered."
				},
				{
					"name": "TriggerCount",
					"type": "int32",
					"flags": [
						"Category = InteractionModel",
						"Comment = // The number of times the interaction has been triggered.\n",
						"ModuleRelativePath = Interaction/InteractionModel.h",
						"ToolTip = The number of times the interaction has been triggered.",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": "The number of times the interaction has been triggered."
				},
				{
					"name": "bUserEnabled",
					"type": "bool",
					"flags": [
						"Category = Interaction",
						"DisplayName = 💡 Enabled",
						"DisplayPriority = 0",
						"ModuleRelativePath = Interaction/InteractionModel.h",
						"Protected",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "BeginPlay",
					"description": "Called when the game starts or when spawned.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "BlockInteraction",
					"description": "Block Interaction",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "CanInteract",
					"description": "Can Interact",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "CheckCanInteract",
					"description": "Computes whether interaction can be initiated.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "CheckDelegate__DelegateSignature",
					"description": "Check Delegate  Delegate Signature",
					"flags": [
						"Public",
						"Delegate"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "InteractingController",
							"type": "APlayerController*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "CheckHasFocus",
					"description": "Computes whether the component has focus.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "CheckInteractionState",
					"description": "Calculates the interaction state based on the current state of the component.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FGameplayTag",
					"parameters": []
				},
				{
					"name": "CheckIsBlocked",
					"description": "blocked from interacting?",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "CheckIsValidInteraction",
					"description": "Computes whether interaction should be valid.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "CheckRequiresFocus",
					"description": "Computes whether the component needs focus to be interacted with.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "ClearListeners",
					"description": "Clears all listeners.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "Disable",
					"description": "Disables the component.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "Enable",
					"description": "Enables the component.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "GetActiveIndex",
					"description": "Returns the active index of the state.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "int32",
					"parameters": []
				},
				{
					"name": "GetIcon",
					"description": "Returns the icon for the interaction.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "const FSlateBrush&",
					"parameters": []
				},
				{
					"name": "GetIndicatorOpacity",
					"description": "Get Indicator Opacity",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "float",
					"parameters": []
				},
				{
					"name": "GetInteractingPlayerController",
					"description": "Get Interacting Player Controller",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "APlayerController*",
					"parameters": []
				},
				{
					"name": "GetInteractingPlayerPawn",
					"description": "Get Interacting Player Pawn",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "APawn*",
					"parameters": []
				},
				{
					"name": "GetInteractionPhase",
					"description": "Returns the phase of the interaction.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FGameplayTag",
					"parameters": []
				},
				{
					"name": "GetInteractionType",
					"description": "Returns the type of the interaction.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "EInteractionTriggerType",
					"parameters": []
				},
				{
					"name": "GetInteractorComponent",
					"description": "Get Interactor Component",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UInteractorComponent*",
					"parameters": []
				},
				{
					"name": "GetOwner",
					"description": "Returns the actor that owns the component.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "AActor*",
					"parameters": []
				},
				{
					"name": "GetOwningComponent",
					"description": "Get Owning Component",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UInteractiveComponent*",
					"parameters": []
				},
				{
					"name": "GetPhaseAsText",
					"description": "Get Phase as Text",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FText",
					"parameters": []
				},
				{
					"name": "GetProgress",
					"description": "Get Progress",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "float",
					"parameters": []
				},
				{
					"name": "GetStateAsText",
					"description": "Returns the state as text.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FText",
					"parameters": []
				},
				{
					"name": "HasFocus",
					"description": "Has Focus",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "HasIcon",
					"description": "Has Icon",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "Init",
					"description": "Initializes the state with the given owning component.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InOwningComponent",
							"type": "UInteractiveComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "IsBlocked",
					"description": "Is Blocked",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsEnabled",
					"description": "True if interaction is enabled, via cached gameplay tags.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsInRange",
					"description": "True if component is in interactive range, via cached gameplay tags.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsInteracting",
					"description": "Is Interacting",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsValidInteraction",
					"description": "True if interaction would be valid, via cached gameplay tags.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsVisible",
					"description": "True if component is in visibility range, via cached gameplay tags.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "RemoveAllListenersFor",
					"description": "Removes all listeners for the given object.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Object",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "ResetInteractionPhase",
					"description": "Reset Interaction Phase",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "SetInteractionPhase",
					"description": "Sets the phase of the interaction.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InNewPhase",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Categories = Interaction.Phase",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetInteractionState",
					"description": "Sets the state of the interaction.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InNewState",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Categories = Interaction",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetIsInteracting",
					"description": "Sets whether the component is interacting.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bGetIsInteracting",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "Tick",
					"description": "Tick",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "DeltaTime",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "TransitionPhase_K2",
					"description": "Transition Phase K2",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "UInteractionModel*",
					"parameters": [
						{
							"name": "NewPhase",
							"type": "const FGameplayTag",
							"description": "",
							"flags": [
								"Categories = Interaction.Phase",
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "IsValidTransition",
							"type": "EValidTransition",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						}
					]
				},
				{
					"name": "UnblockInteraction",
					"description": "Unblock Interaction",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "Update",
					"description": "Updates the state.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Update",
					"fullTitle": "Update",
					"description": "",
					"imgPath": "../img/nd_img_Update.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Unblock Interaction",
					"fullTitle": "Unblock Interaction",
					"description": "",
					"imgPath": "../img/nd_img_UnblockInteraction.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "TransitionPhase",
					"fullTitle": "TransitionPhase",
					"description": "",
					"imgPath": "../img/nd_img_TransitionPhase_K2.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Phase",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Is Valid",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Is Not Valid",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "Transition Phase K2"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Tick",
					"fullTitle": "Tick",
					"description": "",
					"imgPath": "../img/nd_img_Tick.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Delta Time",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Set Is Interacting",
					"fullTitle": "Set Is Interacting",
					"description": "",
					"imgPath": "../img/nd_img_SetIsInteracting.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Get Is Interacting",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Set Interaction State",
					"fullTitle": "Set Interaction State",
					"description": "",
					"imgPath": "../img/nd_img_SetInteractionState.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In New State",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Set Interaction Phase",
					"fullTitle": "Set Interaction Phase",
					"description": "",
					"imgPath": "../img/nd_img_SetInteractionPhase.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In New Phase",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Reset Interaction Phase",
					"fullTitle": "Reset Interaction Phase",
					"description": "",
					"imgPath": "../img/nd_img_ResetInteractionPhase.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Remove All Listeners For",
					"fullTitle": "Remove All Listeners For",
					"description": "",
					"imgPath": "../img/nd_img_RemoveAllListenersFor.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Object",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Is Visible",
					"fullTitle": "Is Visible",
					"description": "",
					"imgPath": "../img/nd_img_IsVisible.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "True if component is in visibility range, via cached gameplay tags."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Is Valid Interaction",
					"fullTitle": "Is Valid Interaction",
					"description": "",
					"imgPath": "../img/nd_img_IsValidInteraction.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "True if interaction would be valid, via cached gameplay tags."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Is Interacting",
					"fullTitle": "Is Interacting",
					"description": "",
					"imgPath": "../img/nd_img_IsInteracting.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Interacting"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Is in Range",
					"fullTitle": "Is in Range",
					"description": "",
					"imgPath": "../img/nd_img_IsInRange.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "True if component is in interactive range, via cached gameplay tags."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Is Enabled",
					"fullTitle": "Is Enabled",
					"description": "",
					"imgPath": "../img/nd_img_IsEnabled.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "True if interaction is enabled, via cached gameplay tags."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Is Blocked",
					"fullTitle": "Is Blocked",
					"description": "",
					"imgPath": "../img/nd_img_IsBlocked.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Blocked"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Init",
					"fullTitle": "Init",
					"description": "",
					"imgPath": "../img/nd_img_Init.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Owning Component",
							"type": "Interactive Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Has Icon",
					"fullTitle": "Has Icon",
					"description": "",
					"imgPath": "../img/nd_img_HasIcon.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Has Icon"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Has Focus",
					"fullTitle": "Has Focus",
					"description": "",
					"imgPath": "../img/nd_img_HasFocus.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Has Focus"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Get State as Text",
					"fullTitle": "Get State as Text",
					"description": "",
					"imgPath": "../img/nd_img_GetStateAsText.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Text",
							"description": "Returns the state as text."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Get Progress",
					"fullTitle": "Get Progress",
					"description": "",
					"imgPath": "../img/nd_img_GetProgress.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Progress"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Get Phase as Text",
					"fullTitle": "Get Phase as Text",
					"description": "",
					"imgPath": "../img/nd_img_GetPhaseAsText.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Text",
							"description": "Get Phase as Text"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Get Owning Component",
					"fullTitle": "Get Owning Component",
					"description": "",
					"imgPath": "../img/nd_img_GetOwningComponent.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Interactive Object Reference",
							"description": "Get Owning Component"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Get Owner",
					"fullTitle": "Get Owner",
					"description": "",
					"imgPath": "../img/nd_img_GetOwner.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Actor Object Reference",
							"description": "Returns the actor that owns the component."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Get Interactor Component",
					"fullTitle": "Get Interactor Component",
					"description": "",
					"imgPath": "../img/nd_img_GetInteractorComponent.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Interactor Component Object Reference",
							"description": "Get Interactor Component"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Get Interaction Type",
					"fullTitle": "Get Interaction Type",
					"description": "",
					"imgPath": "../img/nd_img_GetInteractionType.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "EInteractionTriggerType Enum",
							"description": "Returns the type of the interaction."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Get Interaction Phase",
					"fullTitle": "Get Interaction Phase",
					"description": "",
					"imgPath": "../img/nd_img_GetInteractionPhase.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Gameplay Tag Structure",
							"description": "Returns the phase of the interaction."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Get Interacting Player Pawn",
					"fullTitle": "Get Interacting Player Pawn",
					"description": "",
					"imgPath": "../img/nd_img_GetInteractingPlayerPawn.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Pawn Object Reference",
							"description": "Get Interacting Player Pawn"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Get Interacting Player Controller",
					"fullTitle": "Get Interacting Player Controller",
					"description": "",
					"imgPath": "../img/nd_img_GetInteractingPlayerController.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Player Controller Object Reference",
							"description": "Get Interacting Player Controller"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Get Indicator Opacity",
					"fullTitle": "Get Indicator Opacity",
					"description": "",
					"imgPath": "../img/nd_img_GetIndicatorOpacity.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Indicator Opacity"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Get Icon",
					"fullTitle": "Get Icon",
					"description": "",
					"imgPath": "../img/nd_img_GetIcon.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Slate Brush Structure (by ref)",
							"description": "Returns the icon for the interaction."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Get Active Index",
					"fullTitle": "Get Active Index",
					"description": "",
					"imgPath": "../img/nd_img_GetActiveIndex.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Integer",
							"description": "Returns the active index of the state."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Enable",
					"fullTitle": "Enable",
					"description": "",
					"imgPath": "../img/nd_img_Enable.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Disable",
					"fullTitle": "Disable",
					"description": "",
					"imgPath": "../img/nd_img_Disable.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Clear Listeners",
					"fullTitle": "Clear Listeners",
					"description": "",
					"imgPath": "../img/nd_img_ClearListeners.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Check Requires Focus",
					"fullTitle": "Check Requires Focus",
					"description": "",
					"imgPath": "../img/nd_img_CheckRequiresFocus.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Computes whether the component needs focus to be interacted with."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Check Is Valid Interaction",
					"fullTitle": "Check Is Valid Interaction",
					"description": "",
					"imgPath": "../img/nd_img_CheckIsValidInteraction.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Computes whether interaction should be valid."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Check Is Blocked",
					"fullTitle": "Check Is Blocked",
					"description": "",
					"imgPath": "../img/nd_img_CheckIsBlocked.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "blocked from interacting?"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Check Interaction State",
					"fullTitle": "Check Interaction State",
					"description": "",
					"imgPath": "../img/nd_img_CheckInteractionState.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Gameplay Tag Structure",
							"description": "Calculates the interaction state based on the current state of the component."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Check Has Focus",
					"fullTitle": "Check Has Focus",
					"description": "",
					"imgPath": "../img/nd_img_CheckHasFocus.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Computes whether the component has focus."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Check Can Interact",
					"fullTitle": "Check Can Interact",
					"description": "",
					"imgPath": "../img/nd_img_CheckCanInteract.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Computes whether interaction can be initiated."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Can Interact",
					"fullTitle": "Can Interact",
					"description": "",
					"imgPath": "../img/nd_img_CanInteract.png",
					"inputs": [
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Can Interact"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Block Interaction",
					"fullTitle": "Block Interaction",
					"description": "",
					"imgPath": "../img/nd_img_BlockInteraction.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractionModel",
					"className": "⚙️ Interaction Model",
					"shortTitle": "Begin Play",
					"fullTitle": "Begin Play",
					"description": "",
					"imgPath": "../img/nd_img_BeginPlay.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UTransitionPhaseAsyncNode",
			"classHierarchy": [
				"UObject",
				"UBlueprintAsyncActionBase"
			],
			"path": "Classes/Default/UTransitionPhaseAsyncNode",
			"properties": [
				{
					"name": "Model",
					"type": "TObjectPtr<UInteractionModel>",
					"flags": [
						"ModuleRelativePath = Interaction/InteractionModel.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "NewPhase",
					"type": "FGameplayTag",
					"flags": [
						"Categories = Interaction.Phase",
						"ModuleRelativePath = Interaction/InteractionModel.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "Success",
					"type": "FAsyncOutputPin",
					"flags": [
						"ModuleRelativePath = Interaction/InteractionModel.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "Failed",
					"type": "FAsyncOutputPin",
					"flags": [
						"ModuleRelativePath = Interaction/InteractionModel.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "AsyncOutputPin__DelegateSignature",
					"description": "Async Output Pin  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Model",
							"type": "UInteractionModel*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "TransitionPhaseAsync",
					"description": "Transition Phase Async",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "UTransitionPhaseAsyncNode*",
					"parameters": [
						{
							"name": "InModel",
							"type": "UInteractionModel*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "InNewPhase",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Categories = Interaction.Phase",
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UTransitionPhaseAsyncNode",
					"className": "Transition Phase Async Node",
					"shortTitle": "Transition Phase Async",
					"fullTitle": "Transition Phase Async",
					"description": "Interaction",
					"imgPath": "../img/nd_img_UK2Node_AsyncAction.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "In Model",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In New Phase",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Success",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Failed",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Model",
							"type": "⚙️ Interaction Model Object Reference",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UTransitionPhaseTriggerAsyncNode",
			"classHierarchy": [
				"UObject",
				"UBlueprintAsyncActionBase",
				"UTransitionPhaseAsyncNode"
			],
			"path": "Classes/Default/UTransitionPhaseTriggerAsyncNode",
			"properties": [],
			"functions": []
		},
		{
			"className": "AInteractiveActor",
			"classHierarchy": [
				"UObject",
				"AActor"
			],
			"path": "Classes/Default/AInteractiveActor",
			"properties": [
				{
					"name": "InteractiveComponent",
					"type": "TObjectPtr<UInteractiveComponent>",
					"flags": [
						"Category = Interaction",
						"EditInline = true",
						"ModuleRelativePath = Interaction/InteractiveActor.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				},
				{
					"name": "Inspiration",
					"type": "TObjectPtr<UInspirationComponent>",
					"flags": [
						"Category = Inspiration",
						"Comment = /** Inspiration component, triggers when player is in range */",
						"EditInline = true",
						"ModuleRelativePath = Interaction/InteractiveActor.h",
						"ToolTip = Inspiration component, triggers when player is in range",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": "Inspiration component, triggers when player is in range"
				},
				{
					"name": "AutoInspiration",
					"type": "TObjectPtr<UAutoInspirationComponent>",
					"flags": [
						"Category = Inspiration",
						"EditInline = true",
						"ModuleRelativePath = Interaction/InteractiveActor.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				},
				{
					"name": "Mesh",
					"type": "TObjectPtr<UMeshComponent>",
					"flags": [
						"Category = InteractiveActor",
						"EditInline = true",
						"ModuleRelativePath = Interaction/InteractiveActor.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				},
				{
					"name": "GameplayTagsComponent",
					"type": "TObjectPtr<UGameplayTagContainerComponent>",
					"flags": [
						"Category = InteractiveActor",
						"EditInline = true",
						"ModuleRelativePath = Interaction/InteractiveActor.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				},
				{
					"name": "AddGameplayTags",
					"type": "FGameplayTagContainer",
					"flags": [
						"Category = InteractiveActor",
						"Comment = /** Gameplay tags to add when interacted with */",
						"ModuleRelativePath = Interaction/InteractiveActor.h",
						"ToolTip = Gameplay tags to add when interacted with",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Gameplay tags to add when interacted with"
				}
			],
			"functions": [
				{
					"name": "IsValidInteraction",
					"description": "override this to control whether an interaction is valid",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "InteractorController",
							"type": "APlayerController*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnInspired",
					"description": "On Inspired",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnTriggered",
					"description": "On Triggered",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnUninspired",
					"description": "On Uninspired",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetSkeletalMesh",
					"description": "Set Skeletal Mesh",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewMesh",
							"type": "USkeletalMesh*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetStaticMesh",
					"description": "Set Static Mesh",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewMesh",
							"type": "UStaticMesh*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "AInteractiveActor",
					"className": "Interactive Actor",
					"shortTitle": "Set Static Mesh",
					"fullTitle": "Set Static Mesh",
					"description": "",
					"imgPath": "../img/nd_img_SetStaticMesh.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Interactive Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Mesh",
							"type": "Static Mesh Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "AInteractiveActor",
					"className": "Interactive Actor",
					"shortTitle": "Set Skeletal Mesh",
					"fullTitle": "Set Skeletal Mesh",
					"description": "",
					"imgPath": "../img/nd_img_SetSkeletalMesh.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Interactive Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Mesh",
							"type": "Skeletal Mesh Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "AInteractiveActor",
					"className": "Interactive Actor",
					"shortTitle": "Event On Uninspired",
					"fullTitle": "Event On Uninspired",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnUninspired.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "AInteractiveActor",
					"className": "Interactive Actor",
					"shortTitle": "Event On Triggered",
					"fullTitle": "Event On Triggered",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnTriggered.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "AInteractiveActor",
					"className": "Interactive Actor",
					"shortTitle": "Event On Inspired",
					"fullTitle": "Event On Inspired",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnInspired.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "AInteractiveActor",
					"className": "Interactive Actor",
					"shortTitle": "Is Valid Interaction",
					"fullTitle": "Is Valid Interaction",
					"description": "",
					"imgPath": "../img/nd_img_IsValidInteraction.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interactive Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Interactor Controller",
							"type": "Player Controller Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "override this to control whether an interaction is valid"
						}
					]
				}
			]
		},
		{
			"className": "UInteractiveComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent",
				"USceneComponent"
			],
			"path": "Classes/Default/UInteractiveComponent",
			"properties": [
				{
					"name": "Model",
					"type": "TObjectPtr<UInteractionModel>",
					"flags": [
						"Category = InteractiveComponent",
						"Comment = // The state of this component.\n",
						"EditInline = true",
						"ModuleRelativePath = Interaction/InteractiveComponent.h",
						"ToolTip = The state of this component.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "The state of this component."
				},
				{
					"name": "OnVisibleDelegate",
					"type": "FInteractiveDelegate",
					"flags": [
						"Comment = // Delegate for when the component becomes visible.\n",
						"DisplayName = OnVisible",
						"ModuleRelativePath = Interaction/InteractiveComponent.h",
						"ToolTip = Delegate for when the component becomes visible.",
						"Public",
						"BlueprintAssignable"
					],
					"description": "Delegate for when the component becomes visible."
				},
				{
					"name": "OnHiddenDelegate",
					"type": "FInteractiveDelegate",
					"flags": [
						"Comment = // Delegate for when the component becomes hidden.\n",
						"DisplayName = OnHide",
						"ModuleRelativePath = Interaction/InteractiveComponent.h",
						"ToolTip = Delegate for when the component becomes hidden.",
						"Public",
						"BlueprintAssignable"
					],
					"description": "Delegate for when the component becomes hidden."
				},
				{
					"name": "OnVisibilityChangedDelegate",
					"type": "FInteractiveDelegate",
					"flags": [
						"Comment = // Delegate for when the visibility of the component changes.\n",
						"DisplayName = OnVisibilityChanged",
						"ModuleRelativePath = Interaction/InteractiveComponent.h",
						"ToolTip = Delegate for when the visibility of the component changes.",
						"Public",
						"BlueprintAssignable"
					],
					"description": "Delegate for when the visibility of the component changes."
				},
				{
					"name": "OnEnabledChangedDelegate",
					"type": "FInteractiveDelegate",
					"flags": [
						"Comment = // Delegate for when the enabled state of the component changes.\n",
						"DisplayName = OnEnabledChanged",
						"ModuleRelativePath = Interaction/InteractiveComponent.h",
						"ToolTip = Delegate for when the enabled state of the component changes.",
						"Public",
						"BlueprintAssignable"
					],
					"description": "Delegate for when the enabled state of the component changes."
				},
				{
					"name": "OnInInteractionRangeChangedDelegate",
					"type": "FInteractiveDelegate",
					"flags": [
						"Comment = // Delegate for when the component enters or leaves the interaction range.\n",
						"DisplayName = OnInInteractionRangeChanged",
						"ModuleRelativePath = Interaction/InteractiveComponent.h",
						"ToolTip = Delegate for when the component enters or leaves the interaction range.",
						"Public",
						"BlueprintAssignable"
					],
					"description": "Delegate for when the component enters or leaves the interaction range."
				},
				{
					"name": "OnIsValidInteractionChangedDelegate",
					"type": "FInteractiveDelegate",
					"flags": [
						"Comment = // Delegate for when the component's interaction validity changes.\n",
						"DisplayName = OnIsValidInteractionChanged",
						"ModuleRelativePath = Interaction/InteractiveComponent.h",
						"ToolTip = Delegate for when the component's interaction validity changes.",
						"Public",
						"BlueprintAssignable"
					],
					"description": "Delegate for when the component's interaction validity changes."
				},
				{
					"name": "OnCanInteractChangedDelegate",
					"type": "FInteractiveDelegate",
					"flags": [
						"DisplayName = OnCanInteractChanged",
						"ModuleRelativePath = Interaction/InteractiveComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnFocusDelegate",
					"type": "FInteractiveDelegate",
					"flags": [
						"Comment = // Delegate for when the component gains focus.\n",
						"DisplayName = OnFocus",
						"ModuleRelativePath = Interaction/InteractiveComponent.h",
						"ToolTip = Delegate for when the component gains focus.",
						"Public",
						"BlueprintAssignable"
					],
					"description": "Delegate for when the component gains focus."
				},
				{
					"name": "OnBlurDelegate",
					"type": "FInteractiveDelegate",
					"flags": [
						"Comment = // Delegate for when the component loses focus.\n",
						"DisplayName = OnBlur",
						"ModuleRelativePath = Interaction/InteractiveComponent.h",
						"ToolTip = Delegate for when the component loses focus.",
						"Public",
						"BlueprintAssignable"
					],
					"description": "Delegate for when the component loses focus."
				},
				{
					"name": "OnInteractStartDelegate",
					"type": "FInteractiveDelegate",
					"flags": [
						"Comment = // Delegate for when interaction with the component starts.\n",
						"DisplayName = OnInteractStart",
						"ModuleRelativePath = Interaction/InteractiveComponent.h",
						"ToolTip = Delegate for when interaction with the component starts.",
						"Public",
						"BlueprintAssignable"
					],
					"description": "Delegate for when interaction with the component starts."
				},
				{
					"name": "OnInteractStopDelegate",
					"type": "FInteractiveDelegate",
					"flags": [
						"Comment = // Delegate for when interaction with the component stops.\n",
						"DisplayName = OnInteractStop",
						"ModuleRelativePath = Interaction/InteractiveComponent.h",
						"ToolTip = Delegate for when interaction with the component stops.",
						"Public",
						"BlueprintAssignable"
					],
					"description": "Delegate for when interaction with the component stops."
				},
				{
					"name": "OnInteractTriggerDelegate",
					"type": "FInteractiveDelegate",
					"flags": [
						"Comment = // Delegate for when the component is interacted with.\n",
						"DisplayName = OnInteractTrigger",
						"ModuleRelativePath = Interaction/InteractiveComponent.h",
						"ToolTip = Delegate for when the component is interacted with.",
						"Public",
						"BlueprintAssignable"
					],
					"description": "Delegate for when the component is interacted with."
				},
				{
					"name": "OnInteractCompleteDelegate",
					"type": "FInteractiveDelegate",
					"flags": [
						"Comment = // Delegate for when interaction with the component completes.\n",
						"DisplayName = OnInteractComplete",
						"ModuleRelativePath = Interaction/InteractiveComponent.h",
						"ToolTip = Delegate for when interaction with the component completes.",
						"Public",
						"BlueprintAssignable"
					],
					"description": "Delegate for when interaction with the component completes."
				},
				{
					"name": "OnInteractCancelDelegate",
					"type": "FInteractiveDelegate",
					"flags": [
						"Comment = // Delegate for when interaction with the component is cancelled.\n",
						"DisplayName = OnInteractCancel",
						"ModuleRelativePath = Interaction/InteractiveComponent.h",
						"ToolTip = Delegate for when interaction with the component is cancelled.",
						"Public",
						"BlueprintAssignable"
					],
					"description": "Delegate for when interaction with the component is cancelled."
				},
				{
					"name": "OnInteractOngoingDelegate",
					"type": "FInteractiveDelegate",
					"flags": [
						"Comment = // Delegate for when interaction with the component is ongoing.\n",
						"DisplayName = OnInteractOngoing",
						"ModuleRelativePath = Interaction/InteractiveComponent.h",
						"ToolTip = Delegate for when interaction with the component is ongoing.",
						"Public",
						"BlueprintAssignable"
					],
					"description": "Delegate for when interaction with the component is ongoing."
				}
			],
			"functions": [
				{
					"name": "Blur",
					"description": "Blurs the PlayerController from this component.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "PlayerController",
							"type": "APlayerController*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "Focus",
					"description": "Focuses the PlayerController on this component.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "PlayerController",
							"type": "APlayerController*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "Get",
					"description": "Returns the InteractiveComponent of the given Actor if it exists, otherwise returns nullptr.",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "UInteractiveComponent*",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetInteractionType",
					"description": "Returns the type of interaction this component supports.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "EInteractionTriggerType",
					"parameters": []
				},
				{
					"name": "HasComponent",
					"description": "Checks if the given Actor has an InteractiveComponent.",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Actor",
							"type": "const AActor*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "IsInteractionValid",
					"description": "Checks if the given PlayerController can interact with this component.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Controller",
							"type": "APlayerController*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractiveComponent",
					"className": "Interactive",
					"shortTitle": "Is Interaction Valid",
					"fullTitle": "Is Interaction Valid",
					"description": "",
					"imgPath": "../img/nd_img_IsInteractionValid.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interactive Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Controller",
							"type": "Player Controller Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Checks if the given PlayerController can interact with this component."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractiveComponent",
					"className": "Interactive",
					"shortTitle": "Has Component",
					"fullTitle": "Has Component",
					"description": "",
					"imgPath": "../img/nd_img_HasComponent.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Checks if the given Actor has an InteractiveComponent."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractiveComponent",
					"className": "Interactive",
					"shortTitle": "Get Interaction Type",
					"fullTitle": "Get Interaction Type",
					"description": "",
					"imgPath": "../img/nd_img_GetInteractionType.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interactive Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "EInteractionTriggerType Enum",
							"description": "Returns the type of interaction this component supports."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractiveComponent",
					"className": "Interactive",
					"shortTitle": "Get Interactive Component",
					"fullTitle": "Get Interactive Component",
					"description": "",
					"imgPath": "../img/nd_img_Get.png",
					"inputs": [
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Interactive Object Reference",
							"description": "Returns the InteractiveComponent of the given Actor if it exists, otherwise returns nullptr."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractiveComponent",
					"className": "Interactive",
					"shortTitle": "Focus",
					"fullTitle": "Focus",
					"description": "",
					"imgPath": "../img/nd_img_Focus.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Interactive Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Player Controller",
							"type": "Player Controller Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractiveComponent",
					"className": "Interactive",
					"shortTitle": "Blur",
					"fullTitle": "Blur",
					"description": "",
					"imgPath": "../img/nd_img_Blur.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Interactive Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Player Controller",
							"type": "Player Controller Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "AInteractiveFX",
			"classHierarchy": [
				"UObject",
				"AActor",
				"ANiagaraActor"
			],
			"path": "Classes/Default/AInteractiveFX",
			"properties": [
				{
					"name": "Interactive",
					"type": "TObjectPtr<UInteractiveComponent>",
					"flags": [
						"Category = InteractiveFX",
						"EditInline = true",
						"ModuleRelativePath = Biome_01/Lighthouse/InteractiveFX.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				},
				{
					"name": "Inspiration",
					"type": "TObjectPtr<UInspirationComponent>",
					"flags": [
						"Category = InteractiveFX",
						"EditInline = true",
						"ModuleRelativePath = Biome_01/Lighthouse/InteractiveFX.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				},
				{
					"name": "GameplayTagContainerComponent",
					"type": "TObjectPtr<UGameplayTagContainerComponent>",
					"flags": [
						"Category = InteractiveFX",
						"EditInline = true",
						"ModuleRelativePath = Biome_01/Lighthouse/InteractiveFX.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "OnInit",
					"description": "On Init",
					"flags": [
						"Native",
						"Event",
						"Protected",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "AInteractiveFX",
					"className": "Interactive FX",
					"shortTitle": "Event On Init",
					"fullTitle": "Event On Init",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnInit.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UInteractiveTriggerBase",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject"
			],
			"path": "Classes/Default/UInteractiveTriggerBase",
			"properties": [
				{
					"name": "Model",
					"type": "TWeakObjectPtr<UInteractionModel>",
					"flags": [
						"ModuleRelativePath = Interaction/Triggers/InteractiveTrigger.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "bRequiresFocus",
					"type": "bool",
					"flags": [
						"Category = Interaction",
						"ModuleRelativePath = Interaction/Triggers/InteractiveTrigger.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "TriggerRequirements",
					"type": "FGameplayTagRequirements",
					"flags": [
						"Category = Interaction",
						"Comment = // The conditions for Triggering the interaction.\n",
						"ModuleRelativePath = Interaction/Triggers/InteractiveTrigger.h",
						"ToolTip = The conditions for Triggering the interaction.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "The conditions for Triggering the interaction."
				},
				{
					"name": "bDebugEnabled",
					"type": "bool",
					"flags": [
						"Category = Interaction",
						"DisplayName = 🆘 Debug (UInteractiveTriggerBase)",
						"ModuleRelativePath = Interaction/Triggers/InteractiveTrigger.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Title",
					"type": "FText",
					"flags": [
						"Category = Interaction",
						"EditCondition = false",
						"EditConditionHides",
						"ModuleRelativePath = Interaction/Triggers/InteractiveTrigger.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "GetDesc",
					"description": "Get Desc",
					"flags": [
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FString",
					"parameters": []
				},
				{
					"name": "GetInteractionType",
					"description": "Get Interaction Type",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure"
					],
					"returnType": "EInteractionTriggerType",
					"parameters": []
				},
				{
					"name": "GetTitle",
					"description": "Get Title",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FText",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractiveTriggerBase",
					"className": "🎯 Trigger",
					"shortTitle": "Get Title",
					"fullTitle": "Get Title",
					"description": "",
					"imgPath": "../img/nd_img_GetTitle.png",
					"inputs": [
						{
							"name": "Target",
							"type": "🎯 Trigger Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Text",
							"description": "Get Title"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractiveTriggerBase",
					"className": "🎯 Trigger",
					"shortTitle": "Get Interaction Type",
					"fullTitle": "Get Interaction Type",
					"description": "",
					"imgPath": "../img/nd_img_GetInteractionType.png",
					"inputs": [
						{
							"name": "Target",
							"type": "🎯 Trigger Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "EInteractionTriggerType Enum",
							"description": "Get Interaction Type"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractiveTriggerBase",
					"className": "🎯 Trigger",
					"shortTitle": "Get Desc",
					"fullTitle": "Get Desc",
					"description": "",
					"imgPath": "../img/nd_img_GetDesc.png",
					"inputs": [
						{
							"name": "Target",
							"type": "🎯 Trigger Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "String",
							"description": "Get Desc"
						}
					]
				}
			]
		},
		{
			"className": "UInteractiveTriggerIndirect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UInteractiveTriggerBase"
			],
			"path": "Classes/Default/UInteractiveTriggerIndirect",
			"properties": [],
			"functions": []
		},
		{
			"className": "UInteractiveTriggerInputAction",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UInteractiveTriggerBase"
			],
			"path": "Classes/Default/UInteractiveTriggerInputAction",
			"properties": [
				{
					"name": "bUseOverrideInteractAction",
					"type": "bool",
					"flags": [
						"Category = Interaction",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/Triggers/InteractiveTriggerInputAction.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OverrideInteractAction",
					"type": "TObjectPtr<UInputAction>",
					"flags": [
						"Category = Interaction",
						"EditCondition = bUseOverrideInteractAction",
						"ModuleRelativePath = Interaction/Triggers/InteractiveTriggerInputAction.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "BindingHandles",
					"type": "TArray",
					"flags": [
						"ModuleRelativePath = Interaction/Triggers/InteractiveTriggerInputAction.h",
						"Protected"
					],
					"description": ""
				},
				{
					"name": "InteractActionInstance",
					"type": "FInputActionInstance",
					"flags": [
						"ModuleRelativePath = Interaction/Triggers/InteractiveTriggerInputAction.h",
						"Protected"
					],
					"description": ""
				},
				{
					"name": "BoundPlayerController",
					"type": "TWeakObjectPtr<APlayerController>",
					"flags": [
						"ModuleRelativePath = Interaction/Triggers/InteractiveTriggerInputAction.h",
						"Protected"
					],
					"description": ""
				},
				{
					"name": "CachedAction",
					"type": "TObjectPtr<UInputAction>",
					"flags": [
						"ModuleRelativePath = Interaction/Triggers/InteractiveTriggerInputAction.h",
						"Protected"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "GetInteractAction",
					"description": "Gets the interact action for this trigger.\nUses the override interact action if set,\n otherwise uses the default interact action from the Game developer settings.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UInputAction*",
					"parameters": []
				},
				{
					"name": "OnInteractActionEvent",
					"description": "On Interact Action Event",
					"flags": [
						"Final",
						"Native",
						"Protected",
						"HasOutParams"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InputActionInstance",
							"type": "const FInputActionInstance&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnMappingContextsRebuilt",
					"description": "On Mapping Contexts Rebuilt",
					"flags": [
						"Final",
						"Native",
						"Protected"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractiveTriggerInputAction",
					"className": "Interactive Trigger Input Action",
					"shortTitle": "Get Interact Action",
					"fullTitle": "Get Interact Action",
					"description": "",
					"imgPath": "../img/nd_img_GetInteractAction.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interactive Trigger Input Action Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Input Action Object Reference",
							"description": "Gets the interact action for this trigger.\nUses the override interact action if set,\n otherwise uses the default interact action from the Game developer settings."
						}
					]
				}
			]
		},
		{
			"className": "UInteractiveTriggerProximity",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UInteractiveTriggerBase"
			],
			"path": "Classes/Default/UInteractiveTriggerProximity",
			"properties": [
				{
					"name": "bOnlyCompleteWhenOutsideInteractionRadius",
					"type": "bool",
					"flags": [
						"Category = Interaction",
						"Comment = // if true, the interaction will stay in triggered state until the actor is outside the interaction radius\n// at which point it will complete\n",
						"ModuleRelativePath = Interaction/Triggers/InteractiveTriggerProximity.h",
						"ToolTip = if true, the interaction will stay in triggered state until the actor is outside the interaction radius\nat which point it will complete",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "if true, the interaction will stay in triggered state until the actor is outside the interaction radius\nat which point it will complete"
				}
			],
			"functions": [
				{
					"name": "OnActorBeginOverlap",
					"description": "On Actor Begin Overlap",
					"flags": [
						"Final",
						"Native",
						"Protected"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "OverlappedActor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "OtherActor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnActorHit",
					"description": "On Actor Hit",
					"flags": [
						"Final",
						"Native",
						"Protected",
						"HasOutParams",
						"HasDefaults"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "SelfActor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "OtherActor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "NormalImpulse",
							"type": "FVector",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Hit",
							"type": "const FHitResult&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "UpdateInteractionPhase",
					"description": "Update Interaction Phase",
					"flags": [
						"Final",
						"Native",
						"Protected"
					],
					"returnType": "void",
					"parameters": []
				}
			]
		},
		{
			"className": "UWorldWidget",
			"classHierarchy": [
				"UObject",
				"UVisual",
				"UWidget",
				"UUserWidget"
			],
			"path": "Classes/Default/UWorldWidget",
			"properties": [
				{
					"name": "AttachedSocket",
					"type": "FName",
					"flags": [
						"Category = WorldWidget",
						"ModuleRelativePath = Widget/WorldWidget.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ParentSizeBox",
					"type": "TObjectPtr<USizeBox>",
					"flags": [
						"BindWidget",
						"EditInline = true",
						"ModuleRelativePath = Widget/WorldWidget.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "Options",
					"type": "FWorldWidgetOptions",
					"flags": [
						"Category = WorldWidget",
						"ExposeOnSpawn",
						"ModuleRelativePath = Widget/WorldWidget.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn"
					],
					"description": ""
				},
				{
					"name": "AttachedActor",
					"type": "TWeakObjectPtr<AActor>",
					"flags": [
						"Category = WorldWidget",
						"Comment = /**\n\t * Actor this widget is attached to.\n\t */",
						"ExposeOnSpawn",
						"ModuleRelativePath = Widget/WorldWidget.h",
						"ToolTip = Actor this widget is attached to.",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"ExposeOnSpawn"
					],
					"description": "Actor this widget is attached to."
				},
				{
					"name": "AttachedSceneComponent",
					"type": "TWeakObjectPtr<USceneComponent>",
					"flags": [
						"Category = WorldWidget",
						"Comment = /**\n\t * Scene component this widget is attached to.\n\t */",
						"ExposeOnSpawn",
						"ModuleRelativePath = Widget/WorldWidget.h",
						"ToolTip = Scene component this widget is attached to.",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"ExposeOnSpawn"
					],
					"description": "Scene component this widget is attached to."
				},
				{
					"name": "OnAttachmentChangeDelegate",
					"type": "FWorldWidgetEvent",
					"flags": [
						"Category = WorldWidget",
						"ModuleRelativePath = Widget/WorldWidget.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "LastViewportPosition",
					"type": "FVector2D",
					"flags": [
						"Category = WorldWidget",
						"Comment = /**\n\t * The last calculated screen position of the widget.\n\t */",
						"ModuleRelativePath = Widget/WorldWidget.h",
						"ToolTip = The last calculated screen position of the widget.",
						"Protected",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": "The last calculated screen position of the widget."
				},
				{
					"name": "TargetOpacity",
					"type": "float",
					"flags": [
						"Category = WorldWidget",
						"ModuleRelativePath = Widget/WorldWidget.h",
						"Protected",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "OpacityFactor",
					"type": "float",
					"flags": [
						"Category = WorldWidget",
						"ModuleRelativePath = Widget/WorldWidget.h",
						"Protected",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "DidFadeOut",
					"description": "Did Fade Out",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "FadeIn",
					"description": "Fade In",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "FadeOut",
					"description": "Fade Out",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "FadeTo",
					"description": "Fade To",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InOpacityFactor",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetAttachedActor",
					"description": "Get Attached Actor",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "AActor*",
					"parameters": []
				},
				{
					"name": "GetScaledTargetOpacity",
					"description": "Get Scaled Target Opacity",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "float",
					"parameters": []
				},
				{
					"name": "GetWorldLocation",
					"description": "Returns the 3d location of the widget in the world.",
					"flags": [
						"Native",
						"Event",
						"Public",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FVector",
					"parameters": []
				},
				{
					"name": "InvisibleForDurationElapsed",
					"description": "Invisible for Duration Elapsed",
					"flags": [
						"Final",
						"Native",
						"Protected"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "IsFadingOut",
					"description": "Is Fading Out",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsOnViewportEdge",
					"description": "Returns true if the widget is on the edge of the viewport, taking into account the widget's size and margin.",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Widget",
							"type": "const UWorldWidget*",
							"description": "",
							"flags": [
								"EditInline = true",
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "OnActorChange",
					"description": "On Actor Change",
					"flags": [
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnComponentChange",
					"description": "On Component Change",
					"flags": [
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "SceneComponent",
							"type": "USceneComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetAttachedActor",
					"description": "Set Attached Actor",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "bResetComponent",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetAttachedComponent",
					"description": "Set Attached Component",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "SceneComponent",
							"type": "USceneComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						},
						{
							"name": "InSocketName",
							"type": "FName",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetFadeTarget",
					"description": "Set Fade Target",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "InTargetOpacity",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "WorldWidgetEvent__DelegateSignature",
					"description": "World Widget Event  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Widget",
							"type": "UWorldWidget*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldWidget",
					"className": "World Widget",
					"shortTitle": "Set Fade Target",
					"fullTitle": "Set Fade Target",
					"description": "",
					"imgPath": "../img/nd_img_SetFadeTarget.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "World Widget Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Target Opacity",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Set Fade Target"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldWidget",
					"className": "World Widget",
					"shortTitle": "Set Attached Component",
					"fullTitle": "Set Attached Component",
					"description": "World Widget",
					"imgPath": "../img/nd_img_SetAttachedComponent.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "World Widget Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Scene Component",
							"type": "Scene Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Socket Name",
							"type": "Name",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldWidget",
					"className": "World Widget",
					"shortTitle": "Set Attached Actor",
					"fullTitle": "Set Attached Actor",
					"description": "World Widget",
					"imgPath": "../img/nd_img_SetAttachedActor.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "World Widget Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Reset Component",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldWidget",
					"className": "World Widget",
					"shortTitle": "Event On Component Change",
					"fullTitle": "Event On Component Change",
					"description": "Add Event|World Widget",
					"imgPath": "../img/nd_img_OnComponentChange.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Scene Component",
							"type": "Scene Component Object Reference",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldWidget",
					"className": "World Widget",
					"shortTitle": "On Component Change",
					"fullTitle": "On Component Change",
					"description": "World Widget",
					"imgPath": "../img/nd_img_OnComponentChange.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "World Widget Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Scene Component",
							"type": "Scene Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldWidget",
					"className": "World Widget",
					"shortTitle": "Event On Actor Change",
					"fullTitle": "Event On Actor Change",
					"description": "Add Event|World Widget",
					"imgPath": "../img/nd_img_OnActorChange.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldWidget",
					"className": "World Widget",
					"shortTitle": "On Actor Change",
					"fullTitle": "On Actor Change",
					"description": "World Widget",
					"imgPath": "../img/nd_img_OnActorChange.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "World Widget Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldWidget",
					"className": "World Widget",
					"shortTitle": "Is on Viewport Edge",
					"fullTitle": "Is on Viewport Edge",
					"description": "",
					"imgPath": "../img/nd_img_IsOnViewportEdge.png",
					"inputs": [
						{
							"name": "Widget",
							"type": "World Widget Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Returns true if the widget is on the edge of the viewport, taking into account the widget's size and margin."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldWidget",
					"className": "World Widget",
					"shortTitle": "Is Fading Out",
					"fullTitle": "Is Fading Out",
					"description": "",
					"imgPath": "../img/nd_img_IsFadingOut.png",
					"inputs": [
						{
							"name": "Target",
							"type": "World Widget Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Fading Out"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldWidget",
					"className": "World Widget",
					"shortTitle": "Get World Location",
					"fullTitle": "Get World Location",
					"description": "",
					"imgPath": "../img/nd_img_GetWorldLocation.png",
					"inputs": [
						{
							"name": "Target",
							"type": "World Widget Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Vector",
							"description": "Returns the 3d location of the widget in the world."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldWidget",
					"className": "World Widget",
					"shortTitle": "Get Scaled Target Opacity",
					"fullTitle": "Get Scaled Target Opacity",
					"description": "",
					"imgPath": "../img/nd_img_GetScaledTargetOpacity.png",
					"inputs": [
						{
							"name": "Target",
							"type": "World Widget Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Scaled Target Opacity"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldWidget",
					"className": "World Widget",
					"shortTitle": "Get Attached Actor",
					"fullTitle": "Get Attached Actor",
					"description": "",
					"imgPath": "../img/nd_img_GetAttachedActor.png",
					"inputs": [
						{
							"name": "Target",
							"type": "World Widget Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Actor Object Reference",
							"description": "Get Attached Actor"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldWidget",
					"className": "World Widget",
					"shortTitle": "Fade To",
					"fullTitle": "Fade To",
					"description": "",
					"imgPath": "../img/nd_img_FadeTo.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "World Widget Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Opacity Factor",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldWidget",
					"className": "World Widget",
					"shortTitle": "Fade Out",
					"fullTitle": "Fade Out",
					"description": "",
					"imgPath": "../img/nd_img_FadeOut.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "World Widget Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldWidget",
					"className": "World Widget",
					"shortTitle": "Fade In",
					"fullTitle": "Fade In",
					"description": "",
					"imgPath": "../img/nd_img_FadeIn.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "World Widget Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldWidget",
					"className": "World Widget",
					"shortTitle": "Did Fade Out",
					"fullTitle": "Did Fade Out",
					"description": "",
					"imgPath": "../img/nd_img_DidFadeOut.png",
					"inputs": [
						{
							"name": "Target",
							"type": "World Widget Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Did Fade Out"
						}
					]
				}
			]
		},
		{
			"className": "UInteractiveWidget",
			"classHierarchy": [
				"UObject",
				"UVisual",
				"UWidget",
				"UUserWidget",
				"UWorldWidget"
			],
			"path": "Classes/Default/UInteractiveWidget",
			"properties": [],
			"functions": []
		},
		{
			"className": "UInteractorComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent",
				"USceneComponent"
			],
			"path": "Classes/Default/UInteractorComponent",
			"properties": [
				{
					"name": "InteractorSubsystem",
					"type": "TObjectPtr<UInteractorSubsystem>",
					"flags": [
						"ModuleRelativePath = Interaction/InteractorComponent.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "VisibleActors",
					"type": "TArray",
					"flags": [
						"ModuleRelativePath = Interaction/InteractorComponent.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "bDebugEnabled",
					"type": "bool",
					"flags": [
						"Category = Interaction",
						"DisplayName = 🆘 Debug (UInteractorComponent)",
						"ModuleRelativePath = Interaction/InteractorComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ForwardDotThreshold",
					"type": "float",
					"flags": [
						"Category = Interaction",
						"ModuleRelativePath = Interaction/InteractorComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ActorsInRange",
					"type": "TArray",
					"flags": [
						"ModuleRelativePath = Interaction/InteractorComponent.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "K2OnFocus",
					"type": "FOnFocusedActorChangedK2",
					"flags": [
						"Category = Interaction",
						"DisplayName = OnFocus",
						"ModuleRelativePath = Interaction/InteractorComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "K2OnBlur",
					"type": "FOnFocusedActorChangedK2",
					"flags": [
						"Category = Interaction",
						"DisplayName = OnBlur",
						"ModuleRelativePath = Interaction/InteractorComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "DefaultTickInterval",
					"type": "float",
					"flags": [
						"Category = Interaction",
						"ModuleRelativePath = Interaction/InteractorComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OnInteractStart",
					"type": "FOnInteractActorChanged",
					"flags": [
						"Category = Interaction",
						"ModuleRelativePath = Interaction/InteractorComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnInteractStop",
					"type": "FOnInteractActorChanged",
					"flags": [
						"Category = Interaction",
						"ModuleRelativePath = Interaction/InteractorComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "FocusedActor",
					"type": "TWeakObjectPtr<AActor>",
					"flags": [
						"Category = Interaction",
						"ModuleRelativePath = Interaction/InteractorComponent.h",
						"Protected",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "Blur",
					"description": "Blur",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "BlurFor",
					"description": "Blur For",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "Focus",
					"description": "Focus",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "InteractiveActor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetBestInteractiveActor",
					"description": "Get Best Interactive Actor",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "AActor*",
					"parameters": []
				},
				{
					"name": "GetFocusedActor",
					"description": "Get Focused Actor",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "AActor*",
					"parameters": []
				},
				{
					"name": "GetFocusedInteractiveComponent",
					"description": "Get Focused Interactive Component",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UInteractiveComponent*",
					"parameters": []
				},
				{
					"name": "GetIsRealtimeTick",
					"description": "Get Is Realtime Tick",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "GetLocalInteractorComponent",
					"description": "Get Local Interactor Component",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "UInteractorComponent*",
					"parameters": [
						{
							"name": "WorldContextObject",
							"type": "const UObject*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetOwnerPlayerController",
					"description": "Get Owner Player Controller",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "APlayerController*",
					"parameters": []
				},
				{
					"name": "GetValidActorsInRange",
					"description": "Get Valid Actors in Range",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "TArray",
					"parameters": []
				},
				{
					"name": "HasFocusedActor",
					"description": "Has Focused Actor",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsInFront",
					"description": "Is in Front",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Actor",
							"type": "const AActor*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "IsInteractionValid",
					"description": "Is Interaction Valid",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Actor",
							"type": "const AActor*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "OnFocusedActorChangedK2__DelegateSignature",
					"description": "On Focused Actor Changed K2  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "FocusedActor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnInteractActorChanged__DelegateSignature",
					"description": "On Interact Actor Changed  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnInteractorSubsystemIsStartedChanged",
					"description": "On Interactor Subsystem Is Started Changed",
					"flags": [
						"Final",
						"Native",
						"Protected"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bNewIsStarted",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetRealTimeTick",
					"description": "Set Real Time Tick",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "bEnable",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorComponent",
					"className": "Interactor Component",
					"shortTitle": "Set Real Time Tick",
					"fullTitle": "Set Real Time Tick",
					"description": "Interaction",
					"imgPath": "../img/nd_img_SetRealTimeTick.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Interactor Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Enable",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Set Real Time Tick"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorComponent",
					"className": "Interactor Component",
					"shortTitle": "Is Interaction Valid",
					"fullTitle": "Is Interaction Valid",
					"description": "Interaction",
					"imgPath": "../img/nd_img_IsInteractionValid.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interactor Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Interaction Valid"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorComponent",
					"className": "Interactor Component",
					"shortTitle": "Is in Front",
					"fullTitle": "Is in Front",
					"description": "Interaction",
					"imgPath": "../img/nd_img_IsInFront.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interactor Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is in Front"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorComponent",
					"className": "Interactor Component",
					"shortTitle": "Has Focused Actor",
					"fullTitle": "Has Focused Actor",
					"description": "Interaction",
					"imgPath": "../img/nd_img_HasFocusedActor.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interactor Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Has Focused Actor"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorComponent",
					"className": "Interactor Component",
					"shortTitle": "Get Valid Actors in Range",
					"fullTitle": "Get Valid Actors in Range",
					"description": "Interaction",
					"imgPath": "../img/nd_img_GetValidActorsInRange.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interactor Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Array of Actor Object References",
							"description": "Get Valid Actors in Range"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorComponent",
					"className": "Interactor Component",
					"shortTitle": "Get Owner Player Controller",
					"fullTitle": "Get Owner Player Controller",
					"description": "Interaction",
					"imgPath": "../img/nd_img_GetOwnerPlayerController.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interactor Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Player Controller Object Reference",
							"description": "Get Owner Player Controller"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorComponent",
					"className": "Interactor Component",
					"shortTitle": "Get Local Interactor Component",
					"fullTitle": "Get Local Interactor Component",
					"description": "",
					"imgPath": "../img/nd_img_GetLocalInteractorComponent.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Interactor Component Object Reference",
							"description": "Get Local Interactor Component"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorComponent",
					"className": "Interactor Component",
					"shortTitle": "Get Is Realtime Tick",
					"fullTitle": "Get Is Realtime Tick",
					"description": "Interaction",
					"imgPath": "../img/nd_img_GetIsRealtimeTick.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interactor Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Get Is Realtime Tick"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorComponent",
					"className": "Interactor Component",
					"shortTitle": "Get Focused Interactive Component",
					"fullTitle": "Get Focused Interactive Component",
					"description": "Interaction",
					"imgPath": "../img/nd_img_GetFocusedInteractiveComponent.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interactor Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Interactive Object Reference",
							"description": "Get Focused Interactive Component"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorComponent",
					"className": "Interactor Component",
					"shortTitle": "Get Focused Actor",
					"fullTitle": "Get Focused Actor",
					"description": "Interaction",
					"imgPath": "../img/nd_img_GetFocusedActor.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interactor Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Actor Object Reference",
							"description": "Get Focused Actor"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorComponent",
					"className": "Interactor Component",
					"shortTitle": "Get Best Interactive Actor",
					"fullTitle": "Get Best Interactive Actor",
					"description": "Interaction",
					"imgPath": "../img/nd_img_GetBestInteractiveActor.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interactor Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Actor Object Reference",
							"description": "Get Best Interactive Actor"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorComponent",
					"className": "Interactor Component",
					"shortTitle": "Focus",
					"fullTitle": "Focus",
					"description": "Interaction",
					"imgPath": "../img/nd_img_Focus.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Interactor Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Interactive Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Focus"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorComponent",
					"className": "Interactor Component",
					"shortTitle": "Blur For",
					"fullTitle": "Blur For",
					"description": "Interaction",
					"imgPath": "../img/nd_img_BlurFor.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Interactor Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Blur For"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorComponent",
					"className": "Interactor Component",
					"shortTitle": "Blur",
					"fullTitle": "Blur",
					"description": "Interaction",
					"imgPath": "../img/nd_img_Blur.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Interactor Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Blur"
						}
					]
				}
			]
		},
		{
			"className": "UInteractorSubsystem",
			"classHierarchy": [
				"UObject",
				"USubsystem",
				"UWorldSubsystem",
				"UTickableWorldSubsystem",
				"UWorldModeSubsystem"
			],
			"path": "Classes/Default/UInteractorSubsystem",
			"properties": [
				{
					"name": "OnFocusDelegate",
					"type": "FOnFocusedActorChanged",
					"flags": [
						"Category = Interaction",
						"DisplayName = OnFocus",
						"ModuleRelativePath = Interaction/InteractorSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnBlurDelegate",
					"type": "FOnFocusedActorChanged",
					"flags": [
						"Category = Interaction",
						"DisplayName = OnBlur",
						"ModuleRelativePath = Interaction/InteractorSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "DragDropSubsystem",
					"type": "TObjectPtr<UDragDropSubsystem>",
					"flags": [
						"ModuleRelativePath = Interaction/InteractorSubsystem.h",
						"Public"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "Blur",
					"description": "Blur",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "PlayerController",
							"type": "APlayerController*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "BlurFor",
					"description": "Blur For",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "PlayerController",
							"type": "APlayerController*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "InteractiveActor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "Focus",
					"description": "Focus",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "PlayerController",
							"type": "APlayerController*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "InteractiveActor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetAllInteractiveComponents",
					"description": "Get All Interactive Components",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "TArray",
					"parameters": [
						{
							"name": "WorldContextObject",
							"type": "const UObject*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetAllInteractiveComponentsWithin",
					"description": "Get All Interactive Components Within",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "TArray",
					"parameters": [
						{
							"name": "WorldContextObject",
							"type": "const UObject*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "Position",
							"type": "FVector",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Distance",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetAllInteractorComponents",
					"description": "Get All Interactor Components",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "TArray",
					"parameters": [
						{
							"name": "WorldContextObject",
							"type": "const UObject*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetDistanceToInteractiveComponent",
					"description": "Get Distance to Interactive Component",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "float",
					"parameters": [
						{
							"name": "PlayerController",
							"type": "APlayerController*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "InteractiveActor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetHorizontalDistanceToInteractiveComponent",
					"description": "Get Horizontal Distance to Interactive Component",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "float",
					"parameters": [
						{
							"name": "PlayerController",
							"type": "APlayerController*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "InteractiveActor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "VerticalDistanceMin",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetInteractorFocussedOn",
					"description": "Get Interactor Focussed On",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UInteractorComponent*",
					"parameters": [
						{
							"name": "Actor",
							"type": "const AActor*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetInteractorForController",
					"description": "Get Interactor for Controller",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "UInteractorComponent*",
					"parameters": [
						{
							"name": "PlayerController",
							"type": "APlayerController*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetSquaredHorizontalDistanceToInteractiveComponent",
					"description": "Get Squared Horizontal Distance to Interactive Component",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "float",
					"parameters": [
						{
							"name": "PlayerController",
							"type": "APlayerController*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "InteractiveActor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "VerticalDistanceMin",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "HasAnyInteractorFocussedOn",
					"description": "Has Any Interactor Focussed On",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Actor",
							"type": "const AActor*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "OnDragDropSubsystemIsStartedChanged",
					"description": "On Drag Drop Subsystem Is Started Changed",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bNewIsStarted",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnFocusedActorChanged__DelegateSignature",
					"description": "On Focused Actor Changed  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "FocusedActor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorSubsystem",
					"className": "Interactor Subsystem",
					"shortTitle": "Has Any Interactor Focussed On",
					"fullTitle": "Has Any Interactor Focussed On",
					"description": "Interaction",
					"imgPath": "../img/nd_img_HasAnyInteractorFocussedOn.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interactor Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Has Any Interactor Focussed On"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorSubsystem",
					"className": "Interactor Subsystem",
					"shortTitle": "Get Squared Horizontal Distance to Interactive Component",
					"fullTitle": "Get Squared Horizontal Distance to Interactive Component",
					"description": "",
					"imgPath": "../img/nd_img_GetSquaredHorizontalDistanceToInteractiveComponent.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interactor Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Player Controller",
							"type": "Player Controller Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Interactive Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vertical Distance Min",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Squared Horizontal Distance to Interactive Component"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorSubsystem",
					"className": "Interactor Subsystem",
					"shortTitle": "Get Interactor for Controller",
					"fullTitle": "Get Interactor for Controller",
					"description": "",
					"imgPath": "../img/nd_img_GetInteractorForController.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interactor Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Player Controller",
							"type": "Player Controller Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Interactor Component Object Reference",
							"description": "Get Interactor for Controller"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorSubsystem",
					"className": "Interactor Subsystem",
					"shortTitle": "Get Interactor Focussed On",
					"fullTitle": "Get Interactor Focussed On",
					"description": "Interaction",
					"imgPath": "../img/nd_img_GetInteractorFocussedOn.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interactor Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Interactor Component Object Reference",
							"description": "Get Interactor Focussed On"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorSubsystem",
					"className": "Interactor Subsystem",
					"shortTitle": "Get Horizontal Distance to Interactive Component",
					"fullTitle": "Get Horizontal Distance to Interactive Component",
					"description": "",
					"imgPath": "../img/nd_img_GetHorizontalDistanceToInteractiveComponent.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interactor Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Player Controller",
							"type": "Player Controller Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Interactive Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vertical Distance Min",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Horizontal Distance to Interactive Component"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorSubsystem",
					"className": "Interactor Subsystem",
					"shortTitle": "Get Distance to Interactive Component",
					"fullTitle": "Get Distance to Interactive Component",
					"description": "",
					"imgPath": "../img/nd_img_GetDistanceToInteractiveComponent.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interactor Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Player Controller",
							"type": "Player Controller Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Interactive Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Distance to Interactive Component"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorSubsystem",
					"className": "Interactor Subsystem",
					"shortTitle": "Get All Interactor Components",
					"fullTitle": "Get All Interactor Components",
					"description": "Interaction",
					"imgPath": "../img/nd_img_GetAllInteractorComponents.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interactor Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "World Context Object",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Array of Interactor Component Object References",
							"description": "Get All Interactor Components"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorSubsystem",
					"className": "Interactor Subsystem",
					"shortTitle": "Get All Interactive Components Within",
					"fullTitle": "Get All Interactive Components Within",
					"description": "Interaction",
					"imgPath": "../img/nd_img_GetAllInteractiveComponentsWithin.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interactor Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "World Context Object",
							"type": "Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Position",
							"type": "Vector",
							"description": "$no_comments"
						},
						{
							"name": "Distance",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Array of Interactive Object References",
							"description": "Get All Interactive Components Within"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorSubsystem",
					"className": "Interactor Subsystem",
					"shortTitle": "Get All Interactive Components",
					"fullTitle": "Get All Interactive Components",
					"description": "Interaction",
					"imgPath": "../img/nd_img_GetAllInteractiveComponents.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interactor Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "World Context Object",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Array of Interactive Object References",
							"description": "Get All Interactive Components"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorSubsystem",
					"className": "Interactor Subsystem",
					"shortTitle": "Focus",
					"fullTitle": "Focus",
					"description": "Local Player",
					"imgPath": "../img/nd_img_Focus.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Interactor Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Player Controller",
							"type": "Player Controller Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Interactive Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Focus"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorSubsystem",
					"className": "Interactor Subsystem",
					"shortTitle": "Blur For",
					"fullTitle": "Blur For",
					"description": "Local Player",
					"imgPath": "../img/nd_img_BlurFor.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Interactor Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Player Controller",
							"type": "Player Controller Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Interactive Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Blur For"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInteractorSubsystem",
					"className": "Interactor Subsystem",
					"shortTitle": "Blur",
					"fullTitle": "Blur",
					"description": "Local Player",
					"imgPath": "../img/nd_img_Blur.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Interactor Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Player Controller",
							"type": "Player Controller Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Blur"
						}
					]
				}
			]
		},
		{
			"className": "UInventoryComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UInventoryComponent",
			"properties": [
				{
					"name": "Inventory",
					"type": "TObjectPtr<UInventory>",
					"flags": [
						"Category = Inventory",
						"EditInline = true",
						"ModuleRelativePath = Inventory/InventoryComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "Get",
					"description": "Get",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "UInventoryComponent*",
					"parameters": [
						{
							"name": "Target",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetInventory",
					"description": "Get Inventory",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "UInventory*",
					"parameters": [
						{
							"name": "Target",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UInventoryComponent",
					"className": "Inventory Component",
					"shortTitle": "Get Inventory Model",
					"fullTitle": "Get Inventory Model",
					"description": "",
					"imgPath": "../img/nd_img_GetInventory.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Inventory Object Reference",
							"description": "Get Inventory"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInventoryComponent",
					"className": "Inventory Component",
					"shortTitle": "Get Inventory Component",
					"fullTitle": "Get Inventory Component",
					"description": "",
					"imgPath": "../img/nd_img_Get.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Inventory Component Object Reference",
							"description": "Get"
						}
					]
				}
			]
		},
		{
			"className": "UItemData",
			"classHierarchy": [
				"UObject",
				"UDataAsset"
			],
			"path": "Classes/Default/UItemData",
			"properties": [
				{
					"name": "ItemName",
					"type": "FName",
					"flags": [
						"Category = ItemData",
						"ModuleRelativePath = Inventory/ItemData.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ItemTags",
					"type": "FGameplayTagContainer",
					"flags": [
						"Category = ItemData",
						"ModuleRelativePath = Inventory/ItemData.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ItemThumbnail",
					"type": "FSlateBrush",
					"flags": [
						"Category = ItemData",
						"ModuleRelativePath = Inventory/ItemData.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bUseSkeletalMesh",
					"type": "bool",
					"flags": [
						"Category = ItemData",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Inventory/ItemData.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "StaticMesh",
					"type": "TObjectPtr<UStaticMesh>",
					"flags": [
						"Category = ItemData",
						"EditCondition = !bUseSkeletalMesh",
						"EditConditionHides",
						"ModuleRelativePath = Inventory/ItemData.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "SkeletalMesh",
					"type": "TObjectPtr<USkeletalMesh>",
					"flags": [
						"Category = ItemData",
						"EditCondition = bUseSkeletalMesh",
						"ModuleRelativePath = Inventory/ItemData.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "AddToInventorySFX",
					"type": "TObjectPtr<UAkAudioEvent>",
					"flags": [
						"Category = ItemData",
						"ModuleRelativePath = Inventory/ItemData.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "RemoveFromInventorySFX",
					"type": "TObjectPtr<UAkAudioEvent>",
					"flags": [
						"Category = ItemData",
						"ModuleRelativePath = Inventory/ItemData.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "CraftSFX",
					"type": "TObjectPtr<UAkAudioEvent>",
					"flags": [
						"Category = ItemData",
						"ModuleRelativePath = Inventory/ItemData.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "GetTitle",
					"description": "Get Title",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FText",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UItemData",
					"className": "Item Data",
					"shortTitle": "Get Title",
					"fullTitle": "Get Title",
					"description": "",
					"imgPath": "../img/nd_img_GetTitle.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Item Data Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Text",
							"description": "Get Title"
						}
					]
				}
			]
		},
		{
			"className": "UItemSlot",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase"
			],
			"path": "Classes/Default/UItemSlot",
			"properties": [
				{
					"name": "bVisibleWhenEmpty",
					"type": "bool",
					"flags": [
						"Category = ItemSlot",
						"ModuleRelativePath = Inventory/ItemData.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ItemData",
					"type": "TObjectPtr<UItemData>",
					"flags": [
						"Category = ItemSlot",
						"ModuleRelativePath = Inventory/ItemData.h",
						"TitleProperty = ItemName",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Quantity",
					"type": "int32",
					"flags": [
						"BlueprintSetter = SetQuantity",
						"Category = ItemSlot",
						"ModuleRelativePath = Inventory/ItemData.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Title",
					"type": "FText",
					"flags": [
						"BlueprintGetter = GetTitle",
						"Category = AlwaysHidden",
						"EditCondition = FALSE",
						"EditConditionHides",
						"ModuleRelativePath = Inventory/ItemData.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "AddQuantity",
					"description": "Add Quantity",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "QuantityDelta",
							"type": "int32",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetItemThumbnail",
					"description": "Get Item Thumbnail",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "const FSlateBrush&",
					"parameters": []
				},
				{
					"name": "GetTitle",
					"description": "Get Title",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FText",
					"parameters": []
				},
				{
					"name": "SetQuantity",
					"description": "Set Quantity",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewQuantity",
							"type": "int32",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UItemSlot",
					"className": "Item Slot",
					"shortTitle": "Set Quantity",
					"fullTitle": "Set Quantity",
					"description": "",
					"imgPath": "../img/nd_img_SetQuantity.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Item Slot Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Quantity",
							"type": "Integer",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UItemSlot",
					"className": "Item Slot",
					"shortTitle": "Get Title",
					"fullTitle": "Get Title",
					"description": "",
					"imgPath": "../img/nd_img_GetTitle.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Item Slot Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Text",
							"description": "Get Title"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UItemSlot",
					"className": "Item Slot",
					"shortTitle": "Get Item Thumbnail",
					"fullTitle": "Get Item Thumbnail",
					"description": "",
					"imgPath": "../img/nd_img_GetItemThumbnail.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Item Slot Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Slate Brush Structure (by ref)",
							"description": "Get Item Thumbnail"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UItemSlot",
					"className": "Item Slot",
					"shortTitle": "Add Quantity",
					"fullTitle": "Add Quantity",
					"description": "",
					"imgPath": "../img/nd_img_AddQuantity.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Item Slot Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Quantity Delta",
							"type": "Integer",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UInventory",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase"
			],
			"path": "Classes/Default/UInventory",
			"properties": [
				{
					"name": "ItemSlots",
					"type": "TArray",
					"flags": [
						"BlueprintSetter = SetItemSlots",
						"Category = Inventory",
						"EditInline = true",
						"ModuleRelativePath = Inventory/ItemData.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "AddItemSFX",
					"type": "TObjectPtr<UAkAudioEvent>",
					"flags": [
						"Category = Inventory",
						"ModuleRelativePath = Inventory/ItemData.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "RemoveItemSFX",
					"type": "TObjectPtr<UAkAudioEvent>",
					"flags": [
						"Category = Inventory",
						"ModuleRelativePath = Inventory/ItemData.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "AddItem",
					"description": "Add Item",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Item",
							"type": "UItemData*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "QuantityToAdd",
							"type": "int32",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "ClearItem",
					"description": "Zeroes out the quantity for a given item.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Item",
							"type": "UItemData*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "CreateItemSlot",
					"description": "Create Item Slot",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "UItemSlot*",
					"parameters": [
						{
							"name": "Item",
							"type": "UItemData*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Quantity",
							"type": "int32",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "Get",
					"description": "Get",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "UInventory*",
					"parameters": [
						{
							"name": "Target",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetItemSlot",
					"description": "Get Item Slot",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UItemSlot*",
					"parameters": [
						{
							"name": "Item",
							"type": "UItemData*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetOrCreateItemSlot",
					"description": "Evaluates whether an item slot already exists, or if a new one should be created",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "UItemSlot*",
					"parameters": [
						{
							"name": "Item",
							"type": "UItemData*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetQuantity",
					"description": "Get Quantity",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "int32",
					"parameters": [
						{
							"name": "Item",
							"type": "UItemData*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetVisibleItemSlots",
					"description": "Get Visible Item Slots",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "TArray",
					"parameters": []
				},
				{
					"name": "HasItem",
					"description": "Has Item",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Item",
							"type": "UItemData*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnItemSlotChanged",
					"description": "On Item Slot Changed",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "ItemSlot",
							"type": "UItemSlot*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						},
						{
							"name": "OldQuantity",
							"type": "int32",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "RemoveItem",
					"description": "Remove Item",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Item",
							"type": "UItemData*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "QuantityToRemove",
							"type": "int32",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetItem",
					"description": "Sets the item quantity, whether existing or new, then pushes field notifies",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Item",
							"type": "UItemData*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Quantity",
							"type": "int32",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetItemSlots",
					"description": "Set Item Slots",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewItemSlots",
							"type": "TArray",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "UpdateQuantity",
					"description": "Update Quantity",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "ItemData",
							"type": "UItemData*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "QuantityDelta",
							"type": "int32",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UInventory",
					"className": "Inventory",
					"shortTitle": "Update Quantity",
					"fullTitle": "Update Quantity",
					"description": "",
					"imgPath": "../img/nd_img_UpdateQuantity.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Inventory Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Item Data",
							"type": "Item Data Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Quantity Delta",
							"type": "Integer",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInventory",
					"className": "Inventory",
					"shortTitle": "Set Item Slots",
					"fullTitle": "Set Item Slots",
					"description": "",
					"imgPath": "../img/nd_img_SetItemSlots.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Inventory Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Item Slots",
							"type": "Array of Item Slot Object References",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInventory",
					"className": "Inventory",
					"shortTitle": "Set Item",
					"fullTitle": "Set Item",
					"description": "",
					"imgPath": "../img/nd_img_SetItem.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Inventory Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Item",
							"type": "Item Data Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Quantity",
							"type": "Integer",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInventory",
					"className": "Inventory",
					"shortTitle": "Remove Item",
					"fullTitle": "Remove Item",
					"description": "",
					"imgPath": "../img/nd_img_RemoveItem.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Inventory Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Item",
							"type": "Item Data Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Quantity to Remove",
							"type": "Integer",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInventory",
					"className": "Inventory",
					"shortTitle": "Has Item",
					"fullTitle": "Has Item",
					"description": "",
					"imgPath": "../img/nd_img_HasItem.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Inventory Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Item",
							"type": "Item Data Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Has Item"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInventory",
					"className": "Inventory",
					"shortTitle": "Get Visible Item Slots",
					"fullTitle": "Get Visible Item Slots",
					"description": "",
					"imgPath": "../img/nd_img_GetVisibleItemSlots.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Inventory Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Array of Item Slot Object References",
							"description": "Get Visible Item Slots"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInventory",
					"className": "Inventory",
					"shortTitle": "Get Quantity",
					"fullTitle": "Get Quantity",
					"description": "",
					"imgPath": "../img/nd_img_GetQuantity.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Inventory Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Item",
							"type": "Item Data Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Integer",
							"description": "Get Quantity"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInventory",
					"className": "Inventory",
					"shortTitle": "Get or Create Item Slot",
					"fullTitle": "Get or Create Item Slot",
					"description": "",
					"imgPath": "../img/nd_img_GetOrCreateItemSlot.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Inventory Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Item",
							"type": "Item Data Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Item Slot Object Reference",
							"description": "Evaluates whether an item slot already exists, or if a new one should be created"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInventory",
					"className": "Inventory",
					"shortTitle": "Get Item Slot",
					"fullTitle": "Get Item Slot",
					"description": "",
					"imgPath": "../img/nd_img_GetItemSlot.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Inventory Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Item",
							"type": "Item Data Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Item Slot Object Reference",
							"description": "Get Item Slot"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInventory",
					"className": "Inventory",
					"shortTitle": "Get Inventory",
					"fullTitle": "Get Inventory",
					"description": "",
					"imgPath": "../img/nd_img_Get.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Inventory Object Reference",
							"description": "Get"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInventory",
					"className": "Inventory",
					"shortTitle": "Create Item Slot",
					"fullTitle": "Create Item Slot",
					"description": "",
					"imgPath": "../img/nd_img_CreateItemSlot.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Inventory Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Item",
							"type": "Item Data Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Quantity",
							"type": "Integer",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Item Slot Object Reference",
							"description": "Create Item Slot"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInventory",
					"className": "Inventory",
					"shortTitle": "Clear Item",
					"fullTitle": "Clear Item",
					"description": "",
					"imgPath": "../img/nd_img_ClearItem.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Inventory Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Item",
							"type": "Item Data Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UInventory",
					"className": "Inventory",
					"shortTitle": "Add Item",
					"fullTitle": "Add Item",
					"description": "",
					"imgPath": "../img/nd_img_AddItem.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Inventory Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Item",
							"type": "Item Data Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Quantity to Add",
							"type": "Integer",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UItemDataComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UItemDataComponent",
			"properties": [
				{
					"name": "ItemData",
					"type": "TObjectPtr<UItemData>",
					"flags": [
						"Category = ItemDataComponent",
						"ModuleRelativePath = Inventory/ItemDataComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Title",
					"type": "FText",
					"flags": [
						"BlueprintGetter = GetTitle",
						"Category = AlwaysHidden",
						"EditCondition = FALSE",
						"EditConditionHides",
						"ModuleRelativePath = Inventory/ItemDataComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "GetTitle",
					"description": "Get Title",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FText",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UItemDataComponent",
					"className": "Item Data Component",
					"shortTitle": "Get Title",
					"fullTitle": "Get Title",
					"description": "",
					"imgPath": "../img/nd_img_GetTitle.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Item Data Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Text",
							"description": "Get Title"
						}
					]
				}
			]
		},
		{
			"className": "AItemPickup",
			"classHierarchy": [
				"UObject",
				"AActor",
				"AInteractiveActor"
			],
			"path": "Classes/Default/AItemPickup",
			"properties": [
				{
					"name": "ItemDataComponent",
					"type": "TObjectPtr<UItemDataComponent>",
					"flags": [
						"Category = Default",
						"EditInline = true",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Inventory/ItemPickup.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit",
						"EditConst"
					],
					"description": ""
				},
				{
					"name": "Quantity",
					"type": "int32",
					"flags": [
						"Category = Default",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Inventory/ItemPickup.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "GetInventoryItemData",
					"description": "Get Inventory Item Data",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UItemData*",
					"parameters": []
				},
				{
					"name": "OnInteractTrigger",
					"description": "On Interact Trigger",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "PC",
							"type": "APlayerController*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetMesh",
					"description": "Set Mesh",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "AItemPickup",
					"className": "Item Pickup",
					"shortTitle": "Set Mesh",
					"fullTitle": "Set Mesh",
					"description": "",
					"imgPath": "../img/nd_img_SetMesh.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Item Pickup Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "AItemPickup",
					"className": "Item Pickup",
					"shortTitle": "Get Inventory Item Data",
					"fullTitle": "Get Inventory Item Data",
					"description": "",
					"imgPath": "../img/nd_img_GetInventoryItemData.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Item Pickup Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Item Data Object Reference",
							"description": "Get Inventory Item Data"
						}
					]
				}
			]
		},
		{
			"className": "UItemThumbnailData",
			"classHierarchy": [
				"UObject",
				"UDataAsset"
			],
			"path": "Classes/Default/UItemThumbnailData",
			"properties": [
				{
					"name": "ItemThumbnails",
					"type": "TMap",
					"flags": [
						"Category = Default",
						"ModuleRelativePath = Inventory/ItemThumbnailData.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "UKnockBackInteractionEffect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect",
				"UInteractionEffect"
			],
			"path": "Classes/Default/UKnockBackInteractionEffect",
			"properties": [
				{
					"name": "KnockDistance",
					"type": "float",
					"flags": [
						"Category = KnockBackInteractionEffect",
						"ModuleRelativePath = Interaction/Effects/KnockBackInteractionEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "SphereRadius",
					"type": "float",
					"flags": [
						"Category = KnockBackInteractionEffect",
						"ModuleRelativePath = Interaction/Effects/KnockBackInteractionEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "ULevelHistorySubsystem",
			"classHierarchy": [
				"UObject",
				"USubsystem",
				"UGameInstanceSubsystem"
			],
			"path": "Classes/Default/ULevelHistorySubsystem",
			"properties": [],
			"functions": []
		},
		{
			"className": "UEvolveStageInfo",
			"classHierarchy": [
				"UObject",
				"UDataAsset"
			],
			"path": "Classes/Default/UEvolveStageInfo",
			"properties": [
				{
					"name": "StageName",
					"type": "FName",
					"flags": [
						"Category = EvolveStageInfo",
						"ModuleRelativePath = Climate/LifeCycleComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "StageMesh",
					"type": "UStaticMesh*",
					"flags": [
						"Category = EvolveStageInfo",
						"ModuleRelativePath = Climate/LifeCycleComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "IsDormant",
					"type": "bool",
					"flags": [
						"Category = EvolveStageInfo",
						"ModuleRelativePath = Climate/LifeCycleComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "ULifeCycleComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/ULifeCycleComponent",
			"properties": [
				{
					"name": "InitialStage",
					"type": "TObjectPtr<UEvolveStageInfo>",
					"flags": [
						"Category = LifeCycleComponent",
						"Comment = // --------------------------------- Properties\n",
						"ModuleRelativePath = Climate/LifeCycleComponent.h",
						"ToolTip = --------------------------------- Properties",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "--------------------------------- Properties"
				},
				{
					"name": "CurrentStage",
					"type": "TObjectPtr<UEvolveStageInfo>",
					"flags": [
						"Category = LifeCycleComponent",
						"ModuleRelativePath = Climate/LifeCycleComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "AvailableStages",
					"type": "TArray",
					"flags": [
						"Category = LifeCycleComponent",
						"ModuleRelativePath = Climate/LifeCycleComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "EvolveInto",
					"type": "TSubclassOf<AActor>",
					"flags": [
						"Category = LifeCycleComponent",
						"ModuleRelativePath = Climate/LifeCycleComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "IsDormant",
					"type": "bool",
					"flags": [
						"Category = LifeCycleComponent",
						"ModuleRelativePath = Climate/LifeCycleComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OnLifeCycleStageChange",
					"type": "FOnLifeCycleStageChange",
					"flags": [
						"ModuleRelativePath = Climate/LifeCycleComponent.h",
						"Public",
						"BlueprintAssignable",
						"BlueprintCallable"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "CanEvolve",
					"description": "Can Evolve",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "EvolveToNextStage",
					"description": "Consideration here of passing a TSubclassOf AActor is likely to swap out the current actor for a new one that can contain\nit's own set of components and logic instead of relying on the existing\nBut how can that be done without destroying the current actor this component is attached to?",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewActor",
							"type": "TSubclassOf<AActor>",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetCurrentLifeCycleStage",
					"description": "Get Current Life Cycle Stage",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "UEvolveStageInfo*",
					"parameters": []
				},
				{
					"name": "OnLifeCycleStageChange__DelegateSignature",
					"description": "--------------------------------- Delegates",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Stage",
							"type": "UEvolveStageInfo*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetCurrentLifeCycleStage",
					"description": "--------------------------------- Functions",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewStage",
							"type": "UEvolveStageInfo*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "ULifeCycleComponent",
					"className": "Life Cycle Component",
					"shortTitle": "Event Set Current Life Cycle Stage",
					"fullTitle": "Event Set Current Life Cycle Stage",
					"description": "Add Event",
					"imgPath": "../img/nd_img_SetCurrentLifeCycleStage.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "New Stage",
							"type": "Evolve Stage Info Object Reference",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULifeCycleComponent",
					"className": "Life Cycle Component",
					"shortTitle": "Set Current Life Cycle Stage",
					"fullTitle": "Set Current Life Cycle Stage",
					"description": "",
					"imgPath": "../img/nd_img_SetCurrentLifeCycleStage.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Life Cycle Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Stage",
							"type": "Evolve Stage Info Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULifeCycleComponent",
					"className": "Life Cycle Component",
					"shortTitle": "Get Current Life Cycle Stage",
					"fullTitle": "Get Current Life Cycle Stage",
					"description": "",
					"imgPath": "../img/nd_img_GetCurrentLifeCycleStage.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Life Cycle Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Evolve Stage Info Object Reference",
							"description": "Get Current Life Cycle Stage"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULifeCycleComponent",
					"className": "Life Cycle Component",
					"shortTitle": "Event Evolve to Next Stage",
					"fullTitle": "Event Evolve to Next Stage",
					"description": "Add Event",
					"imgPath": "../img/nd_img_EvolveToNextStage.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "New Actor",
							"type": "Actor Class Reference",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULifeCycleComponent",
					"className": "Life Cycle Component",
					"shortTitle": "Evolve to Next Stage",
					"fullTitle": "Evolve to Next Stage",
					"description": "",
					"imgPath": "../img/nd_img_EvolveToNextStage.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Life Cycle Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Actor",
							"type": "Actor Class Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULifeCycleComponent",
					"className": "Life Cycle Component",
					"shortTitle": "Can Evolve",
					"fullTitle": "Can Evolve",
					"description": "",
					"imgPath": "../img/nd_img_CanEvolve.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Life Cycle Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Can Evolve"
						}
					]
				}
			]
		},
		{
			"className": "ULifeSubsystem",
			"classHierarchy": [
				"UObject",
				"USubsystem",
				"UWorldSubsystem"
			],
			"path": "Classes/Default/ULifeSubsystem",
			"properties": [
				{
					"name": "OnActorDefeatedDelegate",
					"type": "FOnActorDefeatedDelegate_K2",
					"flags": [
						"DisplayName = OnActorDefeated",
						"ModuleRelativePath = Life/LifeSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "OnActorDefeated",
					"description": "On Actor Defeated",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Event",
							"type": "const FActorDamageEvent&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnActorDefeatedDelegate_K2__DelegateSignature",
					"description": "On Actor Defeated Delegate K2  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Event",
							"type": "FActorDamageEvent",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "RegisterDamageableComponent",
					"description": "Register Damageable Component",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "DamageableComponent",
							"type": "UDamageableComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				}
			]
		},
		{
			"className": "UListeningViewModel",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase"
			],
			"path": "Classes/Default/UListeningViewModel",
			"properties": [],
			"functions": []
		},
		{
			"className": "ALittleTrekkerCharacter",
			"classHierarchy": [
				"UObject",
				"AActor",
				"APawn",
				"ACharacter"
			],
			"path": "Classes/Default/ALittleTrekkerCharacter",
			"properties": [
				{
					"name": "TopDownCameraComponent",
					"type": "TObjectPtr<UCameraComponent>",
					"flags": [
						"AllowPrivateAccess = true",
						"Category = Camera",
						"Comment = /** Top down camera */",
						"EditInline = true",
						"ModuleRelativePath = LittleTrekkerCharacter.h",
						"ToolTip = Top down camera",
						"Private",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": "Top down camera"
				},
				{
					"name": "CameraBoom",
					"type": "TObjectPtr<USpringArmComponent>",
					"flags": [
						"AllowPrivateAccess = true",
						"Category = Camera",
						"Comment = /** Camera boom positioning the camera above the character */",
						"EditInline = true",
						"ModuleRelativePath = LittleTrekkerCharacter.h",
						"ToolTip = Camera boom positioning the camera above the character",
						"Private",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": "Camera boom positioning the camera above the character"
				},
				{
					"name": "CombatComponent",
					"type": "TObjectPtr<UCombatComponent>",
					"flags": [
						"Category = LittleTrekkerCharacter",
						"EditInline = true",
						"ModuleRelativePath = LittleTrekkerCharacter.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				},
				{
					"name": "DamageableComponent",
					"type": "TObjectPtr<UDamageableComponent>",
					"flags": [
						"Category = LittleTrekkerCharacter",
						"EditInline = true",
						"ModuleRelativePath = LittleTrekkerCharacter.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				},
				{
					"name": "PlayerTeleportComponent",
					"type": "TObjectPtr<UPlayerTeleportComponent>",
					"flags": [
						"Category = LittleTrekkerCharacter",
						"EditInline = true",
						"ModuleRelativePath = LittleTrekkerCharacter.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				},
				{
					"name": "InteractorComponent",
					"type": "TObjectPtr<UInteractorComponent>",
					"flags": [
						"Category = Default",
						"EditInline = true",
						"ModuleRelativePath = LittleTrekkerCharacter.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				},
				{
					"name": "GameplayTagContainerComponent",
					"type": "TObjectPtr<UGameplayTagContainerComponent>",
					"flags": [
						"Category = LittleTrekkerCharacter",
						"EditInline = true",
						"ModuleRelativePath = LittleTrekkerCharacter.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "ULittleTrekkerDeveloperSettings",
			"classHierarchy": [
				"UObject",
				"UDeveloperSettings",
				"UDeveloperSettingsBackedByCVars"
			],
			"path": "Classes/Default/ULittleTrekkerDeveloperSettings",
			"properties": [
				{
					"name": "DefaultInputAction",
					"type": "TSoftObjectPtr<UInputAction>",
					"flags": [
						"Category = Input",
						"ModuleRelativePath = LittleTrekkerDeveloperSettings.h",
						"Public",
						"BlueprintVisible",
						"Edit",
						"Config",
						"Config"
					],
					"description": ""
				},
				{
					"name": "OfficialLevels",
					"type": "TSet",
					"flags": [
						"Category = Worlds",
						"ModuleRelativePath = LittleTrekkerDeveloperSettings.h",
						"Public",
						"BlueprintVisible",
						"Edit",
						"Config",
						"Config"
					],
					"description": ""
				},
				{
					"name": "SampleLevels",
					"type": "TSet",
					"flags": [
						"Category = Worlds",
						"ModuleRelativePath = LittleTrekkerDeveloperSettings.h",
						"Public",
						"BlueprintVisible",
						"Edit",
						"Config",
						"Config"
					],
					"description": ""
				},
				{
					"name": "SocketNames",
					"type": "TArray",
					"flags": [
						"Category = Info|Sockets",
						"Comment = // List of standard socket names. Read-only.\n",
						"ModuleRelativePath = LittleTrekkerDeveloperSettings.h",
						"ToolTip = List of standard socket names. Read-only.",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": "List of standard socket names. Read-only."
				}
			],
			"functions": [
				{
					"name": "Get",
					"description": "Get",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "const ULittleTrekkerDeveloperSettings*&",
					"parameters": []
				},
				{
					"name": "GetMutable",
					"description": "Get Mutable",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "ULittleTrekkerDeveloperSettings*",
					"parameters": []
				},
				{
					"name": "GetWorlds",
					"description": "Get Worlds",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "TSet",
					"parameters": [
						{
							"name": "WorldType",
							"type": "const ELittleTrekkerWorldType",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetWorldType",
					"description": "Get World Type",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "ELittleTrekkerWorldType",
					"parameters": [
						{
							"name": "World",
							"type": "TSoftObjectPtr<UWorld>",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "RegisterWorldAs",
					"description": "Register World As",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Type",
							"type": "ELittleTrekkerWorldType",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "World",
							"type": "TSoftObjectPtr<UWorld>",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "ToSocketName",
					"description": "To Socket Name",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "FName",
					"parameters": [
						{
							"name": "Socket",
							"type": "const ELittleTrekkerSocket",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "UnregisterWorldAs",
					"description": "Unregister World As",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Type",
							"type": "ELittleTrekkerWorldType",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "World",
							"type": "TSoftObjectPtr<UWorld>",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerDeveloperSettings",
					"className": "Little Trekker",
					"shortTitle": "Unregister World As",
					"fullTitle": "Unregister World As",
					"description": "",
					"imgPath": "../img/nd_img_UnregisterWorldAs.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Little Trekker Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Type",
							"type": "ELittleTrekkerWorldType Enum",
							"description": "$no_comments"
						},
						{
							"name": "World",
							"type": "World Soft Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerDeveloperSettings",
					"className": "Little Trekker",
					"shortTitle": "To Socket Name",
					"fullTitle": "To Socket Name",
					"description": "",
					"imgPath": "../img/nd_img_ToSocketName.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Socket",
							"type": "ELittleTrekkerSocket Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Name",
							"description": "To Socket Name"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerDeveloperSettings",
					"className": "Little Trekker",
					"shortTitle": "Register World As",
					"fullTitle": "Register World As",
					"description": "",
					"imgPath": "../img/nd_img_RegisterWorldAs.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Little Trekker Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Type",
							"type": "ELittleTrekkerWorldType Enum",
							"description": "$no_comments"
						},
						{
							"name": "World",
							"type": "World Soft Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerDeveloperSettings",
					"className": "Little Trekker",
					"shortTitle": "Get World Type",
					"fullTitle": "Get World Type",
					"description": "",
					"imgPath": "../img/nd_img_GetWorldType.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Little Trekker Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "World",
							"type": "World Soft Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "ELittleTrekkerWorldType Enum",
							"description": "Get World Type"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerDeveloperSettings",
					"className": "Little Trekker",
					"shortTitle": "Get Worlds",
					"fullTitle": "Get Worlds",
					"description": "",
					"imgPath": "../img/nd_img_GetWorlds.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Little Trekker Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "World Type",
							"type": "ELittleTrekkerWorldType Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Set of World Soft Object References",
							"description": "Get Worlds"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerDeveloperSettings",
					"className": "Little Trekker",
					"shortTitle": "Get Mutable",
					"fullTitle": "Get Mutable",
					"description": "",
					"imgPath": "../img/nd_img_GetMutable.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Little Trekker Object Reference",
							"description": "Get Mutable"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerDeveloperSettings",
					"className": "Little Trekker",
					"shortTitle": "Get",
					"fullTitle": "Get",
					"description": "",
					"imgPath": "../img/nd_img_Get.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Little Trekker Object Reference",
							"description": "Get"
						}
					]
				}
			]
		},
		{
			"className": "ULittleTrekkerEnhancedInputUserSettings",
			"classHierarchy": [
				"UObject",
				"USaveGame",
				"UEnhancedInputUserSettings"
			],
			"path": "Classes/Default/ULittleTrekkerEnhancedInputUserSettings",
			"properties": [],
			"functions": []
		},
		{
			"className": "ULittleTrekkerGameInstance",
			"classHierarchy": [
				"UObject",
				"UGameInstance"
			],
			"path": "Classes/Default/ULittleTrekkerGameInstance",
			"properties": [
				{
					"name": "CurrentState",
					"type": "TObjectPtr<ULittleTrekkerGameInstanceState>",
					"flags": [
						"Category = SaveGame",
						"ModuleRelativePath = LittleTrekkerGameInstance.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "ULittleTrekkerGameInstanceState",
			"classHierarchy": [
				"UObject"
			],
			"path": "Classes/Default/ULittleTrekkerGameInstanceState",
			"properties": [
				{
					"name": "GameplayTags",
					"type": "FGameplayTagContainer",
					"flags": [
						"Category = LittleTrekkerGameInstanceState",
						"ModuleRelativePath = LittleTrekkerGameInstanceState.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"SaveGame"
					],
					"description": ""
				},
				{
					"name": "Missions",
					"type": "TArray",
					"flags": [
						"Category = LittleTrekkerGameInstanceState",
						"ModuleRelativePath = LittleTrekkerGameInstanceState.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"SaveGame"
					],
					"description": ""
				},
				{
					"name": "OnMissionCompleted",
					"type": "FOnMissionCompleted",
					"flags": [
						"ModuleRelativePath = LittleTrekkerGameInstanceState.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "AddGameplayTag",
					"description": "Add Gameplay Tag",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "GameplayTag",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "AddGameplayTags",
					"description": "Add Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewGameplayTags",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "AddMission",
					"description": "Add Mission",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewMission",
							"type": "const FMission&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "AddTemporaryGameplayTags",
					"description": "Add Temporary Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "TemporaryGameplayTags",
							"type": "const FGameplayTagContainer&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "ClearTemporaryGameplayTags",
					"description": "Clear Temporary Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "Get",
					"description": "Get",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "ULittleTrekkerGameInstanceState*",
					"parameters": [
						{
							"name": "WorldContextObject",
							"type": "const UObject*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetCombinedGameplayTags",
					"description": "Get Combined Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FGameplayTagContainer",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetGameplayTags",
					"description": "Get Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FGameplayTagContainer",
					"parameters": []
				},
				{
					"name": "GetTemporaryGameplayTags",
					"description": "Get Temporary Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FGameplayTagContainer",
					"parameters": []
				},
				{
					"name": "HasCompletedMissionId",
					"description": "Has Completed Mission Id",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "MissionId",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "IsMissionComplete",
					"description": "Is Mission Complete",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Mission",
							"type": "const FMission&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "OnMissionCompleted__DelegateSignature",
					"description": "On Mission Completed  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate",
						"HasOutParams"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Mission",
							"type": "const FMission&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "RemoveGameplayTag",
					"description": "Remove Gameplay Tag",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "GameplayTag",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "RemoveGameplayTags",
					"description": "Remove Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "ToRemoveGameplayTags",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "RemoveTemporaryGameplayTags",
					"description": "Remove Temporary Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "ToRemoveGameplayTags",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetGameplayTags",
					"description": "Set Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewGameplayTags",
							"type": "const FGameplayTagContainer&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "SetMissionComplete",
					"description": "Set Mission Complete",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "MissionId",
							"type": "const FGameplayTag&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "bIsComplete",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "UpdateMissions",
					"description": "Update Missions",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "TArray",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerGameInstanceState",
					"className": "Little Trekker Game Instance State",
					"shortTitle": "Update Missions",
					"fullTitle": "Update Missions",
					"description": "",
					"imgPath": "../img/nd_img_UpdateMissions.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Little Trekker Game Instance State Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Array of Mission Structures",
							"description": "Update Missions"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerGameInstanceState",
					"className": "Little Trekker Game Instance State",
					"shortTitle": "Set Mission Complete",
					"fullTitle": "Set Mission Complete",
					"description": "",
					"imgPath": "../img/nd_img_SetMissionComplete.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Little Trekker Game Instance State Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Mission Id",
							"type": "Gameplay Tag Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Is Complete",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerGameInstanceState",
					"className": "Little Trekker Game Instance State",
					"shortTitle": "Set Gameplay Tags",
					"fullTitle": "Set Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_SetGameplayTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Little Trekker Game Instance State Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Gameplay Tags",
							"type": "Gameplay Tag Container Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerGameInstanceState",
					"className": "Little Trekker Game Instance State",
					"shortTitle": "Remove Temporary Gameplay Tags",
					"fullTitle": "Remove Temporary Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_RemoveTemporaryGameplayTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Little Trekker Game Instance State Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "To Remove Gameplay Tags",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerGameInstanceState",
					"className": "Little Trekker Game Instance State",
					"shortTitle": "Remove Gameplay Tags",
					"fullTitle": "Remove Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_RemoveGameplayTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Little Trekker Game Instance State Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "To Remove Gameplay Tags",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerGameInstanceState",
					"className": "Little Trekker Game Instance State",
					"shortTitle": "Remove Gameplay Tag",
					"fullTitle": "Remove Gameplay Tag",
					"description": "",
					"imgPath": "../img/nd_img_RemoveGameplayTag.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Little Trekker Game Instance State Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Gameplay Tag",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerGameInstanceState",
					"className": "Little Trekker Game Instance State",
					"shortTitle": "Is Mission Complete",
					"fullTitle": "Is Mission Complete",
					"description": "",
					"imgPath": "../img/nd_img_IsMissionComplete.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Little Trekker Game Instance State Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Mission",
							"type": "Mission Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Mission Complete"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerGameInstanceState",
					"className": "Little Trekker Game Instance State",
					"shortTitle": "Has Completed Mission Id",
					"fullTitle": "Has Completed Mission Id",
					"description": "",
					"imgPath": "../img/nd_img_HasCompletedMissionId.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Little Trekker Game Instance State Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Mission Id",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Has Completed Mission Id"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerGameInstanceState",
					"className": "Little Trekker Game Instance State",
					"shortTitle": "Get Temporary Gameplay Tags",
					"fullTitle": "Get Temporary Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_GetTemporaryGameplayTags.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Little Trekker Game Instance State Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Gameplay Tag Container Structure",
							"description": "Get Temporary Gameplay Tags"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerGameInstanceState",
					"className": "Little Trekker Game Instance State",
					"shortTitle": "Get Gameplay Tags",
					"fullTitle": "Get Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_GetGameplayTags.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Little Trekker Game Instance State Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Gameplay Tag Container Structure",
							"description": "Get Gameplay Tags"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerGameInstanceState",
					"className": "Little Trekker Game Instance State",
					"shortTitle": "Get Combined Gameplay Tags",
					"fullTitle": "Get Combined Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_GetCombinedGameplayTags.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Little Trekker Game Instance State Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Gameplay Tag Container Structure",
							"description": "Get Combined Gameplay Tags"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerGameInstanceState",
					"className": "Little Trekker Game Instance State",
					"shortTitle": "Get Little Trekker State",
					"fullTitle": "Get Little Trekker State",
					"description": "Little Trekker",
					"imgPath": "../img/nd_img_Get.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Little Trekker Game Instance State Object Reference",
							"description": "Get"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerGameInstanceState",
					"className": "Little Trekker Game Instance State",
					"shortTitle": "Clear Temporary Gameplay Tags",
					"fullTitle": "Clear Temporary Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_ClearTemporaryGameplayTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Little Trekker Game Instance State Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerGameInstanceState",
					"className": "Little Trekker Game Instance State",
					"shortTitle": "Add Temporary Gameplay Tags",
					"fullTitle": "Add Temporary Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_AddTemporaryGameplayTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Little Trekker Game Instance State Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Temporary Gameplay Tags",
							"type": "Gameplay Tag Container Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerGameInstanceState",
					"className": "Little Trekker Game Instance State",
					"shortTitle": "Add Mission",
					"fullTitle": "Add Mission",
					"description": "",
					"imgPath": "../img/nd_img_AddMission.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Little Trekker Game Instance State Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Mission",
							"type": "Mission Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerGameInstanceState",
					"className": "Little Trekker Game Instance State",
					"shortTitle": "Add Gameplay Tags",
					"fullTitle": "Add Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_AddGameplayTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Little Trekker Game Instance State Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Gameplay Tags",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerGameInstanceState",
					"className": "Little Trekker Game Instance State",
					"shortTitle": "Add Gameplay Tag",
					"fullTitle": "Add Gameplay Tag",
					"description": "",
					"imgPath": "../img/nd_img_AddGameplayTag.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Little Trekker Game Instance State Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Gameplay Tag",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "ALittleTrekkerGameMode",
			"classHierarchy": [
				"UObject",
				"AActor",
				"AInfo",
				"AGameModeBase"
			],
			"path": "Classes/Default/ALittleTrekkerGameMode",
			"properties": [
				{
					"name": "GameplayTags",
					"type": "FGameplayTagContainer",
					"flags": [
						"Category = LittleTrekkerGameMode",
						"ModuleRelativePath = LittleTrekkerGameMode.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"SaveGame"
					],
					"description": ""
				},
				{
					"name": "bDebugEnabled",
					"type": "bool",
					"flags": [
						"Category = LittleTrekkerGameMode",
						"ModuleRelativePath = LittleTrekkerGameMode.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "AddGameplayTag",
					"description": "Add Gameplay Tag",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "GameplayTag",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "AddGameplayTags",
					"description": "Add Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewGameplayTags",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetGameplayTags",
					"description": "Get Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FGameplayTagContainer",
					"parameters": []
				},
				{
					"name": "LoadSaveGame",
					"description": "Load Save Game",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Player",
							"type": "APlayerController*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "PostLoadGame",
					"description": "Post Load Game",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "SlotName",
							"type": "FString",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm"
							]
						},
						{
							"name": "bSuccess",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "PostSaveGame",
					"description": "Post Save Game",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "SlotName",
							"type": "FString",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm"
							]
						},
						{
							"name": "bSuccess",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "PostTravelToNewMap",
					"description": "Post Travel to New Map",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "RemoveGameplayTag",
					"description": "Remove Gameplay Tag",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "GameplayTag",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "RemoveGameplayTags",
					"description": "Remove Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "ToRemoveGameplayTags",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetGameplayTags",
					"description": "Set Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewGameplayTags",
							"type": "const FGameplayTagContainer&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "WriteSaveGame",
					"description": "Write Save Game",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Player",
							"type": "APlayerController*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "ALittleTrekkerGameMode",
					"className": "Little Trekker Game Mode",
					"shortTitle": "Write Save Game",
					"fullTitle": "Write Save Game",
					"description": "SaveGame",
					"imgPath": "../img/nd_img_WriteSaveGame.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Little Trekker Game Mode Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Player",
							"type": "Player Controller Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ALittleTrekkerGameMode",
					"className": "Little Trekker Game Mode",
					"shortTitle": "Set Gameplay Tags",
					"fullTitle": "Set Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_SetGameplayTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Little Trekker Game Mode Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Gameplay Tags",
							"type": "Gameplay Tag Container Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ALittleTrekkerGameMode",
					"className": "Little Trekker Game Mode",
					"shortTitle": "Remove Gameplay Tags",
					"fullTitle": "Remove Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_RemoveGameplayTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Little Trekker Game Mode Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "To Remove Gameplay Tags",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ALittleTrekkerGameMode",
					"className": "Little Trekker Game Mode",
					"shortTitle": "Remove Gameplay Tag",
					"fullTitle": "Remove Gameplay Tag",
					"description": "",
					"imgPath": "../img/nd_img_RemoveGameplayTag.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Little Trekker Game Mode Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Gameplay Tag",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ALittleTrekkerGameMode",
					"className": "Little Trekker Game Mode",
					"shortTitle": "Load Save Game",
					"fullTitle": "Load Save Game",
					"description": "SaveGame",
					"imgPath": "../img/nd_img_LoadSaveGame.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Little Trekker Game Mode Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Player",
							"type": "Player Controller Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ALittleTrekkerGameMode",
					"className": "Little Trekker Game Mode",
					"shortTitle": "Get Gameplay Tags",
					"fullTitle": "Get Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_GetGameplayTags.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Little Trekker Game Mode Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Gameplay Tag Container Structure",
							"description": "Get Gameplay Tags"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ALittleTrekkerGameMode",
					"className": "Little Trekker Game Mode",
					"shortTitle": "Add Gameplay Tags",
					"fullTitle": "Add Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_AddGameplayTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Little Trekker Game Mode Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Gameplay Tags",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ALittleTrekkerGameMode",
					"className": "Little Trekker Game Mode",
					"shortTitle": "Add Gameplay Tag",
					"fullTitle": "Add Gameplay Tag",
					"description": "",
					"imgPath": "../img/nd_img_AddGameplayTag.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Little Trekker Game Mode Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Gameplay Tag",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "ALittleTrekkerGameStateBase",
			"classHierarchy": [
				"UObject",
				"AActor",
				"AInfo",
				"AGameStateBase"
			],
			"path": "Classes/Default/ALittleTrekkerGameStateBase",
			"properties": [],
			"functions": []
		},
		{
			"className": "ALittleTrekkerPlayerController",
			"classHierarchy": [
				"UObject",
				"AActor",
				"AController",
				"APlayerController"
			],
			"path": "Classes/Default/ALittleTrekkerPlayerController",
			"properties": [
				{
					"name": "bDebugEnabled",
					"type": "bool",
					"flags": [
						"Category = LittleTrekkerPlayerController",
						"Comment = // FGuid SpudGuid;\n",
						"ModuleRelativePath = LittleTrekkerPlayerController.h",
						"ToolTip = FGuid SpudGuid;",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "FGuid SpudGuid;"
				},
				{
					"name": "ShortPressThreshold",
					"type": "float",
					"flags": [
						"Category = Input",
						"Comment = /** Time Threshold to know if it was a short press */",
						"ModuleRelativePath = LittleTrekkerPlayerController.h",
						"ToolTip = Time Threshold to know if it was a short press",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Time Threshold to know if it was a short press"
				},
				{
					"name": "CursorStack",
					"type": "TObjectPtr<UCursorStack>",
					"flags": [
						"Category = Input",
						"EditInline = true",
						"ModuleRelativePath = LittleTrekkerPlayerController.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "FXCursor",
					"type": "TObjectPtr<UNiagaraSystem>",
					"flags": [
						"Category = Input",
						"Comment = /** FX Class that we will spawn when clicking */",
						"ModuleRelativePath = LittleTrekkerPlayerController.h",
						"ToolTip = FX Class that we will spawn when clicking",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": "FX Class that we will spawn when clicking"
				},
				{
					"name": "DefaultMappingContexts",
					"type": "TArray",
					"flags": [
						"AllowPrivateAccess = true",
						"Category = Input",
						"Comment = /** MappingContext */",
						"ModuleRelativePath = LittleTrekkerPlayerController.h",
						"ToolTip = MappingContext",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": "MappingContext"
				},
				{
					"name": "SetDestinationClickAction",
					"type": "TObjectPtr<UInputAction>",
					"flags": [
						"AllowPrivateAccess = true",
						"Category = Input",
						"Comment = /** Jump Input Action */",
						"ModuleRelativePath = LittleTrekkerPlayerController.h",
						"ToolTip = Jump Input Action",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Jump Input Action"
				},
				{
					"name": "SetDestinationTouchAction",
					"type": "TObjectPtr<UInputAction>",
					"flags": [
						"AllowPrivateAccess = true",
						"Category = Input",
						"Comment = /** Jump Input Action */",
						"ModuleRelativePath = LittleTrekkerPlayerController.h",
						"ToolTip = Jump Input Action",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Jump Input Action"
				},
				{
					"name": "InteractAction",
					"type": "TObjectPtr<UInputAction>",
					"flags": [
						"AllowPrivateAccess = true",
						"Category = Input",
						"ModuleRelativePath = LittleTrekkerPlayerController.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "CurrentSaveGame",
					"type": "TObjectPtr<ULittleTrekkerGameInstanceState>",
					"flags": [
						"Category = LittleTrekkerPlayerController",
						"ModuleRelativePath = LittleTrekkerPlayerController.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst",
						"SaveGame"
					],
					"description": ""
				},
				{
					"name": "DefaultSceneRoot",
					"type": "TObjectPtr<USceneComponent>",
					"flags": [
						"Category = Default",
						"EditInline = true",
						"ModuleRelativePath = LittleTrekkerPlayerController.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				},
				{
					"name": "PhysicsHandle",
					"type": "TObjectPtr<UPhysicsHandleComponent>",
					"flags": [
						"Category = LittleTrekkerPlayerController",
						"EditInline = true",
						"ModuleRelativePath = LittleTrekkerPlayerController.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				},
				{
					"name": "CameraFadeOptions",
					"type": "FCameraFadeOptions",
					"flags": [
						"Category = LittleTrekkerPlayerController",
						"ModuleRelativePath = LittleTrekkerPlayerController.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "bCameraFading",
					"type": "bool",
					"flags": [
						"Category = LittleTrekkerPlayerController",
						"ModuleRelativePath = LittleTrekkerPlayerController.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "OnPlayerHasControlChangedDelegate",
					"type": "FOnPlayerHasControlChanged",
					"flags": [
						"Category = Input",
						"DisplayName = OnPlayerHasControlChanged",
						"ModuleRelativePath = LittleTrekkerPlayerController.h",
						"Protected",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "MoveToActor",
					"type": "TObjectPtr<AActor>",
					"flags": [
						"ModuleRelativePath = LittleTrekkerPlayerController.h",
						"Private"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "CancelMoveToGoal",
					"description": "Cancel Move to Goal",
					"flags": [
						"Final",
						"Native",
						"Protected",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "GetLittleTrekkerPlayerController",
					"description": "Get Little Trekker Player Controller",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "ALittleTrekkerPlayerController*",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "IsMovingToGoal",
					"description": "Is Moving to Goal",
					"flags": [
						"Final",
						"Native",
						"Protected",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "OnMappingContextsRebuilt",
					"description": "On Mapping Contexts Rebuilt",
					"flags": [
						"Final",
						"Native",
						"Protected"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnPlayerHasControlChanged__DelegateSignature",
					"description": "On Player Has Control Changed  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bHasControl",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetInputModeGameOnly",
					"description": "Set Input Mode Game Only",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InConsumeCaptureMouseDown",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "ALittleTrekkerPlayerController",
					"className": "Little Trekker Player Controller",
					"shortTitle": "Set Input Mode Game Only",
					"fullTitle": "Set Input Mode Game Only",
					"description": "",
					"imgPath": "../img/nd_img_SetInputModeGameOnly.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Little Trekker Player Controller Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Consume Capture Mouse Down",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ALittleTrekkerPlayerController",
					"className": "Little Trekker Player Controller",
					"shortTitle": "Is Moving to Goal",
					"fullTitle": "Is Moving to Goal",
					"description": "",
					"imgPath": "../img/nd_img_IsMovingToGoal.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Little Trekker Player Controller Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Moving to Goal"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ALittleTrekkerPlayerController",
					"className": "Little Trekker Player Controller",
					"shortTitle": "Get Little Trekker Player Controller",
					"fullTitle": "Get Little Trekker Player Controller",
					"description": "",
					"imgPath": "../img/nd_img_GetLittleTrekkerPlayerController.png",
					"inputs": [
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Little Trekker Player Controller Object Reference",
							"description": "Get Little Trekker Player Controller"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ALittleTrekkerPlayerController",
					"className": "Little Trekker Player Controller",
					"shortTitle": "Cancel Move to Goal",
					"fullTitle": "Cancel Move to Goal",
					"description": "",
					"imgPath": "../img/nd_img_CancelMoveToGoal.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Little Trekker Player Controller Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UDirectionUtil",
			"classHierarchy": [
				"UObject",
				"UBlueprintFunctionLibrary"
			],
			"path": "Classes/Default/UDirectionUtil",
			"properties": [],
			"functions": [
				{
					"name": "GetDirection3D",
					"description": "Get Direction 3D",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FVector",
					"parameters": [
						{
							"name": "AxisDirection",
							"type": "EAxisDirection",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UDirectionUtil",
					"className": "Direction Util",
					"shortTitle": "Get Direction 3D",
					"fullTitle": "Get Direction 3D",
					"description": "",
					"imgPath": "../img/nd_img_GetDirection3D.png",
					"inputs": [
						{
							"name": "Axis Direction",
							"type": "unsupported_enum_type: enum size is larger than a byte",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Vector",
							"description": "Get Direction 3D"
						}
					]
				}
			]
		},
		{
			"className": "ULittleTrekkerUtils",
			"classHierarchy": [
				"UObject",
				"UBlueprintFunctionLibrary"
			],
			"path": "Classes/Default/ULittleTrekkerUtils",
			"properties": [],
			"functions": [
				{
					"name": "DumpStack",
					"description": "Dump Stack",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "EntriesToIgnore",
							"type": "int32",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "MaxDepth",
							"type": "int32",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "FindAttachParent_K2",
					"description": "walks up the hierarchy of the given component and returns the first parent of the given type\nif bCheckSelf is true, the function will also check the given component itself\ne.g. FindAttachParent<UPrimitiveComponent>(MyComponent, false) will return the first parent of MyComponent that is a UPrimitiveComponent\ne.g. FindAttachParent<UPrimitiveComponent>(MyComponent, true) may return MyComponent if it is a UPrimitiveComponent\n_K2 version for blueprint use",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "UActorComponent*",
					"parameters": [
						{
							"name": "SceneComponent",
							"type": "USceneComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						},
						{
							"name": "ComponentClass",
							"type": "const TSubclassOf<USceneComponent>",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "IsComponentValid",
							"type": "EValid",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						},
						{
							"name": "bCheckSelf",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "FindController_K2",
					"description": "Tries to find a controller for the actor.\nIf the actor is a pawn, it will return the pawn's controller.\nIf the actor is a controller, it will return the controller.",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "AController*",
					"parameters": [
						{
							"name": "Target",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "FindFloor_K2",
					"description": "Find Floor K2",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "OutFloorHit",
							"type": "FHitResult",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						},
						{
							"name": "WorldContextObject",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Start",
							"type": "const FVector&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "DebugOptions",
							"type": "const FDrawDebugOptions&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "OutLocation",
							"type": "FVector",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						},
						{
							"name": "TraceOptions",
							"type": "FTraceOptions",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "FindLittleTrekkerCharacter",
					"description": "Find Little Trekker Character",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "ALittleTrekkerCharacter*",
					"parameters": [
						{
							"name": "Target",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "FindPawn_K2",
					"description": "Find Pawn K2",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "APawn*",
					"parameters": [
						{
							"name": "Target",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetActorGameplayTags",
					"description": "Get Actor Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "OutGameplayTags",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						}
					]
				},
				{
					"name": "GetAttachedComponents_K2",
					"description": "Gets all the components attached to the given socket.",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "TArray",
					"parameters": [
						{
							"name": "Component",
							"type": "UPrimitiveComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						},
						{
							"name": "SocketName",
							"type": "FName",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetBoxExtent",
					"description": "Get Box Extent",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FVector",
					"parameters": [
						{
							"name": "Box",
							"type": "const FBox&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "GetChildActor_K2",
					"description": "Get Child Actor K2",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "AActor*",
					"parameters": [
						{
							"name": "ChildActorComponent",
							"type": "UChildActorComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						},
						{
							"name": "ActorClass",
							"type": "const TSubclassOf<AActor>",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "IsChildValid",
							"type": "bool",
							"description": "",
							"flags": [
								"DisplayName = IsValid",
								"Public",
								"Parm",
								"OutParm"
							]
						}
					]
				},
				{
					"name": "GetChildActorsInScene_K2",
					"description": "Get Child Actors in Scene K2",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "TArray",
					"parameters": [
						{
							"name": "SceneComponent",
							"type": "USceneComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						},
						{
							"name": "ActorClass",
							"type": "const TSubclassOf<AActor>",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetCleanStack",
					"description": "Get Clean Stack",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "FString",
					"parameters": [
						{
							"name": "EntriesToIgnore",
							"type": "int32",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "MaxDepth",
							"type": "int32",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetComponentNames",
					"description": "Get Component Names",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "TArray",
					"parameters": [
						{
							"name": "Source",
							"type": "const UObject*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetDebugName_K2",
					"description": "Get Debug Name K2",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FString",
					"parameters": [
						{
							"name": "Object",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetDistanceTo",
					"description": "Get Distance To",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "float",
					"parameters": [
						{
							"name": "Comp",
							"type": "const USceneComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "OtherComp",
							"type": "const USceneComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetGameplayTags",
					"description": "Get Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Target",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "OutGameplayTags",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						}
					]
				},
				{
					"name": "GetHorizontalDistanceTo",
					"description": "Get Horizontal Distance To",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "float",
					"parameters": [
						{
							"name": "Comp",
							"type": "const USceneComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "OtherComp",
							"type": "const USceneComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetLocalPlayerController",
					"description": "Returns the local player controller for the given world context object.\nUse this instead of GetFirstLocalPlayerController() because that\nwill return the first player controller in the world, which may not be the\none you want.",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "APlayerController*",
					"parameters": [
						{
							"name": "WorldContextObject",
							"type": "const UObject*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetLocalPlayerPawn_K2",
					"description": "Get Local Player Pawn K2",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "APawn*",
					"parameters": [
						{
							"name": "WorldContextObject",
							"type": "const UObject*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetLocation",
					"description": "Get Location",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FVector",
					"parameters": [
						{
							"name": "Transform",
							"type": "const FTransform",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetRequirementFailureReason",
					"description": "Get Requirement Failure Reason",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FString",
					"parameters": [
						{
							"name": "Requirements",
							"type": "const FGameplayTagRequirements&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "Tags",
							"type": "const FGameplayTagContainer&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "GetRequirementFailureReasonCompact",
					"description": "shorter version of GetRequirementFailureReason, shows only the first failed requirement without new lines or any extra info",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FString",
					"parameters": [
						{
							"name": "Requirements",
							"type": "const FGameplayTagRequirements&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "Tags",
							"type": "const FGameplayTagContainer&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "GetRotation",
					"description": "Get Rotation",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FRotator",
					"parameters": [
						{
							"name": "Transform",
							"type": "const FTransform",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetSquaredDistanceTo",
					"description": "Get Squared Distance To",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "float",
					"parameters": [
						{
							"name": "Comp",
							"type": "const USceneComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "OtherComp",
							"type": "const USceneComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetSquaredHorizontalDistanceTo",
					"description": "Get Squared Horizontal Distance To",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "float",
					"parameters": [
						{
							"name": "Comp",
							"type": "const USceneComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "OtherComp",
							"type": "const USceneComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetStack",
					"description": "Get Stack",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "FString",
					"parameters": [
						{
							"name": "EntriesToIgnore",
							"type": "int32",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "MaxDepth",
							"type": "int32",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetTransformInFrontOf",
					"description": "Get Transform in Front Of",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Distance",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "OutTransform",
							"type": "FTransform",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						}
					]
				},
				{
					"name": "GetTransformInFrontOfEyes",
					"description": "Get Transform in Front Of Eyes",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Distance",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "OutTransform",
							"type": "FTransform",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						}
					]
				},
				{
					"name": "GetValidComponentByClass",
					"description": "* Specific for blueprint use - for cpp use GetComponentByClass<>()",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "UActorComponent*",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "ComponentClass",
							"type": "TSubclassOf<UActorComponent>",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "IsComponentValid",
							"type": "EValid",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						}
					]
				},
				{
					"name": "GetVerticalDistanceTo",
					"description": "Get Vertical Distance To",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "float",
					"parameters": [
						{
							"name": "Comp",
							"type": "const USceneComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "OtherComp",
							"type": "const USceneComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "IsLocalPlayerInRangeOf",
					"description": "Is Local Player in Range Of",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "InRangeOfActor",
							"type": "const AActor*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "Range",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "IsPlayer",
					"description": "Returns true if the actor is a player controller or player-controlled pawn.\nUseful in event graphs where you want to check whether a player triggered the\nevent and you don't want to think about whether the actor is a pawn or a controller.",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "IsPlayWorld",
					"description": "true if the world is a play world i.e. game world + not preview world",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "WorldContextObject",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "LaunchParamsToString",
					"description": "Launch Params to String",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "FString",
					"parameters": [
						{
							"name": "Params",
							"type": "const FLaunchParameters&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "MatchesQuery",
					"description": "Tests whether the given IGameplayTagAssetInterface Matches the given tag query.",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Target",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Query",
							"type": "const FGameplayTagQuery&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "PlayerHasControl",
					"description": "Player Has Control",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "PC",
							"type": "APlayerController*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "RequirementsMet",
					"description": "Requirements Met",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Requirements",
							"type": "const FGameplayTagRequirements&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "Tags",
							"type": "const FGameplayTagContainer&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "Reason",
							"type": "FString",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						}
					]
				},
				{
					"name": "RoundToInt",
					"description": "Round to Int",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FVector",
					"parameters": [
						{
							"name": "Vector",
							"type": "const FVector&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "SetActorGravityEnabled",
					"description": "Set Actor Gravity Enabled",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "bGravityEnabled",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetCinematicMode",
					"description": "Set Cinematic Mode",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "PC",
							"type": "APlayerController*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Options",
							"type": "const FCinematicModeOptions&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "SetEnableLocalControllerInput",
					"description": "Enable or disable input for the local player controller on the given actor, based on bNewEnableInput.",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Actor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "bNewEnableInput",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetRenderCustomDepth",
					"description": "Set Render Custom Depth",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Component",
							"type": "UPrimitiveComponent*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						},
						{
							"name": "bRenderCustomDepth",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "StencilValue",
							"type": "int32",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SuggestActorLaunchVelocity",
					"description": "Suggest Actor Launch Velocity",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Actor",
							"type": "const AActor*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "TargetLocation",
							"type": "const FVector&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "OutLaunchVelocity",
							"type": "FVector",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						},
						{
							"name": "GravityZOverride",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "CustomArcParam",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "bDrawDebug",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "bHighArc",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SuggestCharacterLaunchVelocity",
					"description": "Suggest Character Launch Velocity",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Character",
							"type": "const ACharacter*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "TargetLocation",
							"type": "const FVector&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "OutLaunchVelocity",
							"type": "FVector",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						},
						{
							"name": "GravityZOverride",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "CustomArcParam",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "bDrawDebug",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "bHighArc",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SuggestLaunchVelocity",
					"description": "Get launch velocity for the given target location.\n       * @param TossVelocity                                  (output) Result launch velocity.\n       * @param Actor                                                 Intended launch Actor\n       * @param TargetLocation                                Desired landing location\n       * @param LaunchParams                                  Parameters for the launch\n       * @return                                                              Returns false if there is no valid solution or the valid solutions are blocked.  Returns true otherwise.",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasOutParams",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Actor",
							"type": "const AActor*",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "TargetLocation",
							"type": "const FVector&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "OutLaunchVelocity",
							"type": "FVector",
							"description": "",
							"flags": [
								"Public",
								"Parm",
								"OutParm"
							]
						},
						{
							"name": "LaunchParams",
							"type": "const FLaunchParameters&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Suggest Launch Velocity",
					"fullTitle": "Suggest Launch Velocity",
					"description": "",
					"imgPath": "../img/nd_img_SuggestLaunchVelocity.png",
					"inputs": [
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "Intended launch Actor *"
						},
						{
							"name": "Target Location",
							"type": "Vector (by ref)",
							"description": "Desired landing location *"
						},
						{
							"name": "Launch Params",
							"type": "Launch Parameters Structure (by ref)",
							"description": "Parameters for the launch *"
						}
					],
					"outputs": [
						{
							"name": "Out Launch Velocity",
							"type": "Vector",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Returns false if there is no valid solution or the valid solutions are blocked.  Returns true otherwise."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Suggest Character Launch Velocity",
					"fullTitle": "Suggest Character Launch Velocity",
					"description": "",
					"imgPath": "../img/nd_img_SuggestCharacterLaunchVelocity.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Little Trekker Utils Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Character",
							"type": "Character Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Target Location",
							"type": "Vector (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Gravity ZOverride",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Custom Arc Param",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Draw Debug",
							"type": "Boolean",
							"description": "$no_comments"
						},
						{
							"name": "High Arc",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out Launch Velocity",
							"type": "Vector",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Suggest Character Launch Velocity"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Suggest Actor Launch Velocity",
					"fullTitle": "Suggest Actor Launch Velocity",
					"description": "",
					"imgPath": "../img/nd_img_SuggestActorLaunchVelocity.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Target Location",
							"type": "Vector (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Gravity ZOverride",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Custom Arc Param",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Draw Debug",
							"type": "Boolean",
							"description": "$no_comments"
						},
						{
							"name": "High Arc",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "True",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "False",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Out Launch Velocity",
							"type": "Vector",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Set Render Custom Depth",
					"fullTitle": "Set Render Custom Depth",
					"description": "",
					"imgPath": "../img/nd_img_SetRenderCustomDepth.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Component",
							"type": "Primitive Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Render Custom Depth",
							"type": "Boolean",
							"description": "$no_comments"
						},
						{
							"name": "Stencil Value",
							"type": "Integer",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Set Enable Local Controller Input",
					"fullTitle": "Set Enable Local Controller Input",
					"description": "",
					"imgPath": "../img/nd_img_SetEnableLocalControllerInput.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Enable Input",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Set Cinematic Mode",
					"fullTitle": "Set Cinematic Mode",
					"description": "",
					"imgPath": "../img/nd_img_SetCinematicMode.png",
					"inputs": [
						{
							"name": "PC",
							"type": "Player Controller Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Options",
							"type": "Cinematic Mode Options Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": []
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Set Actor Gravity Enabled",
					"fullTitle": "Set Actor Gravity Enabled",
					"description": "",
					"imgPath": "../img/nd_img_SetActorGravityEnabled.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Gravity Enabled",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Round to Int",
					"fullTitle": "Round to Int",
					"description": "",
					"imgPath": "../img/nd_img_RoundToInt.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Little Trekker Utils Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector",
							"type": "Vector (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Vector",
							"description": "Round to Int"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Requirements Met",
					"fullTitle": "Requirements Met",
					"description": "",
					"imgPath": "../img/nd_img_RequirementsMet.png",
					"inputs": [
						{
							"name": "Requirements",
							"type": "Gameplay Tag Requirements Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Tags",
							"type": "Gameplay Tag Container Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Reason",
							"type": "String",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Requirements Met"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Player Has Control",
					"fullTitle": "Player Has Control",
					"description": "",
					"imgPath": "../img/nd_img_PlayerHasControl.png",
					"inputs": [
						{
							"name": "PC",
							"type": "Player Controller Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Player Has Control"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Matches Query",
					"fullTitle": "Matches Query",
					"description": "",
					"imgPath": "../img/nd_img_MatchesQuery.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Query",
							"type": "Gameplay Tag Query Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Tests whether the given IGameplayTagAssetInterface Matches the given tag query."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Is Play World",
					"fullTitle": "Is Play World",
					"description": "",
					"imgPath": "../img/nd_img_IsPlayWorld.png",
					"inputs": [
						{
							"name": "World Context Object",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "true if the world is a play world i.e. game world + not preview world"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Is Player Actor",
					"fullTitle": "Is Player Actor",
					"description": "",
					"imgPath": "../img/nd_img_IsPlayer.png",
					"inputs": [
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Returns true if the actor is a player controller or player-controlled pawn.\nUseful in event graphs where you want to check whether a player triggered the\nevent and you don't want to think about whether the actor is a pawn or a controller."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Is Local Player in Range Of",
					"fullTitle": "Is Local Player in Range Of",
					"description": "",
					"imgPath": "../img/nd_img_IsLocalPlayerInRangeOf.png",
					"inputs": [
						{
							"name": "In Range Of Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Range",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Local Player in Range Of"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Get Vertical Distance To",
					"fullTitle": "Get Vertical Distance To",
					"description": "",
					"imgPath": "../img/nd_img_GetVerticalDistanceTo.png",
					"inputs": [
						{
							"name": "Comp",
							"type": "Scene Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Other Comp",
							"type": "Scene Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Vertical Distance To"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Get Valid Component by Class",
					"fullTitle": "Get Valid Component by Class",
					"description": "",
					"imgPath": "../img/nd_img_GetValidComponentByClass.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Component Class",
							"type": "Actor Component Class Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Is Valid",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Is Not Valid",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Actor Component Object Reference",
							"description": "* Specific for blueprint use - for cpp use GetComponentByClass<>()"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Get Transform in Front Of Eyes",
					"fullTitle": "Get Transform in Front Of Eyes",
					"description": "",
					"imgPath": "../img/nd_img_GetTransformInFrontOfEyes.png",
					"inputs": [
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Distance",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out Transform",
							"type": "Transform",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Get Transform in Front Of Eyes"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Get Transform in Front Of",
					"fullTitle": "Get Transform in Front Of",
					"description": "",
					"imgPath": "../img/nd_img_GetTransformInFrontOf.png",
					"inputs": [
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Distance",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out Transform",
							"type": "Transform",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Get Transform in Front Of"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Get Stack",
					"fullTitle": "Get Stack",
					"description": "",
					"imgPath": "../img/nd_img_GetStack.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Entries to Ignore",
							"type": "Integer",
							"description": "$no_comments"
						},
						{
							"name": "Max Depth",
							"type": "Integer",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "String",
							"description": "Get Stack"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Get Squared Horizontal Distance To",
					"fullTitle": "Get Squared Horizontal Distance To",
					"description": "",
					"imgPath": "../img/nd_img_GetSquaredHorizontalDistanceTo.png",
					"inputs": [
						{
							"name": "Comp",
							"type": "Scene Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Other Comp",
							"type": "Scene Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Squared Horizontal Distance To"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Get Squared Distance To",
					"fullTitle": "Get Squared Distance To",
					"description": "",
					"imgPath": "../img/nd_img_GetSquaredDistanceTo.png",
					"inputs": [
						{
							"name": "Comp",
							"type": "Scene Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Other Comp",
							"type": "Scene Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Squared Distance To"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Get Requirement Failure Reason Compact",
					"fullTitle": "Get Requirement Failure Reason Compact",
					"description": "",
					"imgPath": "../img/nd_img_GetRequirementFailureReasonCompact.png",
					"inputs": [
						{
							"name": "Requirements",
							"type": "Gameplay Tag Requirements Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Tags",
							"type": "Gameplay Tag Container Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "String",
							"description": "shorter version of GetRequirementFailureReason, shows only the first failed requirement without new lines or any extra info"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Get Requirement Failure Reason",
					"fullTitle": "Get Requirement Failure Reason",
					"description": "",
					"imgPath": "../img/nd_img_GetRequirementFailureReason.png",
					"inputs": [
						{
							"name": "Requirements",
							"type": "Gameplay Tag Requirements Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Tags",
							"type": "Gameplay Tag Container Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "String",
							"description": "Get Requirement Failure Reason"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Get Local Player Pawn K2",
					"fullTitle": "Get Local Player Pawn K2",
					"description": "Local Player",
					"imgPath": "../img/nd_img_GetLocalPlayerPawn_K2.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Pawn Object Reference",
							"description": "Get Local Player Pawn K2"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Get Local Player Controller",
					"fullTitle": "Get Local Player Controller",
					"description": "Local Player",
					"imgPath": "../img/nd_img_GetLocalPlayerController.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Player Controller Object Reference",
							"description": "Returns the local player controller for the given world context object.\nUse this instead of GetFirstLocalPlayerController() because that\nwill return the first player controller in the world, which may not be the\none you want."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Get Horizontal Distance To",
					"fullTitle": "Get Horizontal Distance To",
					"description": "",
					"imgPath": "../img/nd_img_GetHorizontalDistanceTo.png",
					"inputs": [
						{
							"name": "Comp",
							"type": "Scene Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Other Comp",
							"type": "Scene Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Horizontal Distance To"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Get Gameplay Tags",
					"fullTitle": "Get Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_GetGameplayTags.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out Gameplay Tags",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Get Distance To",
					"fullTitle": "Get Distance To",
					"description": "",
					"imgPath": "../img/nd_img_GetDistanceTo.png",
					"inputs": [
						{
							"name": "Comp",
							"type": "Scene Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Other Comp",
							"type": "Scene Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Distance To"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Get Component Names",
					"fullTitle": "Get Component Names",
					"description": "",
					"imgPath": "../img/nd_img_GetComponentNames.png",
					"inputs": [
						{
							"name": "Source",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Array of Names",
							"description": "Get Component Names"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Get Clean Stack",
					"fullTitle": "Get Clean Stack",
					"description": "",
					"imgPath": "../img/nd_img_GetCleanStack.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Entries to Ignore",
							"type": "Integer",
							"description": "$no_comments"
						},
						{
							"name": "Max Depth",
							"type": "Integer",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "String",
							"description": "Get Clean Stack"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Get Child Actors In Scene",
					"fullTitle": "Get Child Actors In Scene",
					"description": "",
					"imgPath": "../img/nd_img_GetChildActorsInScene_K2.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Scene Component",
							"type": "Scene Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Actor Class",
							"type": "Actor Class Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Array of Actor Object References",
							"description": "Get Child Actors in Scene K2"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Get Child Actor",
					"fullTitle": "Get Child Actor",
					"description": "",
					"imgPath": "../img/nd_img_GetChildActor_K2.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Child Actor Component",
							"type": "Child Actor Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Actor Class",
							"type": "Actor Class Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "True",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "False",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Actor Object Reference",
							"description": "Get Child Actor K2"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Get Box Extent",
					"fullTitle": "Get Box Extent",
					"description": "",
					"imgPath": "../img/nd_img_GetBoxExtent.png",
					"inputs": [
						{
							"name": "Box",
							"type": "Box Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Vector",
							"description": "Get Box Extent"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Get Attached Components",
					"fullTitle": "Get Attached Components",
					"description": "",
					"imgPath": "../img/nd_img_GetAttachedComponents_K2.png",
					"inputs": [
						{
							"name": "Component",
							"type": "Primitive Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Socket Name",
							"type": "Name",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Array of Scene Component Object References",
							"description": "Gets all the components attached to the given socket."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Get Actor Gameplay Tags",
					"fullTitle": "Get Actor Gameplay Tags",
					"description": "",
					"imgPath": "../img/nd_img_GetActorGameplayTags.png",
					"inputs": [
						{
							"name": "Actor",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out Gameplay Tags",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Find Pawn",
					"fullTitle": "Find Pawn",
					"description": "",
					"imgPath": "../img/nd_img_FindPawn_K2.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Pawn Object Reference",
							"description": "Find Pawn K2"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Find Little Trekker Character",
					"fullTitle": "Find Little Trekker Character",
					"description": "",
					"imgPath": "../img/nd_img_FindLittleTrekkerCharacter.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Little Trekker Character Object Reference",
							"description": "Find Little Trekker Character"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Find Floor",
					"fullTitle": "Find Floor",
					"description": "",
					"imgPath": "../img/nd_img_FindFloor_K2.png",
					"inputs": [
						{
							"name": "Start",
							"type": "Vector (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Debug Options",
							"type": "Draw Debug Options Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Trace Options",
							"type": "Trace Options Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out Floor Hit",
							"type": "Hit Result Structure",
							"description": "$no_comments"
						},
						{
							"name": "Out Location",
							"type": "Vector",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Find Floor K2"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Find Controller",
					"fullTitle": "Find Controller",
					"description": "",
					"imgPath": "../img/nd_img_FindController_K2.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Controller Object Reference",
							"description": "Tries to find a controller for the actor.\nIf the actor is a pawn, it will return the pawn's controller.\nIf the actor is a controller, it will return the controller."
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Find Attach Parent",
					"fullTitle": "Find Attach Parent",
					"description": "",
					"imgPath": "../img/nd_img_FindAttachParent_K2.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Scene Component",
							"type": "Scene Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Component Class",
							"type": "Scene Component Class Reference",
							"description": "$no_comments"
						},
						{
							"name": "Check Self",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Is Valid",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Is Not Valid",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Actor Component Object Reference",
							"description": "walks up the hierarchy of the given component and returns the first parent of the given type\nif bCheckSelf is true, the function will also check the given component itself\ne.g. FindAttachParent<UPrimitiveComponent>(MyComponent, false) will return the first parent of MyComponent that is a UPrimitiveComponent\ne.g. FindAttachParent<UPrimitiveComponent>(MyComponent, true) may return MyComponent if it is a UPrimitiveComponent\n_K2 version for blueprint use"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULittleTrekkerUtils",
					"className": "Little Trekker Utils",
					"shortTitle": "Dump Stack",
					"fullTitle": "Dump Stack",
					"description": "",
					"imgPath": "../img/nd_img_DumpStack.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Entries to Ignore",
							"type": "Integer",
							"description": "$no_comments"
						},
						{
							"name": "Max Depth",
							"type": "Integer",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "ULittleTrekkerViewportClient",
			"classHierarchy": [
				"UObject",
				"UScriptViewportClient",
				"UGameViewportClient",
				"UCommonGameViewportClient"
			],
			"path": "Classes/Default/ULittleTrekkerViewportClient",
			"properties": [],
			"functions": []
		},
		{
			"className": "ULockOnTargetComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/ULockOnTargetComponent",
			"properties": [
				{
					"name": "Target",
					"type": "FCombatTarget",
					"flags": [
						"Category = LockOnTargetComponent",
						"ModuleRelativePath = Combat/LockOnTargetMovement.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "RotationSpeed",
					"type": "float",
					"flags": [
						"Category = LockOnTargetComponent",
						"ModuleRelativePath = Combat/LockOnTargetMovement.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bDisableUseControllerRotationYaw",
					"type": "bool",
					"flags": [
						"Category = LockOnTargetComponent",
						"ModuleRelativePath = Combat/LockOnTargetMovement.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bIsLockedOn",
					"type": "bool",
					"flags": [
						"Category = LockOnTargetComponent",
						"ModuleRelativePath = Combat/LockOnTargetMovement.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "LockOnStart",
					"description": "Lock on Start",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InTarget",
							"type": "const FCombatTarget&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "LockOnTarget",
					"description": "Lock on Target",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "MoveForward",
					"description": "Move Forward",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Value",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "MoveRight",
					"description": "Move Right",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Value",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnLockOnTargetChanged__DelegateSignature",
					"description": "On Lock on Target Changed  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bIsLockedOn",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "ShouldBeLockedOn",
					"description": "Should be Locked On",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "Stop",
					"description": "Stop",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "UpdateIsActive",
					"description": "Update Is Active",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "bNewIsActive",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "ULockOnTargetComponent",
					"className": "Lock on Target Component",
					"shortTitle": "Update Is Active",
					"fullTitle": "Update Is Active",
					"description": "",
					"imgPath": "../img/nd_img_UpdateIsActive.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Lock On Target Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Is Active",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Update Is Active"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULockOnTargetComponent",
					"className": "Lock on Target Component",
					"shortTitle": "Stop",
					"fullTitle": "Stop",
					"description": "",
					"imgPath": "../img/nd_img_Stop.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Lock On Target Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULockOnTargetComponent",
					"className": "Lock on Target Component",
					"shortTitle": "Should be Locked On",
					"fullTitle": "Should be Locked On",
					"description": "",
					"imgPath": "../img/nd_img_ShouldBeLockedOn.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Lock On Target Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Should be Locked On"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULockOnTargetComponent",
					"className": "Lock on Target Component",
					"shortTitle": "Move Right",
					"fullTitle": "Move Right",
					"description": "",
					"imgPath": "../img/nd_img_MoveRight.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Lock On Target Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULockOnTargetComponent",
					"className": "Lock on Target Component",
					"shortTitle": "Move Forward",
					"fullTitle": "Move Forward",
					"description": "",
					"imgPath": "../img/nd_img_MoveForward.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Lock On Target Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULockOnTargetComponent",
					"className": "Lock on Target Component",
					"shortTitle": "Lock on Target",
					"fullTitle": "Lock on Target",
					"description": "",
					"imgPath": "../img/nd_img_LockOnTarget.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Lock On Target Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ULockOnTargetComponent",
					"className": "Lock on Target Component",
					"shortTitle": "Lock on Start",
					"fullTitle": "Lock on Start",
					"description": "",
					"imgPath": "../img/nd_img_LockOnStart.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Lock On Target Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In Target",
							"type": "Combat Target Structure (by ref)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "ULootSpawnEffect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect",
				"UInteractionEffect"
			],
			"path": "Classes/Default/ULootSpawnEffect",
			"properties": [
				{
					"name": "LootTable",
					"type": "TObjectPtr<ULootTableData>",
					"flags": [
						"Category = LootSpawnEffect",
						"ModuleRelativePath = Interaction/Effects/LootSpawnEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Quantity",
					"type": "int32",
					"flags": [
						"Category = LootSpawnEffect",
						"ClampMin = 0",
						"ModuleRelativePath = Interaction/Effects/LootSpawnEffect.h",
						"UIMin = 0",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "ULootTableData",
			"classHierarchy": [
				"UObject",
				"UDataAsset"
			],
			"path": "Classes/Default/ULootTableData",
			"properties": [
				{
					"name": "ProbabilityToSpawnAnyLoot",
					"type": "float",
					"flags": [
						"Category = LootTableData",
						"ClampMax = 1",
						"ClampMin = 0",
						"Comment = /*\n\t * This is the probability that loot will be spawned at all.\n\t */",
						"Delta = 0.010000",
						"ModuleRelativePath = Inventory/LootTableData.h",
						"ToolTip = * This is the probability that loot will be spawned at all.",
						"UIMax = 1",
						"UIMin = 0",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "* This is the probability that loot will be spawned at all."
				},
				{
					"name": "TableOfLoot",
					"type": "TMap",
					"flags": [
						"Category = LootTableData",
						"ClampMax = 1",
						"ClampMin = 0",
						"Comment = /*\n\t * This is the map of items that can be spawned in the loot table with their respective spawn probabilities.\n\t */",
						"Delta = 0.010000",
						"ModuleRelativePath = Inventory/LootTableData.h",
						"ToolTip = * This is the map of items that can be spawned in the loot table with their respective spawn probabilities.",
						"UIMax = 1",
						"UIMin = 0",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "* This is the map of items that can be spawned in the loot table with their respective spawn probabilities."
				},
				{
					"name": "bRandomizeSeed",
					"type": "bool",
					"flags": [
						"Category = LootTableData",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Inventory/LootTableData.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Seed",
					"type": "FRandomStream",
					"flags": [
						"Category = LootTableData",
						"Comment = /*\n\t * This is the seed used to generate a random number list which controls the order of items in the loot table.\n\t */",
						"EditCondition = !bRandomizeSeed",
						"ModuleRelativePath = Inventory/LootTableData.h",
						"ToolTip = * This is the seed used to generate a random number list which controls the order of items in the loot table.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "* This is the seed used to generate a random number list which controls the order of items in the loot table."
				}
			],
			"functions": [
				{
					"name": "ChooseRandomItem",
					"description": "Choose Random Item",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UItemData*",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "ULootTableData",
					"className": "Loot Table Data",
					"shortTitle": "Choose Random Item",
					"fullTitle": "Choose Random Item",
					"description": "",
					"imgPath": "../img/nd_img_ChooseRandomItem.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Loot Table Data Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Item Data Object Reference",
							"description": "Choose Random Item"
						}
					]
				}
			]
		},
		{
			"className": "UMissionCompleteComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UMissionCompleteComponent",
			"properties": [
				{
					"name": "WasCompleted",
					"type": "bool",
					"flags": [
						"Category = MissionCompleteComponent",
						"ModuleRelativePath = Mission/MissionCompleteComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				},
				{
					"name": "bHideWhenIncomplete",
					"type": "bool",
					"flags": [
						"Category = MissionCompleteComponent",
						"ModuleRelativePath = Mission/MissionCompleteComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "MissionId",
					"type": "FGameplayTag",
					"flags": [
						"Category = MissionCompleteComponent",
						"ModuleRelativePath = Mission/MissionCompleteComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bInspireWhenComplete",
					"type": "bool",
					"flags": [
						"Category = MissionCompleteComponent",
						"ModuleRelativePath = Mission/MissionCompleteComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OnCompleteMissionDelegate",
					"type": "FMissionEvent",
					"flags": [
						"ModuleRelativePath = Mission/MissionCompleteComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "MissionCompletedHandler",
					"description": "Mission Completed Handler",
					"flags": [
						"Final",
						"Native",
						"Protected",
						"HasOutParams"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Mission",
							"type": "const FMission&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				},
				{
					"name": "MissionEvent__DelegateSignature",
					"description": "Mission Event  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnCompleteMission",
					"description": "On Complete Mission",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnIncompleteMission",
					"description": "On Incomplete Mission",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UMissionCompleteComponent",
					"className": "Mission Complete Component",
					"shortTitle": "Event On Incomplete Mission",
					"fullTitle": "Event On Incomplete Mission",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnIncompleteMission.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UMissionCompleteComponent",
					"className": "Mission Complete Component",
					"shortTitle": "Event On Complete Mission",
					"fullTitle": "Event On Complete Mission",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnCompleteMission.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UMissionComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UMissionComponent",
			"properties": [
				{
					"name": "Mission",
					"type": "FMission",
					"flags": [
						"Category = MissionComponent",
						"ModuleRelativePath = Mission/MissionComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit",
						"SaveGame"
					],
					"description": ""
				},
				{
					"name": "bCompleteWhenInspired",
					"type": "bool",
					"flags": [
						"Category = MissionComponent",
						"ModuleRelativePath = Mission/MissionComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "OnInspired",
					"description": "On Inspired",
					"flags": [
						"Final",
						"Native",
						"Public",
						"Const"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InspiredActor",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			]
		},
		{
			"className": "UMoodComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UMoodComponent",
			"properties": [
				{
					"name": "CurrentMood",
					"type": "FGameplayTag",
					"flags": [
						"Category = MoodComponent",
						"ModuleRelativePath = Inspiration/Mood.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "MoodChanged_K2",
					"type": "FOnMoodChanged_K2",
					"flags": [
						"DisplayName = OnMoodChanged",
						"ModuleRelativePath = Inspiration/Mood.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "GetMood",
					"description": "Get Mood",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FGameplayTag",
					"parameters": []
				},
				{
					"name": "OnMoodChanged",
					"description": "On Mood Changed",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnMoodChanged_K2__DelegateSignature",
					"description": "On Mood Changed K2  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "SetMood",
					"description": "Set Mood",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewMood",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Categories = Mood",
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UMoodComponent",
					"className": "Mood Component",
					"shortTitle": "Set Mood",
					"fullTitle": "Set Mood",
					"description": "",
					"imgPath": "../img/nd_img_SetMood.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Mood Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Mood",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UMoodComponent",
					"className": "Mood Component",
					"shortTitle": "Event On Mood Changed",
					"fullTitle": "Event On Mood Changed",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnMoodChanged.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UMoodComponent",
					"className": "Mood Component",
					"shortTitle": "Get Mood",
					"fullTitle": "Get Mood",
					"description": "",
					"imgPath": "../img/nd_img_GetMood.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Mood Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Gameplay Tag Structure",
							"description": "Get Mood"
						}
					]
				}
			]
		},
		{
			"className": "UNetable",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UNetable",
			"properties": [
				{
					"name": "RequiredTags",
					"type": "FGameplayTagContainer",
					"flags": [
						"Category = Netable",
						"ModuleRelativePath = Components/Netable.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "UPlantable",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UPlantable",
			"properties": [
				{
					"name": "RequiredTags",
					"type": "FGameplayTagContainer",
					"flags": [
						"Category = Plantable",
						"ModuleRelativePath = Components/Plantable.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "UPlayerProximityModel",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase"
			],
			"path": "Classes/Default/UPlayerProximityModel",
			"properties": [
				{
					"name": "TargetActor",
					"type": "TObjectPtr<AActor>",
					"flags": [
						"Category = PlayerProximityModel",
						"ModuleRelativePath = Utils/PlayerProximityUtil.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Range",
					"type": "float",
					"flags": [
						"BlueprintSetter = SetRange",
						"Category = PlayerProximityModel",
						"ClampMin = 0.000000",
						"ModuleRelativePath = Utils/PlayerProximityUtil.h",
						"UIMin = 0.000000",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "IsPlayerInRange",
					"type": "bool",
					"flags": [
						"BlueprintSetter = SetIsPlayerInRange",
						"Category = PlayerProximityModel",
						"ModuleRelativePath = Utils/PlayerProximityUtil.h",
						"Public",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				},
				{
					"name": "K2_OnIsPlayerInRangeChanged",
					"type": "FProximityStateChangedEvent_K2",
					"flags": [
						"DisplayName = OnIsPlayerInRangeChanged",
						"ModuleRelativePath = Utils/PlayerProximityUtil.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "GetIsPlayerInRange",
					"description": "Get Is Player in Range",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "GetTargetPlayerController",
					"description": "Get Target Player Controller",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "APlayerController*",
					"parameters": []
				},
				{
					"name": "ProximityStateChangedEvent_K2__DelegateSignature",
					"description": "Proximity State Changed Event K2  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "State",
							"type": "UPlayerProximityModel*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetIsPlayerInRange",
					"description": "Set Is Player in Range",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewValue",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetRange",
					"description": "Set Range",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewValue",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetTargetActor",
					"description": "Set Target Actor",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewValue",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UPlayerProximityModel",
					"className": "Player Proximity Model",
					"shortTitle": "Set Target Actor",
					"fullTitle": "Set Target Actor",
					"description": "",
					"imgPath": "../img/nd_img_SetTargetActor.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Player Proximity Model Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Value",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UPlayerProximityModel",
					"className": "Player Proximity Model",
					"shortTitle": "Set Range",
					"fullTitle": "Set Range",
					"description": "",
					"imgPath": "../img/nd_img_SetRange.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Player Proximity Model Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UPlayerProximityModel",
					"className": "Player Proximity Model",
					"shortTitle": "Set Is Player in Range",
					"fullTitle": "Set Is Player in Range",
					"description": "",
					"imgPath": "../img/nd_img_SetIsPlayerInRange.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Player Proximity Model Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UPlayerProximityModel",
					"className": "Player Proximity Model",
					"shortTitle": "Get Target Player Controller",
					"fullTitle": "Get Target Player Controller",
					"description": "",
					"imgPath": "../img/nd_img_GetTargetPlayerController.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Player Proximity Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Player Controller Object Reference",
							"description": "Get Target Player Controller"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UPlayerProximityModel",
					"className": "Player Proximity Model",
					"shortTitle": "Get Is Player in Range",
					"fullTitle": "Get Is Player in Range",
					"description": "",
					"imgPath": "../img/nd_img_GetIsPlayerInRange.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Player Proximity Model Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Get Is Player in Range"
						}
					]
				}
			]
		},
		{
			"className": "UPortal",
			"classHierarchy": [
				"UObject"
			],
			"path": "Classes/Default/UPortal",
			"properties": [
				{
					"name": "bIsLevelTeleport",
					"type": "bool",
					"flags": [
						"Category = Portal",
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Destination",
					"type": "TObjectPtr<APlayerStart>",
					"flags": [
						"Category = Portal",
						"EditCondition = !bIsLevelTeleport",
						"EditConditionHides",
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"NativeConstTemplateArg",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "LevelReference",
					"type": "TSoftObjectPtr<UWorld>",
					"flags": [
						"Category = Portal",
						"EditCondition = bIsLevelTeleport && !bGoToPreviousLevel",
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bGoToPreviousLevel",
					"type": "bool",
					"flags": [
						"Category = Portal",
						"EditCondition = bIsLevelTeleport",
						"EditConditionHides",
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "DestinationPortalSpawnPoint",
					"type": "FString",
					"flags": [
						"Category = Portal",
						"Comment = // PlayerStartTag or SoftObjectPtr string\n",
						"EditCondition = bIsLevelTeleport",
						"EditConditionHides",
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"ToolTip = PlayerStartTag or SoftObjectPtr string",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "PlayerStartTag or SoftObjectPtr string"
				},
				{
					"name": "OwnPortalSpawnPoint",
					"type": "TSoftObjectPtr<APlayerStart>",
					"flags": [
						"Category = Portal",
						"Comment = // Portal exit to use if the player is returning to the previous level from this portal.\n",
						"EditCondition = bIsLevelTeleport",
						"EditConditionHides",
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"ToolTip = Portal exit to use if the player is returning to the previous level from this portal.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Portal exit to use if the player is returning to the previous level from this portal."
				},
				{
					"name": "bSeamless",
					"type": "bool",
					"flags": [
						"Category = Portal",
						"EditCondition = bIsLevelTeleport",
						"EditConditionHides",
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bDisableCameraLag",
					"type": "bool",
					"flags": [
						"Category = Portal",
						"Comment = // If true, the camera will be moved to the target location immediately (good for distant locations).\n// If false, the camera will transition to the target location with lag (good for nearby locations, helps player understand relative location).\n",
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"ToolTip = If true, the camera will be moved to the target location immediately (good for distant locations).\nIf false, the camera will transition to the target location with lag (good for nearby locations, helps player understand relative location).",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "If true, the camera will be moved to the target location immediately (good for distant locations).\nIf false, the camera will transition to the target location with lag (good for nearby locations, helps player understand relative location)."
				},
				{
					"name": "bUseCustomFadeOptions",
					"type": "bool",
					"flags": [
						"Category = Portal",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "FadeOptions",
					"type": "FCameraFadeOptions",
					"flags": [
						"Category = Portal",
						"EditCondition = bUseCustomFadeOptions",
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "IsConfigValid",
					"description": "Is Config Valid",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "bDebugEnabled",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UPortal",
					"className": "Portal",
					"shortTitle": "Is Config Valid",
					"fullTitle": "Is Config Valid",
					"description": "",
					"imgPath": "../img/nd_img_IsConfigValid.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Portal Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Debug Enabled",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Config Valid"
						}
					]
				}
			]
		},
		{
			"className": "UPortalConfig",
			"classHierarchy": [
				"UObject"
			],
			"path": "Classes/Default/UPortalConfig",
			"properties": [
				{
					"name": "Portal",
					"type": "TObjectPtr<UPortal>",
					"flags": [
						"Category = PortalConfig",
						"EditInline = true",
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"ShowInnerProperties",
						"ShowOnlyInnerProperties",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "UPlayerTeleportSubsystem",
			"classHierarchy": [
				"UObject",
				"USubsystem",
				"UWorldSubsystem",
				"UTickableWorldSubsystem",
				"UWorldModeSubsystem"
			],
			"path": "Classes/Default/UPlayerTeleportSubsystem",
			"properties": [
				{
					"name": "bUseCameraFadeEffect",
					"type": "bool",
					"flags": [
						"Category = PlayerTeleportSubsystem",
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OnTeleportStateChangedDelegate_K2",
					"type": "FTeleportPlayerStateChanged_K2",
					"flags": [
						"DisplayName = OnTeleportStateChanged",
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "bWaitForStreaming",
					"type": "bool",
					"flags": [
						"Category = PlayerTeleportSubsystem",
						"Comment = // If true: before fadeout starts, wait for streaming to complete after teleporting the player.\n",
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"ToolTip = If true: before fadeout starts, wait for streaming to complete after teleporting the player.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "If true: before fadeout starts, wait for streaming to complete after teleporting the player."
				},
				{
					"name": "WorldPartitionSubsystem",
					"type": "TObjectPtr<UWorldPartitionSubsystem>",
					"flags": [
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"Protected"
					],
					"description": ""
				},
				{
					"name": "CameraFadeSubsystem",
					"type": "TObjectPtr<UPlayerCameraFadeSubsystem>",
					"flags": [
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"Protected"
					],
					"description": ""
				},
				{
					"name": "TeleportState",
					"type": "ETeleportPlayerState",
					"flags": [
						"Category = PlayerTeleportSubsystem",
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"Protected",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "DisableCameraLag",
					"description": "Disable Camera Lag",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "GetTeleportState",
					"description": "Get Teleport State",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "ETeleportPlayerState",
					"parameters": []
				},
				{
					"name": "IsReady",
					"description": "Is Ready",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "IsTeleporting",
					"description": "Is Teleporting",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Controller",
							"type": "AController*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetTeleportState",
					"description": "Set Teleport State",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InNewTeleportState",
							"type": "const ETeleportPlayerState",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "StartTeleportPlayer",
					"description": "Start Teleport Player",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "PlayerController",
							"type": "APlayerController*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Portal",
							"type": "const UPortal*",
							"description": "",
							"flags": [
								"EditInline = true",
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "TriggerTeleport",
					"description": "Trigger Teleport",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "TriggerTeleportComplete",
					"description": "Trigger Teleport Complete",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bIsSuccess",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UPlayerTeleportSubsystem",
					"className": "Player Teleport Subsystem",
					"shortTitle": "Trigger Teleport Complete",
					"fullTitle": "Trigger Teleport Complete",
					"description": "",
					"imgPath": "../img/nd_img_TriggerTeleportComplete.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Player Teleport Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Is Success",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UPlayerTeleportSubsystem",
					"className": "Player Teleport Subsystem",
					"shortTitle": "Trigger Teleport",
					"fullTitle": "Trigger Teleport",
					"description": "",
					"imgPath": "../img/nd_img_TriggerTeleport.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Player Teleport Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UPlayerTeleportSubsystem",
					"className": "Player Teleport Subsystem",
					"shortTitle": "Start Teleport Player",
					"fullTitle": "Start Teleport Player",
					"description": "",
					"imgPath": "../img/nd_img_StartTeleportPlayer.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Player Teleport Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Player Controller",
							"type": "Player Controller Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Portal",
							"type": "Portal Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Start Teleport Player"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UPlayerTeleportSubsystem",
					"className": "Player Teleport Subsystem",
					"shortTitle": "Set Teleport State",
					"fullTitle": "Set Teleport State",
					"description": "",
					"imgPath": "../img/nd_img_SetTeleportState.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Player Teleport Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In New Teleport State",
							"type": "ETeleportPlayerState Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UPlayerTeleportSubsystem",
					"className": "Player Teleport Subsystem",
					"shortTitle": "Is Teleporting",
					"fullTitle": "Is Teleporting",
					"description": "",
					"imgPath": "../img/nd_img_IsTeleporting.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Player Teleport Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Controller",
							"type": "Controller Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Teleporting"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UPlayerTeleportSubsystem",
					"className": "Player Teleport Subsystem",
					"shortTitle": "Is Ready",
					"fullTitle": "Is Ready",
					"description": "",
					"imgPath": "../img/nd_img_IsReady.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Player Teleport Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Ready"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UPlayerTeleportSubsystem",
					"className": "Player Teleport Subsystem",
					"shortTitle": "Get Teleport State",
					"fullTitle": "Get Teleport State",
					"description": "",
					"imgPath": "../img/nd_img_GetTeleportState.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Player Teleport Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "ETeleportPlayerState Enum",
							"description": "Get Teleport State"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UPlayerTeleportSubsystem",
					"className": "Player Teleport Subsystem",
					"shortTitle": "Disable Camera Lag",
					"fullTitle": "Disable Camera Lag",
					"description": "",
					"imgPath": "../img/nd_img_DisableCameraLag.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Player Teleport Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Disable Camera Lag"
						}
					]
				}
			]
		},
		{
			"className": "UPlayerTeleportEffect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect",
				"UInteractionEffect"
			],
			"path": "Classes/Default/UPlayerTeleportEffect",
			"properties": [
				{
					"name": "Portal",
					"type": "TObjectPtr<UPortal>",
					"flags": [
						"Category = PlayerTeleportEffect",
						"EditInline = true",
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"ShowInnerProperties",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "TeleportEffectState",
					"type": "ETeleportPlayerState",
					"flags": [
						"Category = PlayerTeleportEffect",
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "OnTeleportStateChangedDelegate_K2",
					"type": "FTeleportPlayerStateChanged_K2",
					"flags": [
						"DisplayName = OnTeleportStateChanged",
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "OnSubsystemTeleportStateChanged",
					"description": "On Subsystem Teleport State Changed",
					"flags": [
						"Final",
						"Native",
						"Protected"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "TeleportPlayerState",
							"type": "ETeleportPlayerState",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetTeleportState",
					"description": "Set Teleport State",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "InNewTeleportState",
							"type": "const ETeleportPlayerState",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UPlayerTeleportEffect",
					"className": "Player Teleport Effect",
					"shortTitle": "Set Teleport State",
					"fullTitle": "Set Teleport State",
					"description": "",
					"imgPath": "../img/nd_img_SetTeleportState.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Player Teleport Effect Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "In New Teleport State",
							"type": "ETeleportPlayerState Enum",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UPlayerTeleportComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UPlayerTeleportComponent",
			"properties": [
				{
					"name": "bDebugEnabled",
					"type": "bool",
					"flags": [
						"Category = PlayerTeleportComponent",
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OnTeleportStateChangedDelegate",
					"type": "FOnTeleportStateChanged",
					"flags": [
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "WorldPartitionSubsystem",
					"type": "TObjectPtr<UWorldPartitionSubsystem>",
					"flags": [
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"Protected"
					],
					"description": ""
				},
				{
					"name": "PlayerTeleportSubsystem",
					"type": "TObjectPtr<UPlayerTeleportSubsystem>",
					"flags": [
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"Protected"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "OnTeleportStateChanged__DelegateSignature",
					"description": "On Teleport State Changed  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "TeleportPlayerState",
							"type": "ETeleportPlayerState",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			]
		},
		{
			"className": "UTeleportEffectComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent",
				"UEffectComponent"
			],
			"path": "Classes/Default/UTeleportEffectComponent",
			"properties": [],
			"functions": []
		},
		{
			"className": "APortalSpawnPoint",
			"classHierarchy": [
				"UObject",
				"AActor",
				"ANavigationObjectBase",
				"APlayerStart"
			],
			"path": "Classes/Default/APortalSpawnPoint",
			"properties": [
				{
					"name": "bNeverDefault",
					"type": "bool",
					"flags": [
						"Category = PortalSpawnPoint",
						"Comment = // UPROPERTY(EditInstanceOnly, BlueprintReadOnly)\n// FGameplayTag PortalName;\n",
						"ModuleRelativePath = Player/PlayerTeleport.h",
						"ToolTip = UPROPERTY(EditInstanceOnly, BlueprintReadOnly)\nFGameplayTag PortalName;",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit"
					],
					"description": "UPROPERTY(EditInstanceOnly, BlueprintReadOnly)\nFGameplayTag PortalName;"
				}
			],
			"functions": [
				{
					"name": "SetOnlyDefault",
					"description": "Calling this function will set this portal as the default exit portal\nand will set bNeverDefault to true for all other portals.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "APortalSpawnPoint",
					"className": "Portal Spawn Point",
					"shortTitle": "Set Only Default",
					"fullTitle": "Set Only Default",
					"description": "",
					"imgPath": "../img/nd_img_SetOnlyDefault.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Portal Spawn Point Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UPlayMontageInteractionEffect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect",
				"UInteractionEffect"
			],
			"path": "Classes/Default/UPlayMontageInteractionEffect",
			"properties": [
				{
					"name": "MontageToPlay",
					"type": "TObjectPtr<UAnimMontage>",
					"flags": [
						"Category = Effect|FX|Montage",
						"Comment = // Animation Montage To play \n",
						"ModuleRelativePath = Interaction/Effects/PlayMontageInteractionEffect.h",
						"ToolTip = Animation Montage To play",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Animation Montage To play"
				},
				{
					"name": "PlayRate",
					"type": "float",
					"flags": [
						"Category = Effect|FX|Montage",
						"Comment = // Play rate of the animation montage\n",
						"ModuleRelativePath = Interaction/Effects/PlayMontageInteractionEffect.h",
						"ToolTip = Play rate of the animation montage",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Play rate of the animation montage"
				},
				{
					"name": "stopMovementToPlayMontage",
					"type": "bool",
					"flags": [
						"Category = Effect|FX|Montage",
						"Comment = // Bool Var to check weather it's supposed to stop Movement to play the montage\n",
						"ModuleRelativePath = Interaction/Effects/PlayMontageInteractionEffect.h",
						"ToolTip = Bool Var to check weather it's supposed to stop Movement to play the montage",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Bool Var to check weather it's supposed to stop Movement to play the montage"
				},
				{
					"name": "NotifyEffectsMap",
					"type": "TMap",
					"flags": [
						"Category = Effect|FX|Montage",
						"Comment = // Map of Name:\"The Name of the montage notify\" Effect:\"The Effect that plays when This notify Happens\"\n",
						"EditInline = true",
						"ModuleRelativePath = Interaction/Effects/PlayMontageInteractionEffect.h",
						"ToolTip = Map of Name:\"The Name of the montage notify\" Effect:\"The Effect that plays when This notify Happens\"",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Map of Name:\"The Name of the montage notify\" Effect:\"The Effect that plays when This notify Happens\""
				}
			],
			"functions": [
				{
					"name": "OnAnimationEnded",
					"description": "Function gets Called when Montage Ends",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Montage",
							"type": "UAnimMontage*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "interrupted",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnNotifyBeginCustom",
					"description": "Function gets Called when Notify Begin Event Gets Called",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NotifyName",
							"type": "FName",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "BranchingPointNotifyPayload",
							"type": "const FBranchingPointNotifyPayload&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UPlayMontageInteractionEffect",
					"className": "Play Montage Interaction Effect",
					"shortTitle": "Event On Animation Ended",
					"fullTitle": "Event On Animation Ended",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnAnimationEnded.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Montage",
							"type": "Anim Montage Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Interrupted",
							"type": "Boolean",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UProgressComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UProgressComponent",
			"properties": [
				{
					"name": "Progress",
					"type": "float",
					"flags": [
						"Category = Progress",
						"ModuleRelativePath = Utils/ProgressComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Duration",
					"type": "float",
					"flags": [
						"Category = Progress",
						"ModuleRelativePath = Utils/ProgressComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bResetOnProgressComplete",
					"type": "bool",
					"flags": [
						"Category = Progress",
						"ModuleRelativePath = Utils/ProgressComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OnProgress",
					"type": "FProgressEvent",
					"flags": [
						"Category = Progress",
						"ModuleRelativePath = Utils/ProgressComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnProgressComplete",
					"type": "FProgressStateEvent",
					"flags": [
						"Category = Progress",
						"ModuleRelativePath = Utils/ProgressComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnStart",
					"type": "FProgressStateEvent",
					"flags": [
						"Category = Progress",
						"ModuleRelativePath = Utils/ProgressComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "bLooping",
					"type": "bool",
					"flags": [
						"Category = Progress",
						"ModuleRelativePath = Utils/ProgressComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bIsComplete",
					"type": "bool",
					"flags": [
						"Category = Progress",
						"ModuleRelativePath = Utils/ProgressComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				},
				{
					"name": "bPaused",
					"type": "bool",
					"flags": [
						"Category = Progress",
						"ModuleRelativePath = Utils/ProgressComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "GetElapsed",
					"description": "Get Elapsed",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "float",
					"parameters": []
				},
				{
					"name": "IsComplete",
					"description": "Is Complete",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "Play",
					"description": "Play",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "PlayFromStart",
					"description": "Play from Start",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "ProgressEvent__DelegateSignature",
					"description": "Progress Event  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Progress",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "ProgressStateEvent__DelegateSignature",
					"description": "Progress State Event  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "Reset",
					"description": "Reset",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "SetProgress",
					"description": "Set Progress",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewProgress",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "Stop",
					"description": "Stop",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "Unpause",
					"description": "Unpause",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "UpdateProgress",
					"description": "Update Progress",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UProgressComponent",
					"className": "Progress Component",
					"shortTitle": "Update Progress",
					"fullTitle": "Update Progress",
					"description": "Progress",
					"imgPath": "../img/nd_img_UpdateProgress.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Progress Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UProgressComponent",
					"className": "Progress Component",
					"shortTitle": "Unpause",
					"fullTitle": "Unpause",
					"description": "Progress",
					"imgPath": "../img/nd_img_Unpause.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Progress Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UProgressComponent",
					"className": "Progress Component",
					"shortTitle": "Stop",
					"fullTitle": "Stop",
					"description": "Progress",
					"imgPath": "../img/nd_img_Stop.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Progress Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UProgressComponent",
					"className": "Progress Component",
					"shortTitle": "Set Progress",
					"fullTitle": "Set Progress",
					"description": "Progress",
					"imgPath": "../img/nd_img_SetProgress.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Progress Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Progress",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UProgressComponent",
					"className": "Progress Component",
					"shortTitle": "Reset",
					"fullTitle": "Reset",
					"description": "Progress",
					"imgPath": "../img/nd_img_Reset.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Progress Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UProgressComponent",
					"className": "Progress Component",
					"shortTitle": "Play from Start",
					"fullTitle": "Play from Start",
					"description": "Progress",
					"imgPath": "../img/nd_img_PlayFromStart.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Progress Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UProgressComponent",
					"className": "Progress Component",
					"shortTitle": "Play",
					"fullTitle": "Play",
					"description": "Progress",
					"imgPath": "../img/nd_img_Play.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Progress Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UProgressComponent",
					"className": "Progress Component",
					"shortTitle": "Is Complete",
					"fullTitle": "Is Complete",
					"description": "Progress",
					"imgPath": "../img/nd_img_IsComplete.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Progress Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Complete"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UProgressComponent",
					"className": "Progress Component",
					"shortTitle": "Get Elapsed",
					"fullTitle": "Get Elapsed",
					"description": "Progress",
					"imgPath": "../img/nd_img_GetElapsed.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Progress Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Get Elapsed"
						}
					]
				}
			]
		},
		{
			"className": "UAutoProgressComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UAutoProgressComponent",
			"properties": [
				{
					"name": "ProgressFrom",
					"type": "TArray",
					"flags": [
						"Category = Progress",
						"ModuleRelativePath = Utils/ProgressComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "OnOtherProgress",
					"description": "On Other Progress",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Progress",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "Update",
					"description": "Update",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UAutoProgressComponent",
					"className": "Auto Progress Component",
					"shortTitle": "Update",
					"fullTitle": "Update",
					"description": "Progress",
					"imgPath": "../img/nd_img_Update.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Auto Progress Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "ASampleFloorBase",
			"classHierarchy": [
				"UObject",
				"AActor"
			],
			"path": "Classes/Default/ASampleFloorBase",
			"properties": [
				{
					"name": "SceneRoot",
					"type": "TObjectPtr<USceneComponent>",
					"flags": [
						"Category = SampleFloorBase",
						"Comment = // exists so floor can be scaled independently of text\n",
						"EditInline = true",
						"ModuleRelativePath = Utils/SampleFloorBase.h",
						"ToolTip = exists so floor can be scaled independently of text",
						"Public",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": "exists so floor can be scaled independently of text"
				},
				{
					"name": "FloorMesh",
					"type": "TObjectPtr<UStaticMeshComponent>",
					"flags": [
						"Category = SampleFloorBase",
						"EditInline = true",
						"ModuleRelativePath = Utils/SampleFloorBase.h",
						"Public",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				},
				{
					"name": "SampleHeading",
					"type": "TObjectPtr<UTextRenderComponent>",
					"flags": [
						"Category = SampleFloorBase",
						"EditInline = true",
						"ModuleRelativePath = Utils/SampleFloorBase.h",
						"Public",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				},
				{
					"name": "HeadingText",
					"type": "FText",
					"flags": [
						"Category = SampleFloorBase",
						"Comment = /** e.g. name of sample */",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Utils/SampleFloorBase.h",
						"ToolTip = e.g. name of sample",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": "e.g. name of sample"
				},
				{
					"name": "HeadingTextSize",
					"type": "float",
					"flags": [
						"Category = SampleFloorBase",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Utils/SampleFloorBase.h",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bAutoPositionHeading",
					"type": "bool",
					"flags": [
						"Category = SampleFloorBase",
						"Comment = // disable to manually position heading\n",
						"ModuleRelativePath = Utils/SampleFloorBase.h",
						"ToolTip = disable to manually position heading",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "disable to manually position heading"
				},
				{
					"name": "HeadingPadding",
					"type": "FVector",
					"flags": [
						"Category = SampleFloorBase",
						"EditCondition = bAutoPositionHeading",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Utils/SampleFloorBase.h",
						"MultiLine = true",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OnSampleFloorBaseUpdated",
					"type": "FOnSampleFloorBaseUpdated",
					"flags": [
						"ModuleRelativePath = Utils/SampleFloorBase.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "AutoPositionHeading",
					"description": "position heading if auto position is enabled",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"Const"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "GetCoordinate",
					"description": "Get Coordinate",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FVector",
					"parameters": [
						{
							"name": "Direction",
							"type": "const EHorizontalDirection",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "OnSampleFloorBaseUpdated__DelegateSignature",
					"description": "On Sample Floor Base Updated  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate",
						"HasDefaults"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Min",
							"type": "FVector",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Max",
							"type": "FVector",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "PositionHeading",
					"description": "Position Heading",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"Const"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "Update",
					"description": "Update",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"Const"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "ASampleFloorBase",
					"className": "Sample Floor Base",
					"shortTitle": "Update",
					"fullTitle": "Update",
					"description": "",
					"imgPath": "../img/nd_img_Update.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Sample Floor Base Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ASampleFloorBase",
					"className": "Sample Floor Base",
					"shortTitle": "Position Heading",
					"fullTitle": "Position Heading",
					"description": "",
					"imgPath": "../img/nd_img_PositionHeading.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Sample Floor Base Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ASampleFloorBase",
					"className": "Sample Floor Base",
					"shortTitle": "Get Coordinate",
					"fullTitle": "Get Coordinate",
					"description": "",
					"imgPath": "../img/nd_img_GetCoordinate.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Sample Floor Base Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Direction",
							"type": "unsupported_enum_type: enum size is larger than a byte",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Vector",
							"description": "Get Coordinate"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "ASampleFloorBase",
					"className": "Sample Floor Base",
					"shortTitle": "Auto Position Heading",
					"fullTitle": "Auto Position Heading",
					"description": "",
					"imgPath": "../img/nd_img_AutoPositionHeading.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Sample Floor Base Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "USFXInteractionEffect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect",
				"UInteractionEffect"
			],
			"path": "Classes/Default/USFXInteractionEffect",
			"properties": [
				{
					"name": "SFX",
					"type": "TObjectPtr<UAkAudioEvent>",
					"flags": [
						"Category = Effect|FX",
						"ModuleRelativePath = Interaction/Effects/SFXInteractionEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bEndSoundOnStop",
					"type": "bool",
					"flags": [
						"Category = Effect|FX",
						"ModuleRelativePath = Interaction/Effects/SFXInteractionEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "TransitionDuration",
					"type": "int32",
					"flags": [
						"Category = Effect|FX",
						"ModuleRelativePath = Interaction/Effects/SFXInteractionEffect.h",
						"Public",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "FadeCurve",
					"type": "EAkCurveInterpolation",
					"flags": [
						"Category = Effect|FX",
						"ModuleRelativePath = Interaction/Effects/SFXInteractionEffect.h",
						"Public",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ActionType",
					"type": "AkActionOnEventType",
					"flags": [
						"Category = Effect|FX",
						"ModuleRelativePath = Interaction/Effects/SFXInteractionEffect.h",
						"Public",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "CallbackMask",
					"type": "int32",
					"flags": [
						"Bitmask",
						"BitmaskEnum = /Script/AkAudio.EAkCallbackType",
						"Category = SFXInteractionEffect",
						"ModuleRelativePath = Interaction/Effects/SFXInteractionEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bStopWhenAttachedToDestroyed",
					"type": "bool",
					"flags": [
						"Category = SFXInteractionEffect",
						"ModuleRelativePath = Interaction/Effects/SFXInteractionEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "PostEventCallback",
					"description": "Post Event Callback",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "CallbackType",
							"type": "EAkCallbackType",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "CallbackInfo",
							"type": "UAkCallbackInfo*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			]
		},
		{
			"className": "UWidgetInteractionEffect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect",
				"UInteractionEffect"
			],
			"path": "Classes/Default/UWidgetInteractionEffect",
			"properties": [
				{
					"name": "WidgetInstance",
					"type": "TWeakObjectPtr<UWorldWidget>",
					"flags": [
						"Comment = // The widget instance \n",
						"ModuleRelativePath = Interaction/Effects/WidgetInteractionEffect.h",
						"ToolTip = The widget instance",
						"Public"
					],
					"description": "The widget instance"
				},
				{
					"name": "bUseWidgetClass",
					"type": "bool",
					"flags": [
						"Category = WidgetInteractionEffect",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/Effects/WidgetInteractionEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "WidgetClass",
					"type": "TSubclassOf<UWorldWidget>",
					"flags": [
						"Category = WidgetInteractionEffect",
						"Comment = // The class of the widget to be created\n",
						"DisplayName = 🖼️ Widget Class",
						"EditCondition = bUseWidgetClass",
						"ModuleRelativePath = Interaction/Effects/WidgetInteractionEffect.h",
						"ToolTip = The class of the widget to be created",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "The class of the widget to be created"
				},
				{
					"name": "ViewportZOrder",
					"type": "int32",
					"flags": [
						"Category = WidgetInteractionEffect",
						"Comment = // ZOrder of the widget when added to the viewport.\t\n",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Interaction/Effects/WidgetInteractionEffect.h",
						"ToolTip = ZOrder of the widget when added to the viewport.",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": "ZOrder of the widget when added to the viewport."
				},
				{
					"name": "bUseOverrideOptions",
					"type": "bool",
					"flags": [
						"Category = WidgetInteractionEffect",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/Effects/WidgetInteractionEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Options",
					"type": "FWorldWidgetOptions",
					"flags": [
						"Category = WidgetInteractionEffect",
						"Comment = // The WorldWidget options to use when creating the widget\n// See FWorldWidgetOptions\n",
						"DisplayName = 🖼️ Widget Options",
						"EditCondition = bUseOverrideOptions",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Interaction/Effects/WidgetInteractionEffect.h",
						"ToolTip = The WorldWidget options to use when creating the widget\nSee FWorldWidgetOptions",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": "The WorldWidget options to use when creating the widget\nSee FWorldWidgetOptions"
				},
				{
					"name": "bAttachToInteractingActor",
					"type": "bool",
					"flags": [
						"Category = Effect|Attachment",
						"Comment = // if false, will attach to self\n",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Interaction/Effects/WidgetInteractionEffect.h",
						"ToolTip = if false, will attach to self",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": "if false, will attach to self"
				},
				{
					"name": "bUseOverrideViewModelName",
					"type": "bool",
					"flags": [
						"Category = Effect|WidgetViewModel",
						"Comment = // Whether to override the view model name\n",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/Effects/WidgetInteractionEffect.h",
						"ToolTip = Whether to override the view model name",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Whether to override the view model name"
				},
				{
					"name": "OverrideViewModelName",
					"type": "FName",
					"flags": [
						"Category = Effect|WidgetViewModel",
						"Comment = /**\n\t * The name of the View model in the widget.\n\t If not overridden, it will use the model's classname as the name.\n\t */",
						"EditCondition = bUseOverrideViewModelName",
						"ModuleRelativePath = Interaction/Effects/WidgetInteractionEffect.h",
						"ToolTip = The name of the View model in the widget.\n        If not overridden, it will use the model's classname as the name.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "The name of the View model in the widget.\n        If not overridden, it will use the model's classname as the name."
				},
				{
					"name": "AttachmentSocketName",
					"type": "FName",
					"flags": [
						"Category = WidgetInteractionEffect",
						"ModuleRelativePath = Interaction/Effects/WidgetInteractionEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "FadeIn",
					"description": "Fade In",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "FadeOut",
					"description": "Fade Out",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "FadeTo",
					"description": "Fade To",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Factor",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetSceneComponentNames",
					"description": "Get Scene Component Names",
					"flags": [
						"Final",
						"Native",
						"Protected",
						"Const"
					],
					"returnType": "TArray",
					"parameters": []
				},
				{
					"name": "OnChange",
					"description": "On Change",
					"flags": [
						"Final",
						"Native",
						"Protected"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Visibility",
							"type": "ESlateVisibility",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UWidgetInteractionEffect",
					"className": "Widget Interaction Effect",
					"shortTitle": "Fade To",
					"fullTitle": "Fade To",
					"description": "",
					"imgPath": "../img/nd_img_FadeTo.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Widget Interaction Effect Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Factor",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWidgetInteractionEffect",
					"className": "Widget Interaction Effect",
					"shortTitle": "Fade Out",
					"fullTitle": "Fade Out",
					"description": "",
					"imgPath": "../img/nd_img_FadeOut.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Widget Interaction Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWidgetInteractionEffect",
					"className": "Widget Interaction Effect",
					"shortTitle": "Fade In",
					"fullTitle": "Fade In",
					"description": "",
					"imgPath": "../img/nd_img_FadeIn.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Widget Interaction Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UShowInteractionPromptInteractionEffect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect",
				"UInteractionEffect",
				"UWidgetInteractionEffect"
			],
			"path": "Classes/Default/UShowInteractionPromptInteractionEffect",
			"properties": [],
			"functions": []
		},
		{
			"className": "UStackObject",
			"classHierarchy": [
				"UObject"
			],
			"path": "Classes/Default/UStackObject",
			"properties": [
				{
					"name": "ValueStack",
					"type": "TMap",
					"flags": [
						"Category = Stack System",
						"Comment = /**\n\t * ------------------------------------------------------------- Properties\n\t */",
						"ModuleRelativePath = Stacks/StackObject.h",
						"ToolTip = ------------------------------------------------------------- Properties",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "------------------------------------------------------------- Properties"
				},
				{
					"name": "ValueMitigationStack",
					"type": "TMap",
					"flags": [
						"Category = Stack System",
						"ModuleRelativePath = Stacks/StackObject.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "BaseValue",
					"type": "float",
					"flags": [
						"Category = StackObject",
						"ModuleRelativePath = Stacks/StackObject.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OnFinalValueCalculated",
					"type": "FOnFinalValueCalculated",
					"flags": [
						"ModuleRelativePath = Stacks/StackObject.h",
						"Public",
						"BlueprintAssignable",
						"BlueprintCallable"
					],
					"description": ""
				},
				{
					"name": "bIsRunning",
					"type": "bool",
					"flags": [
						"ModuleRelativePath = Stacks/StackObject.h",
						"Public"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "AddValueMitigationToStack",
					"description": "Add Value Mitigation to Stack",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Key",
							"type": "FName",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Value",
							"type": "FStackEntryDetails",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "AddValueToStack",
					"description": "------------------------------------------------------------- Functions",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Key",
							"type": "FName",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Value",
							"type": "FStackEntryDetails",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "CalculateFinalValueTotal",
					"description": "Calculate Final Value Total",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure",
						"Const"
					],
					"returnType": "float",
					"parameters": []
				},
				{
					"name": "CalculateValueFlatTotal",
					"description": "Calculate Value Flat Total",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure",
						"Const"
					],
					"returnType": "float",
					"parameters": []
				},
				{
					"name": "CalculateValueMitigationFlatTotal",
					"description": "Calculate Value Mitigation Flat Total",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure",
						"Const"
					],
					"returnType": "float",
					"parameters": []
				},
				{
					"name": "CalculateValueMitigationPercentTotal",
					"description": "Calculate Value Mitigation Percent Total",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure",
						"Const"
					],
					"returnType": "float",
					"parameters": []
				},
				{
					"name": "CalculateValuePercentTotal",
					"description": "Calculate Value Percent Total",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure",
						"Const"
					],
					"returnType": "float",
					"parameters": []
				},
				{
					"name": "ClearValueStack",
					"description": "Clear Value Stack",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "IsRunning",
					"description": "Is Running",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "OnFinalValueCalculated__DelegateSignature",
					"description": "------------------------------------------------------------- Delegates",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "ValueFlatTotal",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "ValuePercentTotal",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "ValueMitigationFlatTotal",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "ValueMitigationPercentTotal",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "FinalValueTotal",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnTick",
					"description": "On Tick",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "DeltaTime",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "RemoveValueFromStack",
					"description": "Remove Value from Stack",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Key",
							"type": "FName",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "RemoveValueMitigationFromStack",
					"description": "Remove Value Mitigation from Stack",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Key",
							"type": "FName",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetBaseValue",
					"description": "Set Base Value",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Value",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetTickEnabled",
					"description": "Set Tick Enabled",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bEnabled",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "StackIsEmpty",
					"description": "Stack Is Empty",
					"flags": [
						"Native",
						"Event",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Stack",
							"type": "const TMap&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UStackObject",
					"className": "Stack Object",
					"shortTitle": "Stack Is Empty",
					"fullTitle": "Stack Is Empty",
					"description": "Stack System",
					"imgPath": "../img/nd_img_StackIsEmpty.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Stack Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Stack",
							"type": "Map of Names to Stack Entry Details Structures",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Stack Is Empty"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStackObject",
					"className": "Stack Object",
					"shortTitle": "Set Tick Enabled",
					"fullTitle": "Set Tick Enabled",
					"description": "",
					"imgPath": "../img/nd_img_SetTickEnabled.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Stack Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Enabled",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStackObject",
					"className": "Stack Object",
					"shortTitle": "Event Set Base Value",
					"fullTitle": "Event Set Base Value",
					"description": "Add Event|Stack System",
					"imgPath": "../img/nd_img_SetBaseValue.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStackObject",
					"className": "Stack Object",
					"shortTitle": "Set Base Value",
					"fullTitle": "Set Base Value",
					"description": "Stack System",
					"imgPath": "../img/nd_img_SetBaseValue.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Stack Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStackObject",
					"className": "Stack Object",
					"shortTitle": "Event Remove Value Mitigation from Stack",
					"fullTitle": "Event Remove Value Mitigation from Stack",
					"description": "Add Event|Stack System",
					"imgPath": "../img/nd_img_RemoveValueMitigationFromStack.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Key",
							"type": "Name",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStackObject",
					"className": "Stack Object",
					"shortTitle": "Remove Value Mitigation from Stack",
					"fullTitle": "Remove Value Mitigation from Stack",
					"description": "Stack System",
					"imgPath": "../img/nd_img_RemoveValueMitigationFromStack.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Stack Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Key",
							"type": "Name",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStackObject",
					"className": "Stack Object",
					"shortTitle": "Event Remove Value from Stack",
					"fullTitle": "Event Remove Value from Stack",
					"description": "Add Event|Stack System",
					"imgPath": "../img/nd_img_RemoveValueFromStack.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Key",
							"type": "Name",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStackObject",
					"className": "Stack Object",
					"shortTitle": "Remove Value from Stack",
					"fullTitle": "Remove Value from Stack",
					"description": "Stack System",
					"imgPath": "../img/nd_img_RemoveValueFromStack.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Stack Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Key",
							"type": "Name",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStackObject",
					"className": "Stack Object",
					"shortTitle": "Event On Tick",
					"fullTitle": "Event On Tick",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnTick.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Delta Time",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStackObject",
					"className": "Stack Object",
					"shortTitle": "On Tick",
					"fullTitle": "On Tick",
					"description": "",
					"imgPath": "../img/nd_img_OnTick.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Stack Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Delta Time",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStackObject",
					"className": "Stack Object",
					"shortTitle": "Is Running",
					"fullTitle": "Is Running",
					"description": "Stack",
					"imgPath": "../img/nd_img_IsRunning.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Stack Object Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Running"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStackObject",
					"className": "Stack Object",
					"shortTitle": "Event Clear Value Stack",
					"fullTitle": "Event Clear Value Stack",
					"description": "Add Event|Stack System",
					"imgPath": "../img/nd_img_ClearValueStack.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStackObject",
					"className": "Stack Object",
					"shortTitle": "Clear Value Stack",
					"fullTitle": "Clear Value Stack",
					"description": "Stack System",
					"imgPath": "../img/nd_img_ClearValueStack.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Stack Object Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStackObject",
					"className": "Stack Object",
					"shortTitle": "Calculate Value Percent Total",
					"fullTitle": "Calculate Value Percent Total",
					"description": "Stack System",
					"imgPath": "../img/nd_img_CalculateValuePercentTotal.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Stack Object Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Calculate Value Percent Total"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStackObject",
					"className": "Stack Object",
					"shortTitle": "Calculate Value Mitigation Percent Total",
					"fullTitle": "Calculate Value Mitigation Percent Total",
					"description": "Stack System",
					"imgPath": "../img/nd_img_CalculateValueMitigationPercentTotal.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Stack Object Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Calculate Value Mitigation Percent Total"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStackObject",
					"className": "Stack Object",
					"shortTitle": "Calculate Value Mitigation Flat Total",
					"fullTitle": "Calculate Value Mitigation Flat Total",
					"description": "Stack System",
					"imgPath": "../img/nd_img_CalculateValueMitigationFlatTotal.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Stack Object Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Calculate Value Mitigation Flat Total"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStackObject",
					"className": "Stack Object",
					"shortTitle": "Calculate Value Flat Total",
					"fullTitle": "Calculate Value Flat Total",
					"description": "Stack System",
					"imgPath": "../img/nd_img_CalculateValueFlatTotal.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Stack Object Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Calculate Value Flat Total"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStackObject",
					"className": "Stack Object",
					"shortTitle": "Calculate Final Value Total",
					"fullTitle": "Calculate Final Value Total",
					"description": "Stack System",
					"imgPath": "../img/nd_img_CalculateFinalValueTotal.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Stack Object Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Float (single-precision)",
							"description": "Calculate Final Value Total"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStackObject",
					"className": "Stack Object",
					"shortTitle": "Event Add Value to Stack",
					"fullTitle": "Event Add Value to Stack",
					"description": "Add Event|Stack System",
					"imgPath": "../img/nd_img_AddValueToStack.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Key",
							"type": "Name",
							"description": "$no_comments"
						},
						{
							"name": "Value",
							"type": "Stack Entry Details Structure",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStackObject",
					"className": "Stack Object",
					"shortTitle": "Add Value to Stack",
					"fullTitle": "Add Value to Stack",
					"description": "Stack System",
					"imgPath": "../img/nd_img_AddValueToStack.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Stack Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Key",
							"type": "Name",
							"description": "$no_comments"
						},
						{
							"name": "Value",
							"type": "Stack Entry Details Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStackObject",
					"className": "Stack Object",
					"shortTitle": "Event Add Value Mitigation to Stack",
					"fullTitle": "Event Add Value Mitigation to Stack",
					"description": "Add Event|Stack System",
					"imgPath": "../img/nd_img_AddValueMitigationToStack.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Key",
							"type": "Name",
							"description": "$no_comments"
						},
						{
							"name": "Value",
							"type": "Stack Entry Details Structure",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStackObject",
					"className": "Stack Object",
					"shortTitle": "Add Value Mitigation to Stack",
					"fullTitle": "Add Value Mitigation to Stack",
					"description": "Stack System",
					"imgPath": "../img/nd_img_AddValueMitigationToStack.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Stack Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Key",
							"type": "Name",
							"description": "$no_comments"
						},
						{
							"name": "Value",
							"type": "Stack Entry Details Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UCachedValueStackObject",
			"classHierarchy": [
				"UObject",
				"UStackObject"
			],
			"path": "Classes/Default/UCachedValueStackObject",
			"properties": [],
			"functions": []
		},
		{
			"className": "UStatusEffectObject",
			"classHierarchy": [
				"UObject"
			],
			"path": "Classes/Default/UStatusEffectObject",
			"properties": [
				{
					"name": "BlockedTags",
					"type": "FGameplayTagContainer",
					"flags": [
						"Category = Tags",
						"ModuleRelativePath = StatusEffect/StatusEffectObject.h",
						"Public",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "StatusEffectName",
					"type": "FGameplayTag",
					"flags": [
						"Category = StatusEffects",
						"ModuleRelativePath = StatusEffect/StatusEffectObject.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "GrantedTags",
					"type": "FGameplayTagContainer",
					"flags": [
						"Category = Tags",
						"ModuleRelativePath = StatusEffect/StatusEffectObject.h",
						"Public",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "RequiredTags",
					"type": "FGameplayTagContainer",
					"flags": [
						"Category = Tags",
						"ModuleRelativePath = StatusEffect/StatusEffectObject.h",
						"Public",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ObjectTickInterval",
					"type": "float",
					"flags": [
						"Category = Tick",
						"ModuleRelativePath = StatusEffect/StatusEffectObject.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bIsRunning",
					"type": "bool",
					"flags": [
						"ModuleRelativePath = StatusEffect/StatusEffectObject.h",
						"Protected"
					],
					"description": ""
				},
				{
					"name": "bIsTickEnabled",
					"type": "bool",
					"flags": [
						"Category = Tick",
						"ModuleRelativePath = StatusEffect/StatusEffectObject.h",
						"Protected",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "ApplyStatusEffectTags",
					"description": "Apply Status Effect Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "CanContinueStatusEffect",
					"description": "Can Continue Status Effect",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "CanStartStatusEffect",
					"description": "Can Start Status Effect",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetOwningActor",
					"description": "Get Owning Actor",
					"flags": [
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "AActor*",
					"parameters": []
				},
				{
					"name": "GetOwningComponent",
					"description": "Get Owning Component",
					"flags": [
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UAnimalStatusEffectComponent*",
					"parameters": []
				},
				{
					"name": "GrantTags",
					"description": "Grant Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Tags",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "HasTags",
					"description": "Has Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Tags",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "IsRunning",
					"description": "Is Running",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "OnStartAgainWhileActive",
					"description": "On Start Again While Active",
					"flags": [
						"Native",
						"Event",
						"Public",
						"HasDefaults",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "OnStartStatusEffect",
					"description": "On Start Status Effect",
					"flags": [
						"Native",
						"Event",
						"Protected",
						"HasDefaults",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "OnStopStatusEffect",
					"description": "On Stop Status Effect",
					"flags": [
						"Native",
						"Event",
						"Protected",
						"HasDefaults",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "OnTick",
					"description": "On Tick",
					"flags": [
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "DeltaTime",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnUpdateStatusEffect",
					"description": "On Update Status Effect",
					"flags": [
						"Native",
						"Event",
						"Protected",
						"HasDefaults",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "RemoveStatusEffectTags",
					"description": "Remove Status Effect Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "RemoveTags",
					"description": "Remove Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Tags",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetTickEnabled",
					"description": "Set Tick Enabled",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bEnabled",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "StartStatusEffect",
					"description": "Start Status Effect",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "StopStatusEffect",
					"description": "Stop Status Effect",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "UpdateStatusEffect",
					"description": "Update Status Effect",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UStatusEffectObject",
					"className": "Status Effect Object",
					"shortTitle": "Update Status Effect",
					"fullTitle": "Update Status Effect",
					"description": "Status Effect",
					"imgPath": "../img/nd_img_UpdateStatusEffect.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Status Effect Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStatusEffectObject",
					"className": "Status Effect Object",
					"shortTitle": "Stop Status Effect",
					"fullTitle": "Stop Status Effect",
					"description": "Status Effect",
					"imgPath": "../img/nd_img_StopStatusEffect.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Status Effect Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStatusEffectObject",
					"className": "Status Effect Object",
					"shortTitle": "Start Status Effect",
					"fullTitle": "Start Status Effect",
					"description": "Status Effect",
					"imgPath": "../img/nd_img_StartStatusEffect.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Status Effect Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStatusEffectObject",
					"className": "Status Effect Object",
					"shortTitle": "Set Tick Enabled",
					"fullTitle": "Set Tick Enabled",
					"description": "Tick",
					"imgPath": "../img/nd_img_SetTickEnabled.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Status Effect Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Enabled",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStatusEffectObject",
					"className": "Status Effect Object",
					"shortTitle": "Remove Tags",
					"fullTitle": "Remove Tags",
					"description": "Status Effect",
					"imgPath": "../img/nd_img_RemoveTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Status Effect Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tags",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Remove Tags"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStatusEffectObject",
					"className": "Status Effect Object",
					"shortTitle": "Remove Status Effect Tags",
					"fullTitle": "Remove Status Effect Tags",
					"description": "Status Effect",
					"imgPath": "../img/nd_img_RemoveStatusEffectTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Status Effect Object Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Remove Status Effect Tags"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStatusEffectObject",
					"className": "Status Effect Object",
					"shortTitle": "Event On Update Status Effect",
					"fullTitle": "Event On Update Status Effect",
					"description": "Add Event|Status Effect",
					"imgPath": "../img/nd_img_OnUpdateStatusEffect.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStatusEffectObject",
					"className": "Status Effect Object",
					"shortTitle": "Event On Tick",
					"fullTitle": "Event On Tick",
					"description": "Add Event|Tick",
					"imgPath": "../img/nd_img_OnTick.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Delta Time",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStatusEffectObject",
					"className": "Status Effect Object",
					"shortTitle": "Event On Stop Status Effect",
					"fullTitle": "Event On Stop Status Effect",
					"description": "Add Event|Status Effect",
					"imgPath": "../img/nd_img_OnStopStatusEffect.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStatusEffectObject",
					"className": "Status Effect Object",
					"shortTitle": "Event On Start Status Effect",
					"fullTitle": "Event On Start Status Effect",
					"description": "Add Event|Status Effect",
					"imgPath": "../img/nd_img_OnStartStatusEffect.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStatusEffectObject",
					"className": "Status Effect Object",
					"shortTitle": "Event On Start Again While Active",
					"fullTitle": "Event On Start Again While Active",
					"description": "Add Event|Status Effect",
					"imgPath": "../img/nd_img_OnStartAgainWhileActive.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStatusEffectObject",
					"className": "Status Effect Object",
					"shortTitle": "Is Running",
					"fullTitle": "Is Running",
					"description": "Status Effect",
					"imgPath": "../img/nd_img_IsRunning.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Status Effect Object Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Running"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStatusEffectObject",
					"className": "Status Effect Object",
					"shortTitle": "Has Tags",
					"fullTitle": "Has Tags",
					"description": "Status Effect",
					"imgPath": "../img/nd_img_HasTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Status Effect Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tags",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Has Tags"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStatusEffectObject",
					"className": "Status Effect Object",
					"shortTitle": "Grant Tags",
					"fullTitle": "Grant Tags",
					"description": "Status Effect",
					"imgPath": "../img/nd_img_GrantTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Status Effect Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tags",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Grant Tags"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStatusEffectObject",
					"className": "Status Effect Object",
					"shortTitle": "Get Owning Component",
					"fullTitle": "Get Owning Component",
					"description": "Status Effect",
					"imgPath": "../img/nd_img_GetOwningComponent.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Status Effect Object Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Animal Status Effect Component Object Reference",
							"description": "Get Owning Component"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStatusEffectObject",
					"className": "Status Effect Object",
					"shortTitle": "Get Owning Actor",
					"fullTitle": "Get Owning Actor",
					"description": "Status Effect",
					"imgPath": "../img/nd_img_GetOwningActor.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Status Effect Object Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Actor Object Reference",
							"description": "Get Owning Actor"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStatusEffectObject",
					"className": "Status Effect Object",
					"shortTitle": "Can Start Status Effect",
					"fullTitle": "Can Start Status Effect",
					"description": "Status Effect",
					"imgPath": "../img/nd_img_CanStartStatusEffect.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Status Effect Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Can Start Status Effect"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStatusEffectObject",
					"className": "Status Effect Object",
					"shortTitle": "Can Continue Status Effect",
					"fullTitle": "Can Continue Status Effect",
					"description": "Status Effect",
					"imgPath": "../img/nd_img_CanContinueStatusEffect.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Status Effect Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Can Continue Status Effect"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UStatusEffectObject",
					"className": "Status Effect Object",
					"shortTitle": "Apply Status Effect Tags",
					"fullTitle": "Apply Status Effect Tags",
					"description": "Status Effect",
					"imgPath": "../img/nd_img_ApplyStatusEffectTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Status Effect Object Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Apply Status Effect Tags"
						}
					]
				}
			]
		},
		{
			"className": "UTargetObjectSubsystem",
			"classHierarchy": [
				"UObject",
				"USubsystem",
				"UWorldSubsystem"
			],
			"path": "Classes/Default/UTargetObjectSubsystem",
			"properties": [
				{
					"name": "TargetObjectRegistry",
					"type": "TMap",
					"flags": [
						"ModuleRelativePath = Utils/TargetObjectSubsystem.h",
						"Public"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "GetRegisteredObject",
					"description": "Get Registered Object",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UObject*",
					"parameters": [
						{
							"name": "Tag",
							"type": "const FGameplayTag&",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "bLogError",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "GetTargetObjectByTag",
					"description": "Get Target Object by Tag",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UObject*",
					"parameters": [
						{
							"name": "ContextObject",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "TargetObjectMethod",
							"type": "const FGameplayTag",
							"description": "",
							"flags": [
								"Categories = TargetObject",
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bLogError",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "RegisterTargetObject",
					"description": "Register Target Object",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasOutParams",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Tag",
							"type": "const FGameplayTag&",
							"description": "",
							"flags": [
								"Categories = TargetObject",
								"NativeConst",
								"Public",
								"Parm",
								"OutParm",
								"ConstParm",
								"ReferenceParm"
							]
						},
						{
							"name": "Object",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "Update",
					"description": "Update",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UTargetObjectSubsystem",
					"className": "Target Object Subsystem",
					"shortTitle": "Update",
					"fullTitle": "Update",
					"description": "",
					"imgPath": "../img/nd_img_Update.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Target Object Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UTargetObjectSubsystem",
					"className": "Target Object Subsystem",
					"shortTitle": "Register Target Object",
					"fullTitle": "Register Target Object",
					"description": "",
					"imgPath": "../img/nd_img_RegisterTargetObject.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Target Object Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tag",
							"type": "Gameplay Tag Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Object",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UTargetObjectSubsystem",
					"className": "Target Object Subsystem",
					"shortTitle": "Get Target Object by Tag",
					"fullTitle": "Get Target Object by Tag",
					"description": "",
					"imgPath": "../img/nd_img_GetTargetObjectByTag.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Target Object Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Context Object",
							"type": "Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Target Object Method",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						},
						{
							"name": "Log Error",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Object Reference",
							"description": "Get Target Object by Tag"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UTargetObjectSubsystem",
					"className": "Target Object Subsystem",
					"shortTitle": "Get Registered Object",
					"fullTitle": "Get Registered Object",
					"description": "",
					"imgPath": "../img/nd_img_GetRegisteredObject.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Target Object Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tag",
							"type": "Gameplay Tag Structure (by ref)",
							"description": "$no_comments"
						},
						{
							"name": "Log Error",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Object Reference",
							"description": "Get Registered Object"
						}
					]
				}
			]
		},
		{
			"className": "UTemperatureComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UTemperatureComponent",
			"properties": [
				{
					"name": "TemperatureStack",
					"type": "TMap",
					"flags": [
						"Category = TemperatureComponent",
						"ModuleRelativePath = Climate/TemperatureComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "CurrentTemperature",
					"type": "float",
					"flags": [
						"Category = TemperatureComponent",
						"ModuleRelativePath = Climate/TemperatureComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "TemperatureRateOfChangePerSecond",
					"type": "float",
					"flags": [
						"ModuleRelativePath = Climate/TemperatureComponent.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "ClimateInfo",
					"type": "TObjectPtr<UClimateInfo>",
					"flags": [
						"Category = TemperatureComponent",
						"ModuleRelativePath = Climate/TemperatureComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OnTemperatureChange",
					"type": "FOnTemperatureChange",
					"flags": [
						"ModuleRelativePath = Climate/TemperatureComponent.h",
						"Public",
						"BlueprintAssignable",
						"BlueprintCallable"
					],
					"description": ""
				},
				{
					"name": "OnCriticalMinTemperatureReached",
					"type": "FOnTemperatureThresholdReached",
					"flags": [
						"ModuleRelativePath = Climate/TemperatureComponent.h",
						"Public",
						"BlueprintAssignable",
						"BlueprintCallable"
					],
					"description": ""
				},
				{
					"name": "OnCriticalMaxTemperatureReached",
					"type": "FOnTemperatureThresholdReached",
					"flags": [
						"ModuleRelativePath = Climate/TemperatureComponent.h",
						"Public",
						"BlueprintAssignable",
						"BlueprintCallable"
					],
					"description": ""
				},
				{
					"name": "OnAbsoluteMinTemperatureReached",
					"type": "FOnTemperatureThresholdReached",
					"flags": [
						"ModuleRelativePath = Climate/TemperatureComponent.h",
						"Public",
						"BlueprintAssignable",
						"BlueprintCallable"
					],
					"description": ""
				},
				{
					"name": "OnAbsoluteMaxTemperatureReached",
					"type": "FOnTemperatureThresholdReached",
					"flags": [
						"ModuleRelativePath = Climate/TemperatureComponent.h",
						"Public",
						"BlueprintAssignable",
						"BlueprintCallable"
					],
					"description": ""
				},
				{
					"name": "OnNormalTemperatureReached",
					"type": "FOnTemperatureThresholdReached",
					"flags": [
						"ModuleRelativePath = Climate/TemperatureComponent.h",
						"Public",
						"BlueprintAssignable",
						"BlueprintCallable"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "AddTemperature",
					"description": "Add Temperature",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Key",
							"type": "FString",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Value",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "EvaluateTemperatureChangeEvents",
					"description": "Evaluate Temperature Change Events",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewTemperature",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "OldTemperature",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnTemperatureChange__DelegateSignature",
					"description": "--------------------------------- Delegates",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewTemperature",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "OldTemperature",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnTemperatureThresholdReached__DelegateSignature",
					"description": "On Temperature Threshold Reached  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "RemoveTemperature",
					"description": "Remove Temperature",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Key",
							"type": "FString",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "UpdateTemperature",
					"description": "Update Temperature",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Delta",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UTemperatureComponent",
					"className": "Temperature Component",
					"shortTitle": "Event Update Temperature",
					"fullTitle": "Event Update Temperature",
					"description": "Add Event",
					"imgPath": "../img/nd_img_UpdateTemperature.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Delta",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UTemperatureComponent",
					"className": "Temperature Component",
					"shortTitle": "Update Temperature",
					"fullTitle": "Update Temperature",
					"description": "",
					"imgPath": "../img/nd_img_UpdateTemperature.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Temperature Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Delta",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UTemperatureComponent",
					"className": "Temperature Component",
					"shortTitle": "Remove Temperature",
					"fullTitle": "Remove Temperature",
					"description": "",
					"imgPath": "../img/nd_img_RemoveTemperature.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Temperature Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Key",
							"type": "String",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UTemperatureComponent",
					"className": "Temperature Component",
					"shortTitle": "Evaluate Temperature Change Events",
					"fullTitle": "Evaluate Temperature Change Events",
					"description": "",
					"imgPath": "../img/nd_img_EvaluateTemperatureChangeEvents.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Temperature Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Temperature",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Old Temperature",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UTemperatureComponent",
					"className": "Temperature Component",
					"shortTitle": "Add Temperature",
					"fullTitle": "Add Temperature",
					"description": "",
					"imgPath": "../img/nd_img_AddTemperature.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Temperature Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Key",
							"type": "String",
							"description": "$no_comments"
						},
						{
							"name": "Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UTimeManagerSubsystem",
			"classHierarchy": [
				"UObject",
				"USubsystem",
				"UWorldSubsystem",
				"UTickableWorldSubsystem"
			],
			"path": "Classes/Default/UTimeManagerSubsystem",
			"properties": [
				{
					"name": "bShouldUpdate",
					"type": "bool",
					"flags": [
						"ModuleRelativePath = TimeManagerSubsystem.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "ShadowMPC",
					"type": "TObjectPtr<UMaterialParameterCollection>",
					"flags": [
						"ModuleRelativePath = TimeManagerSubsystem.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "ShadowControlCurve",
					"type": "TObjectPtr<UCurveFloat>",
					"flags": [
						"ModuleRelativePath = TimeManagerSubsystem.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "SunControlCurve",
					"type": "TObjectPtr<UCurveFloat>",
					"flags": [
						"ModuleRelativePath = TimeManagerSubsystem.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "DefaultSunRotation",
					"type": "FRotator",
					"flags": [
						"ModuleRelativePath = TimeManagerSubsystem.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "TimeOfDay",
					"type": "float",
					"flags": [
						"Category = TimeManagerSubsystem",
						"Comment = // TIME SETTINGS\n",
						"ModuleRelativePath = TimeManagerSubsystem.h",
						"ToolTip = TIME SETTINGS",
						"Public",
						"BlueprintVisible",
						"Edit",
						"Config",
						"Config"
					],
					"description": "TIME SETTINGS"
				},
				{
					"name": "DayStart",
					"type": "float",
					"flags": [
						"Category = TimeManagerSubsystem",
						"ModuleRelativePath = TimeManagerSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit",
						"Config",
						"Config"
					],
					"description": ""
				},
				{
					"name": "NightStart",
					"type": "float",
					"flags": [
						"Category = TimeManagerSubsystem",
						"ModuleRelativePath = TimeManagerSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit",
						"Config",
						"Config"
					],
					"description": ""
				},
				{
					"name": "HourLengthInWalltimeSeconds",
					"type": "float",
					"flags": [
						"Category = TimeManagerSubsystem",
						"Comment = /**\n\t * How many minutes in walltime should pass for every in-game hour.\n\t * e.g.\n\t * 120 = 2 min walltime -> 1 hour gametime -> 48 minute day\n\t * 60 = 1 min walltime -> 1 hour gametime -> 24 minute day\n\t * 30 = 30s walltime -> 1 hour gametime -> 12 minute day\n\t * 15 = 15s walltime -> 1 hour gametime -> 6 minute day\n\t * 7.5 = 15s walltime -> 1 hour gametime -> 3 minute day\n\t */",
						"ModuleRelativePath = TimeManagerSubsystem.h",
						"ToolTip = How many minutes in walltime should pass for every in-game hour.\ne.g.\n120 = 2 min walltime -> 1 hour gametime -> 48 minute day\n60 = 1 min walltime -> 1 hour gametime -> 24 minute day\n30 = 30s walltime -> 1 hour gametime -> 12 minute day\n15 = 15s walltime -> 1 hour gametime -> 6 minute day\n7.5 = 15s walltime -> 1 hour gametime -> 3 minute day",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "How many minutes in walltime should pass for every in-game hour.\ne.g.\n120 = 2 min walltime -> 1 hour gametime -> 48 minute day\n60 = 1 min walltime -> 1 hour gametime -> 24 minute day\n30 = 30s walltime -> 1 hour gametime -> 12 minute day\n15 = 15s walltime -> 1 hour gametime -> 6 minute day\n7.5 = 15s walltime -> 1 hour gametime -> 3 minute day"
				},
				{
					"name": "DaytimeLength",
					"type": "float",
					"flags": [
						"Category = TimeManagerSubsystem",
						"ModuleRelativePath = TimeManagerSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "NighttimeLength",
					"type": "float",
					"flags": [
						"Category = TimeManagerSubsystem",
						"ModuleRelativePath = TimeManagerSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "IsDayTime",
					"type": "bool",
					"flags": [
						"Category = TimeManagerSubsystem",
						"ModuleRelativePath = TimeManagerSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "AffectSky",
					"type": "bool",
					"flags": [
						"Category = TimeManagerSubsystem",
						"ModuleRelativePath = TimeManagerSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Now",
					"type": "FDateTime",
					"flags": [
						"Category = TimeManagerSubsystem",
						"Comment = // CALENDAR INFO\n",
						"ModuleRelativePath = TimeManagerSubsystem.h",
						"ToolTip = CALENDAR INFO",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst",
						"Config",
						"Config"
					],
					"description": "CALENDAR INFO"
				},
				{
					"name": "SourceLight",
					"type": "TObjectPtr<ADirectionalLight>",
					"flags": [
						"Category = TimeManagerSubsystem",
						"Comment = // SKY ACTORS\t\n",
						"ModuleRelativePath = TimeManagerSubsystem.h",
						"ToolTip = SKY ACTORS",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "SKY ACTORS"
				},
				{
					"name": "SkySphere",
					"type": "TObjectPtr<AActor>",
					"flags": [
						"Category = TimeManagerSubsystem",
						"ModuleRelativePath = TimeManagerSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OnDateChanged",
					"type": "FTimeManagerEvent",
					"flags": [
						"Comment = // EVENTS\n",
						"ModuleRelativePath = TimeManagerSubsystem.h",
						"ToolTip = EVENTS",
						"Public",
						"BlueprintAssignable"
					],
					"description": "EVENTS"
				},
				{
					"name": "OnWeekChanged",
					"type": "FTimeManagerEvent",
					"flags": [
						"ModuleRelativePath = TimeManagerSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnMonthChanged",
					"type": "FTimeManagerEvent",
					"flags": [
						"ModuleRelativePath = TimeManagerSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnYearChanged",
					"type": "FTimeManagerEvent",
					"flags": [
						"ModuleRelativePath = TimeManagerSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnHourChanged",
					"type": "FTimeManagerEvent",
					"flags": [
						"ModuleRelativePath = TimeManagerSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnNightTimeStart",
					"type": "FTimeManagerEvent",
					"flags": [
						"ModuleRelativePath = TimeManagerSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnDayTimeStart",
					"type": "FTimeManagerEvent",
					"flags": [
						"ModuleRelativePath = TimeManagerSubsystem.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "GetDayOfWeek",
					"description": "Get Day Of Week",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "EDayName",
					"parameters": []
				},
				{
					"name": "GetMonth",
					"description": "Get Month",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "EMonthName",
					"parameters": []
				},
				{
					"name": "RotateSun",
					"description": "Time Management functions",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UTimeManagerSubsystem",
					"className": "Time Manager Subsystem",
					"shortTitle": "Rotate Sun",
					"fullTitle": "Rotate Sun",
					"description": "",
					"imgPath": "../img/nd_img_RotateSun.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Time Manager Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UTimeManagerSubsystem",
					"className": "Time Manager Subsystem",
					"shortTitle": "Get Month",
					"fullTitle": "Get Month",
					"description": "",
					"imgPath": "../img/nd_img_GetMonth.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Time Manager Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "EMonthName Enum",
							"description": "Get Month"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UTimeManagerSubsystem",
					"className": "Time Manager Subsystem",
					"shortTitle": "Get Day Of Week",
					"fullTitle": "Get Day Of Week",
					"description": "",
					"imgPath": "../img/nd_img_GetDayOfWeek.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Time Manager Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "EDayName Enum",
							"description": "Get Day Of Week"
						}
					]
				}
			]
		},
		{
			"className": "UToolObject",
			"classHierarchy": [
				"UObject"
			],
			"path": "Classes/Default/UToolObject",
			"properties": [
				{
					"name": "BlockedTags",
					"type": "FGameplayTagContainer",
					"flags": [
						"Category = Tags",
						"ModuleRelativePath = ToolObject.h",
						"Public",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ToolName",
					"type": "FGameplayTag",
					"flags": [
						"Category = Tools",
						"ModuleRelativePath = ToolObject.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "GrantedTags",
					"type": "FGameplayTagContainer",
					"flags": [
						"Category = Tags",
						"ModuleRelativePath = ToolObject.h",
						"Public",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "RequiredTags",
					"type": "FGameplayTagContainer",
					"flags": [
						"Category = Tags",
						"ModuleRelativePath = ToolObject.h",
						"Public",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "ObjectTickInterval",
					"type": "float",
					"flags": [
						"Category = Tick",
						"ModuleRelativePath = ToolObject.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Thumbnail",
					"type": "UTexture2D*",
					"flags": [
						"Category = Tick",
						"ModuleRelativePath = ToolObject.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Name",
					"type": "FText",
					"flags": [
						"Category = Tick",
						"ModuleRelativePath = ToolObject.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bIsRunning",
					"type": "bool",
					"flags": [
						"ModuleRelativePath = ToolObject.h",
						"Protected"
					],
					"description": ""
				},
				{
					"name": "bIsTickEnabled",
					"type": "bool",
					"flags": [
						"Category = Tick",
						"ModuleRelativePath = ToolObject.h",
						"Protected",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "ApplyToolTags",
					"description": "Apply Tool Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "CanContinueTool",
					"description": "Can Continue Tool",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "CanStartTool",
					"description": "Can Start Tool",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetOwningActor",
					"description": "Get Owning Actor",
					"flags": [
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "AActor*",
					"parameters": []
				},
				{
					"name": "GetOwningComponent",
					"description": "Get Owning Component",
					"flags": [
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UToolsComponent*",
					"parameters": []
				},
				{
					"name": "GrantTags",
					"description": "Grant Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Tags",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "HasTags",
					"description": "Has Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Tags",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "IsRunning",
					"description": "Is Running",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "OnStartAgainWhileActive",
					"description": "On Start Again While Active",
					"flags": [
						"Native",
						"Event",
						"Public",
						"HasDefaults",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "OnStartTool",
					"description": "On Start Tool",
					"flags": [
						"Native",
						"Event",
						"Protected",
						"HasDefaults",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "OnStopTool",
					"description": "On Stop Tool",
					"flags": [
						"Native",
						"Event",
						"Protected",
						"HasDefaults",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "OnTick",
					"description": "On Tick",
					"flags": [
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "DeltaTime",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnUpdateTool",
					"description": "On Update Tool",
					"flags": [
						"Native",
						"Event",
						"Protected",
						"HasDefaults",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "RemoveTags",
					"description": "Remove Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Tags",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "RemoveToolTags",
					"description": "Remove Tool Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "SetTickEnabled",
					"description": "Set Tick Enabled",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bEnabled",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "StartTool",
					"description": "Start Tool",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "StopTool",
					"description": "Stop Tool",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "UpdateTool",
					"description": "Update Tool",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UToolObject",
					"className": "Tool Object",
					"shortTitle": "Update Tool",
					"fullTitle": "Update Tool",
					"description": "Tool",
					"imgPath": "../img/nd_img_UpdateTool.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tool Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolObject",
					"className": "Tool Object",
					"shortTitle": "Stop Tool",
					"fullTitle": "Stop Tool",
					"description": "Tool",
					"imgPath": "../img/nd_img_StopTool.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tool Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolObject",
					"className": "Tool Object",
					"shortTitle": "Start Tool",
					"fullTitle": "Start Tool",
					"description": "Tool",
					"imgPath": "../img/nd_img_StartTool.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tool Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolObject",
					"className": "Tool Object",
					"shortTitle": "Set Tick Enabled",
					"fullTitle": "Set Tick Enabled",
					"description": "Tick",
					"imgPath": "../img/nd_img_SetTickEnabled.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tool Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Enabled",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolObject",
					"className": "Tool Object",
					"shortTitle": "Remove Tool Tags",
					"fullTitle": "Remove Tool Tags",
					"description": "Tool",
					"imgPath": "../img/nd_img_RemoveToolTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tool Object Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Remove Tool Tags"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolObject",
					"className": "Tool Object",
					"shortTitle": "Remove Tags",
					"fullTitle": "Remove Tags",
					"description": "Tool",
					"imgPath": "../img/nd_img_RemoveTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tool Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tags",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Remove Tags"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolObject",
					"className": "Tool Object",
					"shortTitle": "Event On Update Tool",
					"fullTitle": "Event On Update Tool",
					"description": "Add Event|Tool",
					"imgPath": "../img/nd_img_OnUpdateTool.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolObject",
					"className": "Tool Object",
					"shortTitle": "Event On Tick",
					"fullTitle": "Event On Tick",
					"description": "Add Event|Tick",
					"imgPath": "../img/nd_img_OnTick.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Delta Time",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolObject",
					"className": "Tool Object",
					"shortTitle": "Event On Stop Tool",
					"fullTitle": "Event On Stop Tool",
					"description": "Add Event|Tool",
					"imgPath": "../img/nd_img_OnStopTool.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolObject",
					"className": "Tool Object",
					"shortTitle": "Event On Start Tool",
					"fullTitle": "Event On Start Tool",
					"description": "Add Event|Tool",
					"imgPath": "../img/nd_img_OnStartTool.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolObject",
					"className": "Tool Object",
					"shortTitle": "Event On Start Again While Active",
					"fullTitle": "Event On Start Again While Active",
					"description": "Add Event|Tool",
					"imgPath": "../img/nd_img_OnStartAgainWhileActive.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolObject",
					"className": "Tool Object",
					"shortTitle": "Is Running",
					"fullTitle": "Is Running",
					"description": "Tool",
					"imgPath": "../img/nd_img_IsRunning.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Tool Object Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Running"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolObject",
					"className": "Tool Object",
					"shortTitle": "Has Tags",
					"fullTitle": "Has Tags",
					"description": "Tool",
					"imgPath": "../img/nd_img_HasTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tool Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tags",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Has Tags"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolObject",
					"className": "Tool Object",
					"shortTitle": "Grant Tags",
					"fullTitle": "Grant Tags",
					"description": "Tool",
					"imgPath": "../img/nd_img_GrantTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tool Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tags",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Grant Tags"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolObject",
					"className": "Tool Object",
					"shortTitle": "Get Owning Component",
					"fullTitle": "Get Owning Component",
					"description": "Tool",
					"imgPath": "../img/nd_img_GetOwningComponent.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Tool Object Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Tools Component Object Reference",
							"description": "Get Owning Component"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolObject",
					"className": "Tool Object",
					"shortTitle": "Get Owning Actor",
					"fullTitle": "Get Owning Actor",
					"description": "Tool",
					"imgPath": "../img/nd_img_GetOwningActor.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Tool Object Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Actor Object Reference",
							"description": "Get Owning Actor"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolObject",
					"className": "Tool Object",
					"shortTitle": "Can Start Tool",
					"fullTitle": "Can Start Tool",
					"description": "Tool",
					"imgPath": "../img/nd_img_CanStartTool.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Tool Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Can Start Tool"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolObject",
					"className": "Tool Object",
					"shortTitle": "Can Continue Tool",
					"fullTitle": "Can Continue Tool",
					"description": "Tool",
					"imgPath": "../img/nd_img_CanContinueTool.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tool Object Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Can Continue Tool"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolObject",
					"className": "Tool Object",
					"shortTitle": "Apply Tool Tags",
					"fullTitle": "Apply Tool Tags",
					"description": "Tool",
					"imgPath": "../img/nd_img_ApplyToolTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tool Object Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Apply Tool Tags"
						}
					]
				}
			]
		},
		{
			"className": "UToolsComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UToolsComponent",
			"properties": [
				{
					"name": "DefaultTools",
					"type": "TSet",
					"flags": [
						"Category = Tools",
						"Comment = ///**\n// * ------------------------------------------------------------- Properties\n// */\n",
						"ModuleRelativePath = ToolsComponent.h",
						"ToolTip = ------------------------------------------------------------- Properties",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "------------------------------------------------------------- Properties"
				},
				{
					"name": "ActiveGameplayTags",
					"type": "FGameplayTagContainer",
					"flags": [
						"Category = Tags",
						"Comment = // This is the list of all active gameplay tags that are currently active on this component to centralize\n// where checks are made for gameplay tags, whether required or blocked\n",
						"ModuleRelativePath = ToolsComponent.h",
						"ToolTip = This is the list of all active gameplay tags that are currently active on this component to centralize\nwhere checks are made for gameplay tags, whether required or blocked",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "This is the list of all active gameplay tags that are currently active on this component to centralize\nwhere checks are made for gameplay tags, whether required or blocked"
				},
				{
					"name": "OnTagsUpdated",
					"type": "FToolsOnTagsUpdated",
					"flags": [
						"ModuleRelativePath = ToolsComponent.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "Tools",
					"type": "TArray",
					"flags": [
						"Category = ToolsComponent",
						"ModuleRelativePath = ToolsComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "AddGameplayTags",
					"description": "Add Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Tags",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "AddTool",
					"description": "Functions",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "ToolClass",
							"type": "TSubclassOf<UToolObject>",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "AddToolObject",
					"description": "Add Tool Object",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "ToolObject",
							"type": "UToolObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "Multicast_StartTool",
					"description": "Multicast Start Tool",
					"flags": [
						"NetReliable",
						"Native",
						"Event",
						"NetMulticast",
						"Public",
						"HasDefaults"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "ToolName",
							"type": "const FGameplayTag",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "Multicast_StopTool",
					"description": "Multicast Stop Tool",
					"flags": [
						"NetReliable",
						"Native",
						"Event",
						"NetMulticast",
						"Public",
						"HasDefaults"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "ToolName",
							"type": "const FGameplayTag",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "Multicast_UpdateTool",
					"description": "Multicast Update Tool",
					"flags": [
						"NetReliable",
						"Native",
						"Event",
						"NetMulticast",
						"Public",
						"HasDefaults"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "ToolName",
							"type": "const FGameplayTag",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "RemoveGameplayTags",
					"description": "Remove Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Tags",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "RemoveToolByClass",
					"description": "Remove Tool by Class",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "ToolClass",
							"type": "TSubclassOf<UToolObject>",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "bStopTool",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "RemoveToolByTagName",
					"description": "Remove Tool by Tag Name",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "ToolTagName",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "bStopTool",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "Server_StartTool",
					"description": "Server Start Tool",
					"flags": [
						"NetReliable",
						"Native",
						"Event",
						"Public",
						"HasDefaults"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "ToolName",
							"type": "const FGameplayTag",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "Server_StopTool",
					"description": "Server Stop Tool",
					"flags": [
						"NetReliable",
						"Native",
						"Event",
						"Public",
						"HasDefaults"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "ToolName",
							"type": "const FGameplayTag",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "Server_UpdateTool",
					"description": "Server Update Tool",
					"flags": [
						"NetReliable",
						"Native",
						"Event",
						"Public",
						"HasDefaults"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "ToolName",
							"type": "const FGameplayTag",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "SetActiveGameplayTags",
					"description": "Set Active Gameplay Tags",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Tags",
							"type": "FGameplayTagContainer",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "StartToolByClass",
					"description": "Start Tool by Class",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "ToolClass",
							"type": "TSubclassOf<UToolObject>",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "StartToolByTagName",
					"description": "Start Tool by Tag Name",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "ToolName",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "StopToolByClass",
					"description": "Stop Tool by Class",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "ToolClass",
							"type": "TSubclassOf<UToolObject>",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "StopToolByTagName",
					"description": "Stop Tool by Tag Name",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "ToolName",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "UpdateToolByClass",
					"description": "Update Tool by Class",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "ToolClass",
							"type": "TSubclassOf<UToolObject>",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				},
				{
					"name": "UpdateToolByTagName",
					"description": "Update Tool by Tag Name",
					"flags": [
						"Final",
						"Native",
						"Public",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "ToolName",
							"type": "FGameplayTag",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Instigator",
							"type": "AActor*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "Vector2DValue",
							"type": "const FVector2D",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "FloatValue",
							"type": "const float",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						},
						{
							"name": "bBoolValue",
							"type": "const bool",
							"description": "",
							"flags": [
								"NativeConst",
								"Public",
								"Parm",
								"ConstParm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UToolsComponent",
					"className": "Tools Component",
					"shortTitle": "Update Tool by Tag Name",
					"fullTitle": "Update Tool by Tag Name",
					"description": "Tools",
					"imgPath": "../img/nd_img_UpdateToolByTagName.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tools Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tool Name",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Update Tool by Tag Name"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolsComponent",
					"className": "Tools Component",
					"shortTitle": "Update Tool by Class",
					"fullTitle": "Update Tool by Class",
					"description": "Tools",
					"imgPath": "../img/nd_img_UpdateToolByClass.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tools Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tool Class",
							"type": "Tool Object Class Reference",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Update Tool by Class"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolsComponent",
					"className": "Tools Component",
					"shortTitle": "Stop Tool by Tag Name",
					"fullTitle": "Stop Tool by Tag Name",
					"description": "Tools",
					"imgPath": "../img/nd_img_StopToolByTagName.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tools Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tool Name",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Stop Tool by Tag Name"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolsComponent",
					"className": "Tools Component",
					"shortTitle": "Stop Tool by Class",
					"fullTitle": "Stop Tool by Class",
					"description": "Tools",
					"imgPath": "../img/nd_img_StopToolByClass.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tools Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tool Class",
							"type": "Tool Object Class Reference",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Stop Tool by Class"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolsComponent",
					"className": "Tools Component",
					"shortTitle": "Start Tool by Tag Name",
					"fullTitle": "Start Tool by Tag Name",
					"description": "Tools",
					"imgPath": "../img/nd_img_StartToolByTagName.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tools Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tool Name",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Start Tool by Tag Name"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolsComponent",
					"className": "Tools Component",
					"shortTitle": "Start Tool by Class",
					"fullTitle": "Start Tool by Class",
					"description": "Tools",
					"imgPath": "../img/nd_img_StartToolByClass.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tools Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tool Class",
							"type": "Tool Object Class Reference",
							"description": "$no_comments"
						},
						{
							"name": "Instigator",
							"type": "Actor Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Vector 2DValue",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Float Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Bool Value",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Start Tool by Class"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolsComponent",
					"className": "Tools Component",
					"shortTitle": "Set Active Gameplay Tags",
					"fullTitle": "Set Active Gameplay Tags",
					"description": "Tools| Gameplay Tags",
					"imgPath": "../img/nd_img_SetActiveGameplayTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tools Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tags",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolsComponent",
					"className": "Tools Component",
					"shortTitle": "Remove Tool by Tag Name",
					"fullTitle": "Remove Tool by Tag Name",
					"description": "Tools",
					"imgPath": "../img/nd_img_RemoveToolByTagName.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tools Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tool Tag Name",
							"type": "Gameplay Tag Structure",
							"description": "$no_comments"
						},
						{
							"name": "Stop Tool",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Remove Tool by Tag Name"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolsComponent",
					"className": "Tools Component",
					"shortTitle": "Remove Tool by Class",
					"fullTitle": "Remove Tool by Class",
					"description": "Tools",
					"imgPath": "../img/nd_img_RemoveToolByClass.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tools Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tool Class",
							"type": "Tool Object Class Reference",
							"description": "$no_comments"
						},
						{
							"name": "Stop Tool",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Remove Tool by Class"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolsComponent",
					"className": "Tools Component",
					"shortTitle": "Remove Gameplay Tags",
					"fullTitle": "Remove Gameplay Tags",
					"description": "Tools| Gameplay Tags",
					"imgPath": "../img/nd_img_RemoveGameplayTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tools Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tags",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolsComponent",
					"className": "Tools Component",
					"shortTitle": "Add Tool Object",
					"fullTitle": "Add Tool Object",
					"description": "Tools",
					"imgPath": "../img/nd_img_AddToolObject.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tools Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tool Object",
							"type": "Tool Object Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolsComponent",
					"className": "Tools Component",
					"shortTitle": "Add Tool",
					"fullTitle": "Add Tool",
					"description": "Tools",
					"imgPath": "../img/nd_img_AddTool.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tools Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tool Class",
							"type": "Tool Object Class Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UToolsComponent",
					"className": "Tools Component",
					"shortTitle": "Add Gameplay Tags",
					"fullTitle": "Add Gameplay Tags",
					"description": "Tools| Gameplay Tags",
					"imgPath": "../img/nd_img_AddGameplayTags.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tools Component Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Tags",
							"type": "Gameplay Tag Container Structure",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "URecipe",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase"
			],
			"path": "Classes/Default/URecipe",
			"properties": [
				{
					"name": "OverrideTitle",
					"type": "FText",
					"flags": [
						"Category = Recipe",
						"ModuleRelativePath = Inventory/TradeItemComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Title",
					"type": "FText",
					"flags": [
						"BlueprintGetter = GetTitle",
						"Category = Recipe",
						"ModuleRelativePath = Inventory/TradeItemComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				},
				{
					"name": "TradeMode",
					"type": "ETradeMode",
					"flags": [
						"Category = Recipe",
						"ModuleRelativePath = Inventory/TradeItemComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OverrideIcon",
					"type": "FSlateBrush",
					"flags": [
						"Category = Recipe",
						"Comment = /** Override the icon to use for this recipe, otherwise the first output item's icon will be used */",
						"ModuleRelativePath = Inventory/TradeItemComponent.h",
						"ToolTip = Override the icon to use for this recipe, otherwise the first output item's icon will be used",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Override the icon to use for this recipe, otherwise the first output item's icon will be used"
				},
				{
					"name": "Requirements",
					"type": "TMap",
					"flags": [
						"Category = Recipe",
						"Comment = /* Recipe Requirements */",
						"ModuleRelativePath = Inventory/TradeItemComponent.h",
						"TitleProperty = Title",
						"ToolTip = Recipe Requirements",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Recipe Requirements"
				},
				{
					"name": "Outputs",
					"type": "TMap",
					"flags": [
						"Category = Recipe",
						"Comment = /* Recipe Items */",
						"ModuleRelativePath = Inventory/TradeItemComponent.h",
						"TitleProperty = Title",
						"ToolTip = Recipe Items",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Recipe Items"
				},
				{
					"name": "InteractorInventory",
					"type": "TObjectPtr<UInventory>",
					"flags": [
						"BlueprintSetter = SetInteractorInventory",
						"Category = Recipe",
						"EditInline = true",
						"ModuleRelativePath = Inventory/TradeItemComponent.h",
						"Public",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "CraftedAmount",
					"type": "int32",
					"flags": [
						"Category = Recipe",
						"ModuleRelativePath = Inventory/TradeItemComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				},
				{
					"name": "LimitedQuantity",
					"type": "int32",
					"flags": [
						"Category = Recipe",
						"EditCondition = TradeMode == ETradeMode::LimitedQuantity",
						"ModuleRelativePath = Inventory/TradeItemComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "SourceInventory",
					"type": "TObjectPtr<UInventory>",
					"flags": [
						"BlueprintSetter = SetSourceInventory",
						"Category = Recipe",
						"EditCondition = TradeMode == ETradeMode::SourceInventory",
						"EditInline = true",
						"ModuleRelativePath = Inventory/TradeItemComponent.h",
						"Public",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "IsExhausted",
					"type": "bool",
					"flags": [
						"Category = Recipe",
						"ModuleRelativePath = Inventory/TradeItemComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "CanCraft",
					"description": "Can Craft",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "Craft",
					"description": "Craft",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "GetIcon",
					"description": "Get Icon",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "const FSlateBrush&",
					"parameters": []
				},
				{
					"name": "GetIsExhausted",
					"description": "Get Is Exhausted",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "GetTitle",
					"description": "Get Title",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "FText",
					"parameters": []
				},
				{
					"name": "Init",
					"description": "Init",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "PC",
							"type": "APlayerController*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnInventoryChanged",
					"description": "On Inventory Changed",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewSourceInventory",
							"type": "UInventory*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetInteractorInventory",
					"description": "Set Interactor Inventory",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewInteractorInventory",
							"type": "UInventory*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetIsExhausted",
					"description": "Set Is Exhausted",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewIsExhausted",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetSourceInventory",
					"description": "Set Source Inventory",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewSourceInventory",
							"type": "UInventory*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "StopInteracting",
					"description": "Stop Interacting",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "URecipe",
					"className": "Recipe",
					"shortTitle": "Set Source Inventory",
					"fullTitle": "Set Source Inventory",
					"description": "",
					"imgPath": "../img/nd_img_SetSourceInventory.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Recipe Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Source Inventory",
							"type": "Inventory Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "URecipe",
					"className": "Recipe",
					"shortTitle": "Set Is Exhausted",
					"fullTitle": "Set Is Exhausted",
					"description": "",
					"imgPath": "../img/nd_img_SetIsExhausted.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Recipe Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Is Exhausted",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "URecipe",
					"className": "Recipe",
					"shortTitle": "Set Interactor Inventory",
					"fullTitle": "Set Interactor Inventory",
					"description": "",
					"imgPath": "../img/nd_img_SetInteractorInventory.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Recipe Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Interactor Inventory",
							"type": "Inventory Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "URecipe",
					"className": "Recipe",
					"shortTitle": "Init",
					"fullTitle": "Init",
					"description": "",
					"imgPath": "../img/nd_img_Init.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Recipe Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "PC",
							"type": "Player Controller Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "URecipe",
					"className": "Recipe",
					"shortTitle": "Get Title",
					"fullTitle": "Get Title",
					"description": "",
					"imgPath": "../img/nd_img_GetTitle.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Recipe Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Text",
							"description": "Get Title"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "URecipe",
					"className": "Recipe",
					"shortTitle": "Get Is Exhausted",
					"fullTitle": "Get Is Exhausted",
					"description": "",
					"imgPath": "../img/nd_img_GetIsExhausted.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Recipe Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Get Is Exhausted"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "URecipe",
					"className": "Recipe",
					"shortTitle": "Get Icon",
					"fullTitle": "Get Icon",
					"description": "",
					"imgPath": "../img/nd_img_GetIcon.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Recipe Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Slate Brush Structure (by ref)",
							"description": "Get Icon"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "URecipe",
					"className": "Recipe",
					"shortTitle": "Craft",
					"fullTitle": "Craft",
					"description": "",
					"imgPath": "../img/nd_img_Craft.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Recipe Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "URecipe",
					"className": "Recipe",
					"shortTitle": "Can Craft",
					"fullTitle": "Can Craft",
					"description": "",
					"imgPath": "../img/nd_img_CanCraft.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Recipe Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Can Craft"
						}
					]
				}
			]
		},
		{
			"className": "UNeedsRecipe",
			"classHierarchy": [
				"UObject",
				"UInterface"
			],
			"path": "Classes/Default/UNeedsRecipe",
			"properties": [],
			"functions": [
				{
					"name": "AssignRecipe",
					"description": "Assign Recipe",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Recipe",
							"type": "URecipe*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UNeedsRecipe",
					"className": "Needs Recipe",
					"shortTitle": "Event Assign Recipe",
					"fullTitle": "Event Assign Recipe\nFrom Needs Recipe",
					"description": "Add Event",
					"imgPath": "../img/nd_img_AssignRecipe.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Recipe",
							"type": "Recipe Object Reference",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UNeedsRecipe",
					"className": "Needs Recipe",
					"shortTitle": "Assign Recipe",
					"fullTitle": "Assign Recipe",
					"description": "",
					"imgPath": "../img/nd_img_AssignRecipe.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Needs Recipe Interface",
							"description": "$no_comments"
						},
						{
							"name": "Recipe",
							"type": "Recipe Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UTradeItemComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent"
			],
			"path": "Classes/Default/UTradeItemComponent",
			"properties": [
				{
					"name": "bDestroyActorOnExhausted",
					"type": "bool",
					"flags": [
						"Category = TradeItemComponent",
						"ModuleRelativePath = Inventory/TradeItemComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Recipe",
					"type": "TObjectPtr<URecipe>",
					"flags": [
						"Category = TradeItemComponent",
						"EditInline = true",
						"ModuleRelativePath = Inventory/TradeItemComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "OnRecipeExhaustedChanged",
					"description": "On Recipe Exhausted Changed",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "bIsExhausted",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			]
		},
		{
			"className": "ATradeItemPickup",
			"classHierarchy": [
				"UObject",
				"AActor",
				"AInteractiveActor",
				"AItemPickup"
			],
			"path": "Classes/Default/ATradeItemPickup",
			"properties": [
				{
					"name": "TradeItemComponent",
					"type": "TObjectPtr<UTradeItemComponent>",
					"flags": [
						"Category = TradeItemPickup",
						"EditInline = true",
						"ModuleRelativePath = Inventory/TradeItemComponent.h",
						"TitleProperty = Title",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "ATreasureRoomGameModeBase",
			"classHierarchy": [
				"UObject",
				"AActor",
				"AInfo",
				"AGameModeBase",
				"ALittleTrekkerGameMode"
			],
			"path": "Classes/Default/ATreasureRoomGameModeBase",
			"properties": [],
			"functions": [
				{
					"name": "AnnounceFinishedMissions",
					"description": "Announce Finished Missions",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "ATreasureRoomGameModeBase",
					"className": "Treasure Room Game Mode Base",
					"shortTitle": "Announce Finished Missions",
					"fullTitle": "Announce Finished Missions",
					"description": "",
					"imgPath": "../img/nd_img_AnnounceFinishedMissions.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Treasure Room Game Mode Base Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UTickableState",
			"classHierarchy": [
				"UObject"
			],
			"path": "Classes/Default/UTickableState",
			"properties": [
				{
					"name": "Owner",
					"type": "TWeakObjectPtr<UObject>",
					"flags": [
						"Category = TickableState",
						"ModuleRelativePath = Utils/UObjectTickFunction.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "TickInterval",
					"type": "float",
					"flags": [
						"BlueprintSetter = SetTickInterval",
						"Category = TickableState",
						"ModuleRelativePath = Utils/UObjectTickFunction.h",
						"Public",
						"BlueprintVisible",
						"Edit",
						"EditConst"
					],
					"description": ""
				},
				{
					"name": "PrimaryObjectTick",
					"type": "FUObjectTickFunction",
					"flags": [
						"Category = TickableState",
						"ModuleRelativePath = Utils/UObjectTickFunction.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "SetOwner",
					"description": "Set Owner",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewValue",
							"type": "UObject*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetTickInterval",
					"description": "Set Tick Interval",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NewValue",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UTickableState",
					"className": "Tickable State",
					"shortTitle": "Set Tick Interval",
					"fullTitle": "Set Tick Interval",
					"description": "",
					"imgPath": "../img/nd_img_SetTickInterval.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tickable State Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Value",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UTickableState",
					"className": "Tickable State",
					"shortTitle": "Set Owner",
					"fullTitle": "Set Owner",
					"description": "",
					"imgPath": "../img/nd_img_SetOwner.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Tickable State Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "New Value",
							"type": "Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UVFXInteractionEffect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect",
				"UInteractionEffect"
			],
			"path": "Classes/Default/UVFXInteractionEffect",
			"properties": [
				{
					"name": "StartVFX",
					"type": "TObjectPtr<UNiagaraSystem>",
					"flags": [
						"Category = Effect|FX|StartVFX",
						"Comment = //Category=\"Effect|FX|StartVFX\"\n",
						"ModuleRelativePath = Interaction/Effects/VFXInteractionEffect.h",
						"ToolTip = Category=\"Effect|FX|StartVFX\"",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Category=\"Effect|FX|StartVFX\""
				},
				{
					"name": "bUseFadeInTime",
					"type": "bool",
					"flags": [
						"Category = Effect|FX|StartVFX",
						"Comment = // Whether the Start Effect should Have Time Out.\n",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/Effects/VFXInteractionEffect.h",
						"ToolTip = Whether the Start Effect should Have Time Out.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Whether the Start Effect should Have Time Out."
				},
				{
					"name": "FadeInTime",
					"type": "float",
					"flags": [
						"Category = Effect|FX|StartVFX",
						"Comment = // Time That the Effect should Stay Before Fade.\n",
						"EditCondition = bUseFadeInTime",
						"ModuleRelativePath = Interaction/Effects/VFXInteractionEffect.h",
						"ToolTip = Time That the Effect should Stay Before Fade.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Time That the Effect should Stay Before Fade."
				},
				{
					"name": "Params",
					"type": "TArray",
					"flags": [
						"Category = Effect|FX|StartVFX",
						"Comment = //Niagara effect parameters\n",
						"ModuleRelativePath = Interaction/Effects/VFXInteractionEffect.h",
						"ToolTip = Niagara effect parameters",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Niagara effect parameters"
				},
				{
					"name": "LocationOffset",
					"type": "FVector",
					"flags": [
						"Category = Effect|FX|StartVFX",
						"ModuleRelativePath = Interaction/Effects/VFXInteractionEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "StopVFX",
					"type": "TObjectPtr<UNiagaraSystem>",
					"flags": [
						"Category = Effect|FX|StopVFX",
						"Comment = /// Stop VFX\n//Category=\"Effect|FX|StopVFX\"\n",
						"ModuleRelativePath = Interaction/Effects/VFXInteractionEffect.h",
						"ToolTip = Stop VFX\nCategory=\"Effect|FX|StopVFX\"",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Stop VFX\nCategory=\"Effect|FX|StopVFX\""
				},
				{
					"name": "bUseFadeOutTime",
					"type": "bool",
					"flags": [
						"Category = Effect|FX|StopVFX",
						"Comment = // Whether the Start Effect should Have Time Out.\n",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/Effects/VFXInteractionEffect.h",
						"ToolTip = Whether the Start Effect should Have Time Out.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Whether the Start Effect should Have Time Out."
				},
				{
					"name": "FadeOutTime",
					"type": "float",
					"flags": [
						"Category = Effect|FX|StopVFX",
						"Comment = // Time That the Effect should Stay Before Fade.\n",
						"EditCondition = bUseFadeOutTime",
						"ModuleRelativePath = Interaction/Effects/VFXInteractionEffect.h",
						"ToolTip = Time That the Effect should Stay Before Fade.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "Time That the Effect should Stay Before Fade."
				},
				{
					"name": "Params_StopVFX",
					"type": "TArray",
					"flags": [
						"Category = Effect|FX|StopVFX",
						"ModuleRelativePath = Interaction/Effects/VFXInteractionEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "LocationOffset_StopVFX",
					"type": "FVector",
					"flags": [
						"Category = Effect|FX|StopVFX",
						"ModuleRelativePath = Interaction/Effects/VFXInteractionEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "StartNiagaraComp",
					"type": "TObjectPtr<UNiagaraComponent>",
					"flags": [
						"EditInline = true",
						"ModuleRelativePath = Interaction/Effects/VFXInteractionEffect.h",
						"Protected"
					],
					"description": ""
				},
				{
					"name": "StopNiagaraComp",
					"type": "TObjectPtr<UNiagaraComponent>",
					"flags": [
						"EditInline = true",
						"ModuleRelativePath = Interaction/Effects/VFXInteractionEffect.h",
						"Protected"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "UVFXInteractionEffect2",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect",
				"UInteractionEffect"
			],
			"path": "Classes/Default/UVFXInteractionEffect2",
			"properties": [
				{
					"name": "SpawnParams",
					"type": "FFXSystemSpawnParameters",
					"flags": [
						"Category = VFXInteractionEffect2",
						"ModuleRelativePath = Interaction/Effects/VFXInteractionEffect2.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bDeactivateOnStop",
					"type": "bool",
					"flags": [
						"Category = VFXInteractionEffect2",
						"Comment = // deactivates niagara system on stop, otherwise will let system decide lifespan)\n",
						"ModuleRelativePath = Interaction/Effects/VFXInteractionEffect2.h",
						"ToolTip = deactivates niagara system on stop, otherwise will let system decide lifespan)",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "deactivates niagara system on stop, otherwise will let system decide lifespan)"
				},
				{
					"name": "Comp",
					"type": "TObjectPtr<UNiagaraComponent>",
					"flags": [
						"EditInline = true",
						"ModuleRelativePath = Interaction/Effects/VFXInteractionEffect2.h",
						"Protected"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "UWeatherSubsystem",
			"classHierarchy": [
				"UObject",
				"USubsystem",
				"UWorldSubsystem"
			],
			"path": "Classes/Default/UWeatherSubsystem",
			"properties": [
				{
					"name": "bIsWeatherEnabled",
					"type": "bool",
					"flags": [
						"Category = WeatherSubsystem",
						"Comment = /**\n\t * The purpose of this property is to enable or disable the weather system.\n\t */",
						"ModuleRelativePath = Climate/WeatherSubsystem.h",
						"ToolTip = The purpose of this property is to enable or disable the weather system.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "The purpose of this property is to enable or disable the weather system."
				},
				{
					"name": "bCanReset",
					"type": "bool",
					"flags": [
						"ModuleRelativePath = Climate/WeatherSubsystem.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "bIsRaining",
					"type": "bool",
					"flags": [
						"Category = WeatherSubsystem",
						"ModuleRelativePath = Climate/WeatherSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bIsSnowing",
					"type": "bool",
					"flags": [
						"Category = WeatherSubsystem",
						"ModuleRelativePath = Climate/WeatherSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "WeatherVolume",
					"type": "TObjectPtr<AWeatherVolume>",
					"flags": [
						"ModuleRelativePath = Climate/WeatherSubsystem.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "BiomeHabitatInfo",
					"type": "TObjectPtr<UBiomeHabitatInfo>",
					"flags": [
						"Category = WeatherSubsystem",
						"ModuleRelativePath = Climate/WeatherSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "TargetWeatherState",
					"type": "TObjectPtr<UClimateInfo>",
					"flags": [
						"Category = WeatherSubsystem",
						"ModuleRelativePath = Climate/WeatherSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "PreviousWeatherState",
					"type": "TObjectPtr<UClimateInfo>",
					"flags": [
						"Category = WeatherSubsystem",
						"ModuleRelativePath = Climate/WeatherSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "CurrentWeatherState",
					"type": "TObjectPtr<UClimateInfo>",
					"flags": [
						"Category = WeatherSubsystem",
						"ModuleRelativePath = Climate/WeatherSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "NextWeatherState",
					"type": "TObjectPtr<UClimateInfo>",
					"flags": [
						"Category = WeatherSubsystem",
						"ModuleRelativePath = Climate/WeatherSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "TransitionTimeBetweenWeatherStates",
					"type": "float",
					"flags": [
						"Category = WeatherSubsystem",
						"ModuleRelativePath = Climate/WeatherSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "WeatherStateDuration",
					"type": "float",
					"flags": [
						"Category = WeatherSubsystem",
						"ModuleRelativePath = Climate/WeatherSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "WeatherStateProbabilityMap",
					"type": "TMap",
					"flags": [
						"Category = WeatherSubsystem",
						"ModuleRelativePath = Climate/WeatherSubsystem.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OnWeatherStateChanged",
					"type": "FOnWeatherStateChanged",
					"flags": [
						"ModuleRelativePath = Climate/WeatherSubsystem.h",
						"Public",
						"BlueprintAssignable",
						"BlueprintCallable"
					],
					"description": ""
				},
				{
					"name": "OnWeatherStateTransitionStarted",
					"type": "FOnWeatherStateTransition",
					"flags": [
						"ModuleRelativePath = Climate/WeatherSubsystem.h",
						"Public",
						"BlueprintAssignable",
						"BlueprintCallable"
					],
					"description": ""
				},
				{
					"name": "OnWeatherStateTransitionEnded",
					"type": "FOnWeatherStateTransition",
					"flags": [
						"ModuleRelativePath = Climate/WeatherSubsystem.h",
						"Public",
						"BlueprintAssignable",
						"BlueprintCallable"
					],
					"description": ""
				},
				{
					"name": "OnRainStarted",
					"type": "FOnWeatherStarted",
					"flags": [
						"ModuleRelativePath = Climate/WeatherSubsystem.h",
						"Public",
						"BlueprintAssignable",
						"BlueprintCallable"
					],
					"description": ""
				},
				{
					"name": "OnRainFinished",
					"type": "FOnWeatherStarted",
					"flags": [
						"ModuleRelativePath = Climate/WeatherSubsystem.h",
						"Public",
						"BlueprintAssignable",
						"BlueprintCallable"
					],
					"description": ""
				},
				{
					"name": "OnSnowStarted",
					"type": "FOnWeatherStarted",
					"flags": [
						"ModuleRelativePath = Climate/WeatherSubsystem.h",
						"Public",
						"BlueprintAssignable",
						"BlueprintCallable"
					],
					"description": ""
				},
				{
					"name": "OnSnowFinished",
					"type": "FOnWeatherStarted",
					"flags": [
						"ModuleRelativePath = Climate/WeatherSubsystem.h",
						"Public",
						"BlueprintAssignable",
						"BlueprintCallable"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "CalculateWeatherStateProbabilityMap",
					"description": "Calculate Weather State Probability Map",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "TMap",
					"parameters": []
				},
				{
					"name": "CreateWeatherStateObjects",
					"description": "--------------------------------- Functions",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "GenerateRandomWeatherDuration",
					"description": "Generate Random Weather Duration",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "float",
					"parameters": []
				},
				{
					"name": "GetCurrentWeatherState",
					"description": "Get Current Weather State",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "UClimateInfo*",
					"parameters": []
				},
				{
					"name": "GetNextWeatherState",
					"description": "Get Next Weather State",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure"
					],
					"returnType": "UClimateInfo*",
					"parameters": []
				},
				{
					"name": "IsWeatherEnabled",
					"description": "Is Weather Enabled",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "bool",
					"parameters": []
				},
				{
					"name": "OnWeatherStarted__DelegateSignature",
					"description": "On Weather Started  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnWeatherStateChanged__DelegateSignature",
					"description": "--------------------------------- Delegates",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "PreviousWeather",
							"type": "UClimateInfo*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "CurrentWeather",
							"type": "UClimateInfo*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "NextWeather",
							"type": "UClimateInfo*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnWeatherStateTransition__DelegateSignature",
					"description": "On Weather State Transition  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "PreviousWeather",
							"type": "UClimateInfo*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "CurrentWeather",
							"type": "UClimateInfo*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SelectRandomWeatherState",
					"description": "Select Random Weather State",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "UClimateInfo*",
					"parameters": []
				},
				{
					"name": "SetBiomeHabitatInfo",
					"description": "Set Biome Habitat Info",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "BiomeDetails",
							"type": "UBiomeHabitatInfo*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetCurrentWeatherState",
					"description": "Set Current Weather State",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "WeatherState",
							"type": "UClimateInfo*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetNextWeatherState",
					"description": "Set Next Weather State",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "WeatherState",
							"type": "UClimateInfo*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "SetWeatherVolume",
					"description": "Set Weather Volume",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "WeatherVolumeRef",
							"type": "AWeatherVolume*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "TransitionToNextWeatherState",
					"description": "Transition to Next Weather State",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "NextState",
							"type": "UClimateInfo*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UWeatherSubsystem",
					"className": "Weather Subsystem",
					"shortTitle": "Transition to Next Weather State",
					"fullTitle": "Transition to Next Weather State",
					"description": "",
					"imgPath": "../img/nd_img_TransitionToNextWeatherState.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Weather Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Next State",
							"type": "Climate Info Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWeatherSubsystem",
					"className": "Weather Subsystem",
					"shortTitle": "Set Next Weather State",
					"fullTitle": "Set Next Weather State",
					"description": "",
					"imgPath": "../img/nd_img_SetNextWeatherState.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Weather Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Weather State",
							"type": "Climate Info Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWeatherSubsystem",
					"className": "Weather Subsystem",
					"shortTitle": "Set Current Weather State",
					"fullTitle": "Set Current Weather State",
					"description": "",
					"imgPath": "../img/nd_img_SetCurrentWeatherState.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Weather Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Weather State",
							"type": "Climate Info Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWeatherSubsystem",
					"className": "Weather Subsystem",
					"shortTitle": "Set Biome Habitat Info",
					"fullTitle": "Set Biome Habitat Info",
					"description": "",
					"imgPath": "../img/nd_img_SetBiomeHabitatInfo.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Weather Subsystem Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Biome Details",
							"type": "Biome Habitat Info Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWeatherSubsystem",
					"className": "Weather Subsystem",
					"shortTitle": "Select Random Weather State",
					"fullTitle": "Select Random Weather State",
					"description": "",
					"imgPath": "../img/nd_img_SelectRandomWeatherState.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Weather Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Climate Info Object Reference",
							"description": "Select Random Weather State"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWeatherSubsystem",
					"className": "Weather Subsystem",
					"shortTitle": "Is Weather Enabled",
					"fullTitle": "Is Weather Enabled",
					"description": "",
					"imgPath": "../img/nd_img_IsWeatherEnabled.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Weather Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Is Weather Enabled"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWeatherSubsystem",
					"className": "Weather Subsystem",
					"shortTitle": "Get Next Weather State",
					"fullTitle": "Get Next Weather State",
					"description": "",
					"imgPath": "../img/nd_img_GetNextWeatherState.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Weather Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Climate Info Object Reference",
							"description": "Get Next Weather State"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWeatherSubsystem",
					"className": "Weather Subsystem",
					"shortTitle": "Get Current Weather State",
					"fullTitle": "Get Current Weather State",
					"description": "",
					"imgPath": "../img/nd_img_GetCurrentWeatherState.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Weather Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "Climate Info Object Reference",
							"description": "Get Current Weather State"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWeatherSubsystem",
					"className": "Weather Subsystem",
					"shortTitle": "Calculate Weather State Probability Map",
					"fullTitle": "Calculate Weather State Probability Map",
					"description": "",
					"imgPath": "../img/nd_img_CalculateWeatherStateProbabilityMap.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Weather Subsystem Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Map of Climate Info Object References to Integers",
							"description": "Calculate Weather State Probability Map"
						}
					]
				}
			]
		},
		{
			"className": "AWeatherVolume",
			"classHierarchy": [
				"UObject",
				"AActor"
			],
			"path": "Classes/Default/AWeatherVolume",
			"properties": [
				{
					"name": "bIsAttached",
					"type": "bool",
					"flags": [
						"ModuleRelativePath = Climate/WeatherVolume.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "PlayerCharacter",
					"type": "ACharacter*",
					"flags": [
						"ModuleRelativePath = Climate/WeatherVolume.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "WeatherVolumeRootComponent",
					"type": "UBillboardComponent*",
					"flags": [
						"Category = WeatherVolume",
						"EditInline = true",
						"ModuleRelativePath = Climate/WeatherVolume.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "RainAudioComponent",
					"type": "UAudioComponent*",
					"flags": [
						"Category = WeatherVolume",
						"EditInline = true",
						"ModuleRelativePath = Climate/WeatherVolume.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "SnowAudioComponent",
					"type": "UAudioComponent*",
					"flags": [
						"Category = WeatherVolume",
						"EditInline = true",
						"ModuleRelativePath = Climate/WeatherVolume.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "RainParticleEmitter",
					"type": "UNiagaraComponent*",
					"flags": [
						"Category = WeatherVolume",
						"EditInline = true",
						"ModuleRelativePath = Climate/WeatherVolume.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "SnowParticleEmitter",
					"type": "UNiagaraComponent*",
					"flags": [
						"Category = WeatherVolume",
						"EditInline = true",
						"ModuleRelativePath = Climate/WeatherVolume.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "WeatherMapValue",
					"type": "int32",
					"flags": [
						"ModuleRelativePath = Climate/WeatherVolume.h",
						"Public"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "OnRep_WeatherMapValue",
					"description": "On Rep Weather Map Value",
					"flags": [
						"Final",
						"Native",
						"Public"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "ResetAllAudioComponents",
					"description": "Reset All Audio Components",
					"flags": [
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "ResetAllParticleEmitters",
					"description": "Reset All Particle Emitters",
					"flags": [
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "UpdateNiagaraParticleSettings",
					"description": "Update Niagara Particle Settings",
					"flags": [
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "AWeatherVolume",
					"className": "Weather Volume",
					"shortTitle": "Event Update Niagara Particle Settings",
					"fullTitle": "Event Update Niagara Particle Settings",
					"description": "Add Event",
					"imgPath": "../img/nd_img_UpdateNiagaraParticleSettings.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "AWeatherVolume",
					"className": "Weather Volume",
					"shortTitle": "Update Niagara Particle Settings",
					"fullTitle": "Update Niagara Particle Settings",
					"description": "",
					"imgPath": "../img/nd_img_UpdateNiagaraParticleSettings.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Weather Volume Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "AWeatherVolume",
					"className": "Weather Volume",
					"shortTitle": "Event Reset All Particle Emitters",
					"fullTitle": "Event Reset All Particle Emitters",
					"description": "Add Event",
					"imgPath": "../img/nd_img_ResetAllParticleEmitters.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "AWeatherVolume",
					"className": "Weather Volume",
					"shortTitle": "Reset All Particle Emitters",
					"fullTitle": "Reset All Particle Emitters",
					"description": "",
					"imgPath": "../img/nd_img_ResetAllParticleEmitters.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Weather Volume Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "AWeatherVolume",
					"className": "Weather Volume",
					"shortTitle": "Event Reset All Audio Components",
					"fullTitle": "Event Reset All Audio Components",
					"description": "Add Event",
					"imgPath": "../img/nd_img_ResetAllAudioComponents.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "AWeatherVolume",
					"className": "Weather Volume",
					"shortTitle": "Reset All Audio Components",
					"fullTitle": "Reset All Audio Components",
					"description": "",
					"imgPath": "../img/nd_img_ResetAllAudioComponents.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Weather Volume Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UWidgetBillboardComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent",
				"USceneComponent",
				"UPrimitiveComponent",
				"UMaterialBillboardComponent"
			],
			"path": "Classes/Default/UWidgetBillboardComponent",
			"properties": [
				{
					"name": "WidgetTypeToRender",
					"type": "TSubclassOf<UUserWidget>",
					"flags": [
						"Category = WidgetBillboardComponent",
						"ModuleRelativePath = Widget/WidgetBillboardComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "WidgetToRender",
					"type": "TObjectPtr<UUserWidget>",
					"flags": [
						"Category = WidgetBillboardComponent",
						"EditInline = true",
						"ModuleRelativePath = Widget/WidgetBillboardComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "DrawSize",
					"type": "FVector2D",
					"flags": [
						"Category = WidgetBillboardComponent",
						"ModuleRelativePath = Widget/WidgetBillboardComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "TextureParameterName",
					"type": "FName",
					"flags": [
						"Category = WidgetBillboardComponent",
						"ModuleRelativePath = Widget/WidgetBillboardComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "MaterialIndex",
					"type": "int32",
					"flags": [
						"Category = WidgetBillboardComponent",
						"ModuleRelativePath = Widget/WidgetBillboardComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "MaterialInstance",
					"type": "TObjectPtr<UMaterialInstanceDynamic>",
					"flags": [
						"ModuleRelativePath = Widget/WidgetBillboardComponent.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "OriginalMaterial",
					"type": "TObjectPtr<UMaterialInterface>",
					"flags": [
						"ModuleRelativePath = Widget/WidgetBillboardComponent.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "OriginalMaterialIndex",
					"type": "int32",
					"flags": [
						"ModuleRelativePath = Widget/WidgetBillboardComponent.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "bUseComponentAsOuter",
					"type": "bool",
					"flags": [
						"Category = WidgetBillboardComponent",
						"ModuleRelativePath = Widget/WidgetBillboardComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "InFilter",
					"type": "TEnumAsByte<TextureFilter>",
					"flags": [
						"Category = WidgetBillboardComponent",
						"ModuleRelativePath = Widget/WidgetBillboardComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bUseGammaCorrection",
					"type": "bool",
					"flags": [
						"Category = WidgetBillboardComponent",
						"ModuleRelativePath = Widget/WidgetBillboardComponent.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "RenderTarget",
					"type": "TObjectPtr<UTextureRenderTarget2D>",
					"flags": [
						"Category = WidgetBillboardComponent",
						"ModuleRelativePath = Widget/WidgetBillboardComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "bCreatedRenderTarget",
					"type": "bool",
					"flags": [
						"ModuleRelativePath = Widget/WidgetBillboardComponent.h",
						"Public"
					],
					"description": ""
				},
				{
					"name": "bTickOnce",
					"type": "bool",
					"flags": [
						"Category = WidgetBillboardComponent",
						"Comment = /**\n\t * If true, the component will tick once and then disable tick.\n\t */",
						"ModuleRelativePath = Widget/WidgetBillboardComponent.h",
						"ToolTip = If true, the component will tick once and then disable tick.",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "If true, the component will tick once and then disable tick."
				}
			],
			"functions": [
				{
					"name": "Init",
					"description": "Init",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "Refresh",
					"description": "Refresh",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintCallable",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "Reset",
					"description": "Reset",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UWidgetBillboardComponent",
					"className": "Widget Billboard Component",
					"shortTitle": "Reset",
					"fullTitle": "Reset",
					"description": "",
					"imgPath": "../img/nd_img_Reset.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Widget Billboard Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWidgetBillboardComponent",
					"className": "Widget Billboard Component",
					"shortTitle": "Event Refresh",
					"fullTitle": "Event Refresh",
					"description": "Add Event",
					"imgPath": "../img/nd_img_Refresh.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWidgetBillboardComponent",
					"className": "Widget Billboard Component",
					"shortTitle": "Refresh",
					"fullTitle": "Refresh",
					"description": "",
					"imgPath": "../img/nd_img_Refresh.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Widget Billboard Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWidgetBillboardComponent",
					"className": "Widget Billboard Component",
					"shortTitle": "Init",
					"fullTitle": "Init",
					"description": "",
					"imgPath": "../img/nd_img_Init.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Widget Billboard Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UWidgetEffect",
			"classHierarchy": [
				"UObject",
				"UMVVMViewModelBase",
				"UGameplayTagsObject",
				"UEffect"
			],
			"path": "Classes/Default/UWidgetEffect",
			"properties": [
				{
					"name": "WidgetInstance",
					"type": "TWeakObjectPtr<UWorldWidget>",
					"flags": [
						"Comment = // The widget instance \n",
						"ModuleRelativePath = Interaction/Effects/WidgetEffect.h",
						"ToolTip = The widget instance",
						"Public"
					],
					"description": "The widget instance"
				},
				{
					"name": "bUseWidgetClass",
					"type": "bool",
					"flags": [
						"Category = WidgetEffect",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/Effects/WidgetEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "WidgetClass",
					"type": "TSubclassOf<UWorldWidget>",
					"flags": [
						"Category = WidgetEffect",
						"Comment = // The class of the widget to be created\n",
						"DisplayName = 🖼️ Widget Class",
						"EditCondition = bUseWidgetClass",
						"ModuleRelativePath = Interaction/Effects/WidgetEffect.h",
						"ToolTip = The class of the widget to be created",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": "The class of the widget to be created"
				},
				{
					"name": "ViewportZOrder",
					"type": "int32",
					"flags": [
						"Category = WidgetEffect",
						"Comment = // ZOrder of the widget when added to the viewport.\t\n",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Interaction/Effects/WidgetEffect.h",
						"ToolTip = ZOrder of the widget when added to the viewport.",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": "ZOrder of the widget when added to the viewport."
				},
				{
					"name": "bUseOverrideOptions",
					"type": "bool",
					"flags": [
						"Category = WidgetEffect",
						"InlineEditConditionToggle",
						"ModuleRelativePath = Interaction/Effects/WidgetEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Options",
					"type": "FWorldWidgetOptions",
					"flags": [
						"Category = WidgetEffect",
						"Comment = // The WorldWidget options to use when creating the widget\n// See FWorldWidgetOptions\n",
						"DisplayName = 🖼️ Widget Options",
						"EditCondition = bUseOverrideOptions",
						"ExposeOnSpawn = true",
						"ModuleRelativePath = Interaction/Effects/WidgetEffect.h",
						"ToolTip = The WorldWidget options to use when creating the widget\nSee FWorldWidgetOptions",
						"Public",
						"BlueprintVisible",
						"ExposeOnSpawn",
						"Edit"
					],
					"description": "The WorldWidget options to use when creating the widget\nSee FWorldWidgetOptions"
				},
				{
					"name": "AttachmentSocketName",
					"type": "FName",
					"flags": [
						"Category = WidgetEffect",
						"ModuleRelativePath = Interaction/Effects/WidgetEffect.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "OnWidgetAddedToViewportDelegate_K2",
					"type": "FOnWidgetDelegate_K2",
					"flags": [
						"DisplayName = OnWidgetAddedToViewport",
						"ModuleRelativePath = Interaction/Effects/WidgetEffect.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				},
				{
					"name": "OnWidgetCreatedDelegate_K2",
					"type": "FOnWidgetDelegate_K2",
					"flags": [
						"DisplayName = OnWidgetCreated",
						"ModuleRelativePath = Interaction/Effects/WidgetEffect.h",
						"Public",
						"BlueprintAssignable"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "FadeIn",
					"description": "Fade In",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "FadeOut",
					"description": "Fade Out",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "FadeTo",
					"description": "Fade To",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Factor",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "GetSceneComponentNames",
					"description": "Get Scene Component Names",
					"flags": [
						"Final",
						"Native",
						"Protected",
						"Const"
					],
					"returnType": "TArray",
					"parameters": []
				},
				{
					"name": "GetWidgetInstance",
					"description": "Get Widget Instance",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable",
						"BlueprintPure",
						"Const"
					],
					"returnType": "UWorldWidget*",
					"parameters": []
				},
				{
					"name": "OnChange",
					"description": "On Change",
					"flags": [
						"Final",
						"Native",
						"Protected"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Visibility",
							"type": "ESlateVisibility",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnWidgetAddedToViewport",
					"description": "On Widget Added to Viewport",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Widget",
							"type": "UWorldWidget*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnWidgetCreated",
					"description": "On Widget Created",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Widget",
							"type": "UWorldWidget*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnWidgetDelegate_K2__DelegateSignature",
					"description": "On Widget Delegate K2  Delegate Signature",
					"flags": [
						"MulticastDelegate",
						"Public",
						"Delegate"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Widget",
							"type": "UWorldWidget*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnWidgetRemovedFromViewport",
					"description": "On Widget Removed from Viewport",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UWidgetEffect",
					"className": "Widget Effect",
					"shortTitle": "Event On Widget Removed from Viewport",
					"fullTitle": "Event On Widget Removed from Viewport",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnWidgetRemovedFromViewport.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWidgetEffect",
					"className": "Widget Effect",
					"shortTitle": "Event On Widget Created",
					"fullTitle": "Event On Widget Created",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnWidgetCreated.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Widget",
							"type": "World Widget Object Reference",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWidgetEffect",
					"className": "Widget Effect",
					"shortTitle": "Event On Widget Added to Viewport",
					"fullTitle": "Event On Widget Added to Viewport",
					"description": "Add Event",
					"imgPath": "../img/nd_img_OnWidgetAddedToViewport.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Widget",
							"type": "World Widget Object Reference",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWidgetEffect",
					"className": "Widget Effect",
					"shortTitle": "Get Widget Instance",
					"fullTitle": "Get Widget Instance",
					"description": "",
					"imgPath": "../img/nd_img_GetWidgetInstance.png",
					"inputs": [
						{
							"name": "Target",
							"type": "Widget Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Return Value",
							"type": "World Widget Object Reference",
							"description": "Get Widget Instance"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWidgetEffect",
					"className": "Widget Effect",
					"shortTitle": "Fade To",
					"fullTitle": "Fade To",
					"description": "",
					"imgPath": "../img/nd_img_FadeTo.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Widget Effect Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Factor",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWidgetEffect",
					"className": "Widget Effect",
					"shortTitle": "Fade Out",
					"fullTitle": "Fade Out",
					"description": "",
					"imgPath": "../img/nd_img_FadeOut.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Widget Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWidgetEffect",
					"className": "Widget Effect",
					"shortTitle": "Fade In",
					"fullTitle": "Fade In",
					"description": "",
					"imgPath": "../img/nd_img_FadeIn.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Widget Effect Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UWidgetToRenderTarget",
			"classHierarchy": [
				"UObject",
				"UBlueprintFunctionLibrary"
			],
			"path": "Classes/Default/UWidgetToRenderTarget",
			"properties": [],
			"functions": [
				{
					"name": "DrawWidgetToTarget",
					"description": "Draw Widget to Target",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"HasDefaults",
						"BlueprintCallable"
					],
					"returnType": "bool",
					"parameters": [
						{
							"name": "Target",
							"type": "UTextureRenderTarget2D*",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "WidgetToRender",
							"type": "UUserWidget*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						},
						{
							"name": "DrawSize",
							"type": "FVector2D",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "DeltaTime",
							"type": "float",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "bUseGamma",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "bClearTarget",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						},
						{
							"name": "bDeferRenderTargetUpdate",
							"type": "bool",
							"description": "",
							"flags": [
								"Public",
								"Parm"
							]
						}
					]
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UWidgetToRenderTarget",
					"className": "Widget to Render Target",
					"shortTitle": "Draw Widget to Target",
					"fullTitle": "Draw Widget to Target",
					"description": "Widget to Render Target",
					"imgPath": "../img/nd_img_DrawWidgetToTarget.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Texture Render Target 2D Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Widget to Render",
							"type": "User Widget Object Reference",
							"description": "$no_comments"
						},
						{
							"name": "Draw Size",
							"type": "Vector 2D Structure",
							"description": "$no_comments"
						},
						{
							"name": "Delta Time",
							"type": "Float (single-precision)",
							"description": "$no_comments"
						},
						{
							"name": "Use Gamma",
							"type": "Boolean",
							"description": "$no_comments"
						},
						{
							"name": "Clear Target",
							"type": "Boolean",
							"description": "$no_comments"
						},
						{
							"name": "Defer Render Target Update",
							"type": "Boolean",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Boolean",
							"description": "Draw Widget to Target"
						}
					]
				}
			]
		},
		{
			"className": "UWorldWidgetAttachmentComponent",
			"classHierarchy": [
				"UObject",
				"UActorComponent",
				"USceneComponent"
			],
			"path": "Classes/Default/UWorldWidgetAttachmentComponent",
			"properties": [
				{
					"name": "WidgetClass",
					"type": "TSubclassOf<UWorldWidget>",
					"flags": [
						"Category = UI",
						"ModuleRelativePath = Widget/WorldWidgetAttachmentComponent.h",
						"Public",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "WidgetInstance",
					"type": "TWeakObjectPtr<UWorldWidget>",
					"flags": [
						"Category = UI",
						"ModuleRelativePath = Widget/WorldWidgetAttachmentComponent.h",
						"Public",
						"BlueprintReadOnly",
						"BlueprintVisible"
					],
					"description": ""
				},
				{
					"name": "bDoFade",
					"type": "bool",
					"flags": [
						"Category = UI | Fade",
						"ModuleRelativePath = Widget/WorldWidgetAttachmentComponent.h",
						"Public",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "FadeSpringConfig",
					"type": "FFloatSpringConfig",
					"flags": [
						"Category = UI | Fade",
						"EditCondition = bDoFade",
						"ModuleRelativePath = Widget/WorldWidgetAttachmentComponent.h",
						"Public",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "InitialOpacity",
					"type": "float",
					"flags": [
						"Category = UI | Fade",
						"ClampMax = 1.000000",
						"ClampMin = 0.000000",
						"ModuleRelativePath = Widget/WorldWidgetAttachmentComponent.h",
						"Public",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "RemoveDelay",
					"type": "float",
					"flags": [
						"Category = UI | Fade",
						"Comment = /**\n\t * Delay before removing the widget after it has been hidden\n\t */",
						"ModuleRelativePath = Widget/WorldWidgetAttachmentComponent.h",
						"ToolTip = Delay before removing the widget after it has been hidden",
						"Public",
						"Edit"
					],
					"description": "Delay before removing the widget after it has been hidden"
				}
			],
			"functions": [
				{
					"name": "Hide",
					"description": "Hides the widget by fading it out, then removes it from the viewport.",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "OnWidgetCreated",
					"description": "Called when the widget is created.",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Widget",
							"type": "UWorldWidget*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "OnWidgetRemoved",
					"description": "Called when the widget is removed",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": [
						{
							"name": "Widget",
							"type": "UWorldWidget*",
							"description": "",
							"flags": [
								"EditInline = true",
								"Public",
								"Parm"
							]
						}
					]
				},
				{
					"name": "RemoveImmediately",
					"description": "Removes the widget from the viewport immediately.",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "void",
					"parameters": []
				},
				{
					"name": "Show",
					"description": "Shows the widget by fading it in.",
					"flags": [
						"Native",
						"Event",
						"Public",
						"BlueprintEvent"
					],
					"returnType": "void",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldWidgetAttachmentComponent",
					"className": "World Widget Attachment Component",
					"shortTitle": "Event Show",
					"fullTitle": "Event Show",
					"description": "Add Event|UI",
					"imgPath": "../img/nd_img_Show.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldWidgetAttachmentComponent",
					"className": "World Widget Attachment Component",
					"shortTitle": "Remove Immediately",
					"fullTitle": "Remove Immediately",
					"description": "UI",
					"imgPath": "../img/nd_img_RemoveImmediately.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "World Widget Attachment Component Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldWidgetAttachmentComponent",
					"className": "World Widget Attachment Component",
					"shortTitle": "Event On Widget Removed",
					"fullTitle": "Event On Widget Removed",
					"description": "Add Event|UI",
					"imgPath": "../img/nd_img_OnWidgetRemoved.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Widget",
							"type": "World Widget Object Reference",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldWidgetAttachmentComponent",
					"className": "World Widget Attachment Component",
					"shortTitle": "Event On Widget Created",
					"fullTitle": "Event On Widget Created",
					"description": "Add Event|UI",
					"imgPath": "../img/nd_img_OnWidgetCreated.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Widget",
							"type": "World Widget Object Reference",
							"description": "$no_comments"
						}
					]
				},
				{
					"docsName": "LittleTrekker",
					"classId": "UWorldWidgetAttachmentComponent",
					"className": "World Widget Attachment Component",
					"shortTitle": "Event Hide",
					"fullTitle": "Event Hide",
					"description": "Add Event|UI",
					"imgPath": "../img/nd_img_Hide.png",
					"inputs": [],
					"outputs": [
						{
							"name": "Output Delegate",
							"type": "Delegate",
							"description": "$no_comments"
						},
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						}
					]
				}
			]
		},
		{
			"className": "UGetMeshesWithNonDefaultMaterials",
			"classHierarchy": [
				"UObject",
				"UBaseActorFilter"
			],
			"path": "Classes/Default/UGetMeshesWithNonDefaultMaterials",
			"properties": [
				{
					"name": "bDebugEnabled",
					"type": "bool",
					"flags": [
						"Category = GetMeshesWithNonDefaultMaterials",
						"ModuleRelativePath = Toolkit/BasicActorFilters.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "UGetActorsWithMesh",
			"classHierarchy": [
				"UObject",
				"UBaseActorFilter"
			],
			"path": "Classes/Default/UGetActorsWithMesh",
			"properties": [
				{
					"name": "bUseSelectedActorsMeshes",
					"type": "bool",
					"flags": [
						"Category = GetActorsWithMesh",
						"ModuleRelativePath = Toolkit/BasicActorFilters.h",
						"Public",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Meshes",
					"type": "TSet",
					"flags": [
						"Category = GetActorsWithMesh",
						"EditCondition = !bUseSelectedActorsMeshes",
						"ModuleRelativePath = Toolkit/BasicActorFilters.h",
						"Public",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bDebugEnabled",
					"type": "bool",
					"flags": [
						"Category = GetActorsWithMesh",
						"ModuleRelativePath = Toolkit/BasicActorFilters.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "GetSelectedActorsMeshes",
					"description": "Get Selected Actors Meshes",
					"flags": [
						"Final",
						"Native",
						"Static",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "TSet",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UGetActorsWithMesh",
					"className": "Get Actors with Mesh",
					"shortTitle": "Get Selected Actors Meshes",
					"fullTitle": "Get Selected Actors Meshes",
					"description": "Filter",
					"imgPath": "../img/nd_img_GetSelectedActorsMeshes.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Set of Static Mesh Object References",
							"description": "Get Selected Actors Meshes"
						}
					]
				}
			]
		},
		{
			"className": "UGetActorsWithMaterial",
			"classHierarchy": [
				"UObject",
				"UBaseActorFilter"
			],
			"path": "Classes/Default/UGetActorsWithMaterial",
			"properties": [
				{
					"name": "bStrict",
					"type": "bool",
					"flags": [
						"Category = GetActorsWithMaterial",
						"ModuleRelativePath = Toolkit/BasicActorFilters.h",
						"Public",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bUseSelectedActorsMaterials",
					"type": "bool",
					"flags": [
						"Category = GetActorsWithMaterial",
						"ModuleRelativePath = Toolkit/BasicActorFilters.h",
						"Public",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Materials",
					"type": "TSet",
					"flags": [
						"Category = GetActorsWithMaterial",
						"EditCondition = !bUseSelectedActorsMaterials",
						"ModuleRelativePath = Toolkit/BasicActorFilters.h",
						"Public",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bDebugEnabled",
					"type": "bool",
					"flags": [
						"Category = GetActorsWithMaterial",
						"ModuleRelativePath = Toolkit/BasicActorFilters.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": [
				{
					"name": "GetSelectedActorsMaterials",
					"description": "Get Selected Actors Materials",
					"flags": [
						"Final",
						"Native",
						"Public",
						"BlueprintCallable"
					],
					"returnType": "TSet",
					"parameters": []
				}
			],
			"nodes": [
				{
					"docsName": "LittleTrekker",
					"classId": "UGetActorsWithMaterial",
					"className": "Get Actors with Material",
					"shortTitle": "Get Selected Actors Materials",
					"fullTitle": "Get Selected Actors Materials",
					"description": "Filter",
					"imgPath": "../img/nd_img_GetSelectedActorsMaterials.png",
					"inputs": [
						{
							"name": "In",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Target",
							"type": "Get Actors With Material Object Reference",
							"description": "$no_comments"
						}
					],
					"outputs": [
						{
							"name": "Out",
							"type": "Exec",
							"description": "$no_comments"
						},
						{
							"name": "Return Value",
							"type": "Set of Material Interface Object References",
							"description": "Get Selected Actors Materials"
						}
					]
				}
			]
		},
		{
			"className": "UGetActorsSimulatingPhysics",
			"classHierarchy": [
				"UObject",
				"UBaseActorFilter"
			],
			"path": "Classes/Default/UGetActorsSimulatingPhysics",
			"properties": [
				{
					"name": "bDebugEnabled",
					"type": "bool",
					"flags": [
						"Category = GetActorsSimulatingPhysics",
						"ModuleRelativePath = Toolkit/BasicActorFilters.h",
						"Public",
						"BlueprintVisible",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		},
		{
			"className": "UGetActorsNear",
			"classHierarchy": [
				"UObject",
				"UBaseActorFilter"
			],
			"path": "Classes/Default/UGetActorsNear",
			"properties": [
				{
					"name": "MinDistance",
					"type": "float",
					"flags": [
						"Category = GetActorsNear",
						"ModuleRelativePath = Toolkit/GetActorsNear.h",
						"Public",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "bUseNearSelectedActors",
					"type": "bool",
					"flags": [
						"Category = GetActorsNear",
						"ModuleRelativePath = Toolkit/GetActorsNear.h",
						"Public",
						"Edit"
					],
					"description": ""
				},
				{
					"name": "Location",
					"type": "FVector",
					"flags": [
						"Category = GetActorsNear",
						"EditCondition = !bUseSelectedActors",
						"ModuleRelativePath = Toolkit/GetActorsNear.h",
						"Public",
						"Edit"
					],
					"description": ""
				}
			],
			"functions": []
		}
	]
}